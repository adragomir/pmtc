// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: machinetalk/protobuf/preview.proto

package machinetalk_protobuf_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Experimental axis/joint representation.
type KinematicsType int32

const (
	KinematicsType_KT_JOINT    KinematicsType = 1 /// Joint kinematics.
	KinematicsType_KT_TRIVKINS KinematicsType = 2 /// Trivial kinematics.
	KinematicsType_KT_DELTA    KinematicsType = 3 /// Delta kinematics.
)

// Enum value maps for KinematicsType.
var (
	KinematicsType_name = map[int32]string{
		1: "KT_JOINT",
		2: "KT_TRIVKINS",
		3: "KT_DELTA",
	}
	KinematicsType_value = map[string]int32{
		"KT_JOINT":    1,
		"KT_TRIVKINS": 2,
		"KT_DELTA":    3,
	}
)

func (x KinematicsType) Enum() *KinematicsType {
	p := new(KinematicsType)
	*p = x
	return p
}

func (x KinematicsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KinematicsType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_preview_proto_enumTypes[0].Descriptor()
}

func (KinematicsType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_preview_proto_enumTypes[0]
}

func (x KinematicsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KinematicsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KinematicsType(num)
	return nil
}

// Deprecated: Use KinematicsType.Descriptor instead.
func (KinematicsType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_preview_proto_rawDescGZIP(), []int{0}
}

//*
// Type for preview operations.
type PreviewOpType int32

const (
	PreviewOpType_PV_STRAIGHT_PROBE     PreviewOpType = 1  /// Straight probe.
	PreviewOpType_PV_RIGID_TAP          PreviewOpType = 2  /// Rigid tap.
	PreviewOpType_PV_STRAIGHT_FEED      PreviewOpType = 3  /// Straight feed move.
	PreviewOpType_PV_ARC_FEED           PreviewOpType = 4  /// Arc feed move.
	PreviewOpType_PV_STRAIGHT_TRAVERSE  PreviewOpType = 5  /// Straight traverse move.
	PreviewOpType_PV_SET_G5X_OFFSET     PreviewOpType = 6  /// Set G5x offset.
	PreviewOpType_PV_SET_G92_OFFSET     PreviewOpType = 7  /// Set G92 offset.
	PreviewOpType_PV_SET_XY_ROTATION    PreviewOpType = 8  /// Set XY rotation.
	PreviewOpType_PV_SELECT_PLANE       PreviewOpType = 9  /// Select plane.
	PreviewOpType_PV_SET_TRAVERSE_RATE  PreviewOpType = 10 /// Set feedrate for traverse moves.
	PreviewOpType_PV_SET_FEED_RATE      PreviewOpType = 11 /// Set feedrate for normal moves.
	PreviewOpType_PV_CHANGE_TOOL        PreviewOpType = 12 /// Change tool.
	PreviewOpType_PV_CHANGE_TOOL_NUMBER PreviewOpType = 13 /// Change tool number.
	PreviewOpType_PV_DWELL              PreviewOpType = 14 /// Dwell.
	PreviewOpType_PV_MESSAGE            PreviewOpType = 15 /// Print message.
	PreviewOpType_PV_COMMENT            PreviewOpType = 16 /// GCode comment.
	PreviewOpType_PV_USE_TOOL_OFFSET    PreviewOpType = 17 /// Use tool offset.
	PreviewOpType_PV_SET_PARAMS         PreviewOpType = 18 /// kins, axismask, angle_units, length_units
	PreviewOpType_PV_SET_FEED_MODE      PreviewOpType = 19 /// Set the feed mode.
	PreviewOpType_PV_SOURCE_CONTEXT     PreviewOpType = 20 /// Change the source context.
	PreviewOpType_PV_PREVIEW_START      PreviewOpType = 21 /// Start of preview
	PreviewOpType_PV_PREVIEW_END        PreviewOpType = 22 /// End of preview
)

// Enum value maps for PreviewOpType.
var (
	PreviewOpType_name = map[int32]string{
		1:  "PV_STRAIGHT_PROBE",
		2:  "PV_RIGID_TAP",
		3:  "PV_STRAIGHT_FEED",
		4:  "PV_ARC_FEED",
		5:  "PV_STRAIGHT_TRAVERSE",
		6:  "PV_SET_G5X_OFFSET",
		7:  "PV_SET_G92_OFFSET",
		8:  "PV_SET_XY_ROTATION",
		9:  "PV_SELECT_PLANE",
		10: "PV_SET_TRAVERSE_RATE",
		11: "PV_SET_FEED_RATE",
		12: "PV_CHANGE_TOOL",
		13: "PV_CHANGE_TOOL_NUMBER",
		14: "PV_DWELL",
		15: "PV_MESSAGE",
		16: "PV_COMMENT",
		17: "PV_USE_TOOL_OFFSET",
		18: "PV_SET_PARAMS",
		19: "PV_SET_FEED_MODE",
		20: "PV_SOURCE_CONTEXT",
		21: "PV_PREVIEW_START",
		22: "PV_PREVIEW_END",
	}
	PreviewOpType_value = map[string]int32{
		"PV_STRAIGHT_PROBE":     1,
		"PV_RIGID_TAP":          2,
		"PV_STRAIGHT_FEED":      3,
		"PV_ARC_FEED":           4,
		"PV_STRAIGHT_TRAVERSE":  5,
		"PV_SET_G5X_OFFSET":     6,
		"PV_SET_G92_OFFSET":     7,
		"PV_SET_XY_ROTATION":    8,
		"PV_SELECT_PLANE":       9,
		"PV_SET_TRAVERSE_RATE":  10,
		"PV_SET_FEED_RATE":      11,
		"PV_CHANGE_TOOL":        12,
		"PV_CHANGE_TOOL_NUMBER": 13,
		"PV_DWELL":              14,
		"PV_MESSAGE":            15,
		"PV_COMMENT":            16,
		"PV_USE_TOOL_OFFSET":    17,
		"PV_SET_PARAMS":         18,
		"PV_SET_FEED_MODE":      19,
		"PV_SOURCE_CONTEXT":     20,
		"PV_PREVIEW_START":      21,
		"PV_PREVIEW_END":        22,
	}
)

func (x PreviewOpType) Enum() *PreviewOpType {
	p := new(PreviewOpType)
	*p = x
	return p
}

func (x PreviewOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreviewOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_preview_proto_enumTypes[1].Descriptor()
}

func (PreviewOpType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_preview_proto_enumTypes[1]
}

func (x PreviewOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PreviewOpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PreviewOpType(num)
	return nil
}

// Deprecated: Use PreviewOpType.Descriptor instead.
func (PreviewOpType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_preview_proto_rawDescGZIP(), []int{1}
}

//*
// Preview source types..
type SourceType int32

const (
	SourceType_ST_NGC_FILE      SourceType = 1 /// An NGC file.
	SourceType_ST_NGC_STRING    SourceType = 2 /// A MDI string.
	SourceType_ST_PYTHON_METHOD SourceType = 3 /// A Python method.
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		1: "ST_NGC_FILE",
		2: "ST_NGC_STRING",
		3: "ST_PYTHON_METHOD",
	}
	SourceType_value = map[string]int32{
		"ST_NGC_FILE":      1,
		"ST_NGC_STRING":    2,
		"ST_PYTHON_METHOD": 3,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_preview_proto_enumTypes[2].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_preview_proto_enumTypes[2]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SourceType(num)
	return nil
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_preview_proto_rawDescGZIP(), []int{2}
}

//*
// Preview position.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float64 `protobuf:"fixed64,3,opt,name=x" json:"x,omitempty"`
	Y *float64 `protobuf:"fixed64,4,opt,name=y" json:"y,omitempty"`
	Z *float64 `protobuf:"fixed64,5,opt,name=z" json:"z,omitempty"`
	A *float64 `protobuf:"fixed64,6,opt,name=a" json:"a,omitempty"`
	B *float64 `protobuf:"fixed64,7,opt,name=b" json:"b,omitempty"`
	C *float64 `protobuf:"fixed64,8,opt,name=c" json:"c,omitempty"`
	U *float64 `protobuf:"fixed64,9,opt,name=u" json:"u,omitempty"`
	V *float64 `protobuf:"fixed64,10,opt,name=v" json:"v,omitempty"`
	W *float64 `protobuf:"fixed64,11,opt,name=w" json:"w,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_preview_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_preview_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_preview_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetX() float64 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Position) GetY() float64 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Position) GetZ() float64 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Position) GetA() float64 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *Position) GetB() float64 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *Position) GetC() float64 {
	if x != nil && x.C != nil {
		return *x.C
	}
	return 0
}

func (x *Position) GetU() float64 {
	if x != nil && x.U != nil {
		return *x.U
	}
	return 0
}

func (x *Position) GetV() float64 {
	if x != nil && x.V != nil {
		return *x.V
	}
	return 0
}

func (x *Position) GetW() float64 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

//*
// The preview data structure.
type Preview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *PreviewOpType `protobuf:"varint,1,req,name=type,enum=machinetalk.PreviewOpType" json:"type,omitempty"` /// Type of the preview operation.
	LineNumber *int32         `protobuf:"varint,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`  /// The line number this preview command corresponds to.
	//* move dest pos/offset for PV_STRAIGHT_*, PV_RIGID_TAP, PV_SET_* _OFFSET
	// _position for PV_ARC_FEED, PV_USE_TOOL_OFFSET
	Pos *Position `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	// for PV_ARC_FEED only:
	FirstEnd     *float64 `protobuf:"fixed64,4,opt,name=first_end,json=firstEnd" json:"first_end,omitempty"`               /// First point for PV_ARC_FEED.
	SecondEnd    *float64 `protobuf:"fixed64,5,opt,name=second_end,json=secondEnd" json:"second_end,omitempty"`            /// Second point for PV_ARC_FEED.
	FirstAxis    *float64 `protobuf:"fixed64,6,opt,name=first_axis,json=firstAxis" json:"first_axis,omitempty"`            /// First axis for PV_ARC_FEED.
	SecondAxis   *float64 `protobuf:"fixed64,7,opt,name=second_axis,json=secondAxis" json:"second_axis,omitempty"`         /// Second axis for PV_ARC_FEED.
	Rotation     *int32   `protobuf:"varint,8,opt,name=rotation" json:"rotation,omitempty"`                                /// Rotation for PV_ARC_FEED.
	AxisEndPoint *float64 `protobuf:"fixed64,9,opt,name=axis_end_point,json=axisEndPoint" json:"axis_end_point,omitempty"` /// Axis endpoint for PV_ARC_FEED.
	// for PV_SET_XY_ROTATION:
	XyRotation *float64 `protobuf:"fixed64,10,opt,name=xy_rotation,json=xyRotation" json:"xy_rotation,omitempty"` /// XY rotation for PV_SET_XY_ROTATION.
	// for PV_SELECT_PLANE:
	Plane *int32 `protobuf:"varint,11,opt,name=plane" json:"plane,omitempty"` /// Plane for PV_SET_XY_ROTATION.
	// for PV_SET_TRAVERSE_RATE, PV_SET_FEED_RATE
	Rate *float64 `protobuf:"fixed64,12,opt,name=rate" json:"rate,omitempty"` /// feedrate for PV_SET_TRAVERSE_RATE and PV_SET_FEED_RATE.
	// PV_SET_FEED_MODE
	FeedMode *int32 `protobuf:"varint,13,opt,name=feed_mode,json=feedMode" json:"feed_mode,omitempty"` /// Mode for PV_SET_FEED_MODE.
	// PV_DWELL
	Time *float64 `protobuf:"fixed64,14,opt,name=time" json:"time,omitempty"` /// Time for PV_DWELL.
	// PV_COMMENT, PV_MESSAGE
	Text *string `protobuf:"bytes,15,opt,name=text" json:"text,omitempty"` /// Text for PV_COMMENT and PV_MESSAGE.
	// rarely used:
	AngularUnits *float64        `protobuf:"fixed64,101,opt,name=angular_units,json=angularUnits" json:"angular_units,omitempty"`  /// Angular units: rarely used.
	LengthUnits  *float64        `protobuf:"fixed64,102,opt,name=length_units,json=lengthUnits" json:"length_units,omitempty"`     /// Length units: rarely used.
	Probetype    *int32          `protobuf:"varint,103,opt,name=probetype" json:"probetype,omitempty"`                             /// Probe type: rarely used.
	Kins         *KinematicsType `protobuf:"varint,104,opt,name=kins,enum=machinetalk.KinematicsType,def=1" json:"kins,omitempty"` /// Kinematics type: rarely used.
	Axismask     *int32          `protobuf:"varint,105,opt,name=axismask" json:"axismask,omitempty"`                               /// Axis mask: rarely used.
	G5Index      *int32          `protobuf:"varint,106,opt,name=g5_index,json=g5Index" json:"g5_index,omitempty"`                  /// g5_index: rarely used.
	//  PV_CHANGE_TOOL, PV_CHANGE_TOOL_NUMBER
	Pocket *int32 `protobuf:"varint,107,opt,name=pocket" json:"pocket,omitempty"` /// Pocket for PV_CHANGE_TOOL and PV_CHANGE_TOOL_NUMBER.
	// PV_SOURCE_CONTEXT
	Stype     *SourceType `protobuf:"varint,110,opt,name=stype,enum=machinetalk.SourceType" json:"stype,omitempty"` /// Source type for PV_SOURCE_CONTEXT.
	Filename  *string     `protobuf:"bytes,111,opt,name=filename" json:"filename,omitempty"`                        /// File name if source type is a NGC file.
	Cmdstring *string     `protobuf:"bytes,112,opt,name=cmdstring" json:"cmdstring,omitempty"`                      /// Command string if source type is a MDI command.
	CallLevel *int32      `protobuf:"varint,113,opt,name=call_level,json=callLevel" json:"call_level,omitempty"`    /// Call stack depth.
}

// Default values for Preview fields.
const (
	Default_Preview_Kins = KinematicsType_KT_JOINT
)

func (x *Preview) Reset() {
	*x = Preview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_preview_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preview) ProtoMessage() {}

func (x *Preview) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_preview_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preview.ProtoReflect.Descriptor instead.
func (*Preview) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_preview_proto_rawDescGZIP(), []int{1}
}

func (x *Preview) GetType() PreviewOpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PreviewOpType_PV_STRAIGHT_PROBE
}

func (x *Preview) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *Preview) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Preview) GetFirstEnd() float64 {
	if x != nil && x.FirstEnd != nil {
		return *x.FirstEnd
	}
	return 0
}

func (x *Preview) GetSecondEnd() float64 {
	if x != nil && x.SecondEnd != nil {
		return *x.SecondEnd
	}
	return 0
}

func (x *Preview) GetFirstAxis() float64 {
	if x != nil && x.FirstAxis != nil {
		return *x.FirstAxis
	}
	return 0
}

func (x *Preview) GetSecondAxis() float64 {
	if x != nil && x.SecondAxis != nil {
		return *x.SecondAxis
	}
	return 0
}

func (x *Preview) GetRotation() int32 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

func (x *Preview) GetAxisEndPoint() float64 {
	if x != nil && x.AxisEndPoint != nil {
		return *x.AxisEndPoint
	}
	return 0
}

func (x *Preview) GetXyRotation() float64 {
	if x != nil && x.XyRotation != nil {
		return *x.XyRotation
	}
	return 0
}

func (x *Preview) GetPlane() int32 {
	if x != nil && x.Plane != nil {
		return *x.Plane
	}
	return 0
}

func (x *Preview) GetRate() float64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *Preview) GetFeedMode() int32 {
	if x != nil && x.FeedMode != nil {
		return *x.FeedMode
	}
	return 0
}

func (x *Preview) GetTime() float64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Preview) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Preview) GetAngularUnits() float64 {
	if x != nil && x.AngularUnits != nil {
		return *x.AngularUnits
	}
	return 0
}

func (x *Preview) GetLengthUnits() float64 {
	if x != nil && x.LengthUnits != nil {
		return *x.LengthUnits
	}
	return 0
}

func (x *Preview) GetProbetype() int32 {
	if x != nil && x.Probetype != nil {
		return *x.Probetype
	}
	return 0
}

func (x *Preview) GetKins() KinematicsType {
	if x != nil && x.Kins != nil {
		return *x.Kins
	}
	return Default_Preview_Kins
}

func (x *Preview) GetAxismask() int32 {
	if x != nil && x.Axismask != nil {
		return *x.Axismask
	}
	return 0
}

func (x *Preview) GetG5Index() int32 {
	if x != nil && x.G5Index != nil {
		return *x.G5Index
	}
	return 0
}

func (x *Preview) GetPocket() int32 {
	if x != nil && x.Pocket != nil {
		return *x.Pocket
	}
	return 0
}

func (x *Preview) GetStype() SourceType {
	if x != nil && x.Stype != nil {
		return *x.Stype
	}
	return SourceType_ST_NGC_FILE
}

func (x *Preview) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *Preview) GetCmdstring() string {
	if x != nil && x.Cmdstring != nil {
		return *x.Cmdstring
	}
	return ""
}

func (x *Preview) GetCallLevel() int32 {
	if x != nil && x.CallLevel != nil {
		return *x.CallLevel
	}
	return 0
}

var File_machinetalk_protobuf_preview_proto protoreflect.FileDescriptor

var file_machinetalk_protobuf_preview_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x75, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x76, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x77, 0x3a,
	0x06, 0x92, 0x3f, 0x03, 0x48, 0xa0, 0x06, 0x22, 0xd1, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x78, 0x69, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x41, 0x78, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x78, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x78,
	0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x78, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4b, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x08, 0x4b, 0x54,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x78, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x78, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x35, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x35, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6d, 0x64, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6d, 0x64, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xa1, 0x06, 0x2a, 0x3d, 0x0a, 0x0e, 0x4b,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4b,
	0x54, 0x5f, 0x54, 0x52, 0x49, 0x56, 0x4b, 0x49, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x03, 0x2a, 0xe3, 0x03, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x56, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x42,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x56, 0x5f, 0x52, 0x49, 0x47, 0x49, 0x44, 0x5f,
	0x54, 0x41, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x56, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x56, 0x5f, 0x41, 0x52, 0x43, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x56, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x56, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x47, 0x35, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x56, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x39, 0x32, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x56, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x58,
	0x59, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x56, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10,
	0x09, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x56, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x56, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x56, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x4c, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x56, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x56, 0x5f, 0x44, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x0e, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x56, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x56, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x56, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x56, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x56, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x56, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x56, 0x5f, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x56, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x16,
	0x2a, 0x46, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x5f, 0x4e, 0x47, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x4e, 0x47, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x03, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x6b, 0x69,
	0x74, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
}

var (
	file_machinetalk_protobuf_preview_proto_rawDescOnce sync.Once
	file_machinetalk_protobuf_preview_proto_rawDescData = file_machinetalk_protobuf_preview_proto_rawDesc
)

func file_machinetalk_protobuf_preview_proto_rawDescGZIP() []byte {
	file_machinetalk_protobuf_preview_proto_rawDescOnce.Do(func() {
		file_machinetalk_protobuf_preview_proto_rawDescData = protoimpl.X.CompressGZIP(file_machinetalk_protobuf_preview_proto_rawDescData)
	})
	return file_machinetalk_protobuf_preview_proto_rawDescData
}

var file_machinetalk_protobuf_preview_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_machinetalk_protobuf_preview_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_machinetalk_protobuf_preview_proto_goTypes = []interface{}{
	(KinematicsType)(0), // 0: machinetalk.KinematicsType
	(PreviewOpType)(0),  // 1: machinetalk.PreviewOpType
	(SourceType)(0),     // 2: machinetalk.SourceType
	(*Position)(nil),    // 3: machinetalk.Position
	(*Preview)(nil),     // 4: machinetalk.Preview
}
var file_machinetalk_protobuf_preview_proto_depIdxs = []int32{
	1, // 0: machinetalk.Preview.type:type_name -> machinetalk.PreviewOpType
	3, // 1: machinetalk.Preview.pos:type_name -> machinetalk.Position
	0, // 2: machinetalk.Preview.kins:type_name -> machinetalk.KinematicsType
	2, // 3: machinetalk.Preview.stype:type_name -> machinetalk.SourceType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_machinetalk_protobuf_preview_proto_init() }
func file_machinetalk_protobuf_preview_proto_init() {
	if File_machinetalk_protobuf_preview_proto != nil {
		return
	}
	file_machinetalk_protobuf_nanopb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_machinetalk_protobuf_preview_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_preview_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machinetalk_protobuf_preview_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machinetalk_protobuf_preview_proto_goTypes,
		DependencyIndexes: file_machinetalk_protobuf_preview_proto_depIdxs,
		EnumInfos:         file_machinetalk_protobuf_preview_proto_enumTypes,
		MessageInfos:      file_machinetalk_protobuf_preview_proto_msgTypes,
	}.Build()
	File_machinetalk_protobuf_preview_proto = out.File
	file_machinetalk_protobuf_preview_proto_rawDesc = nil
	file_machinetalk_protobuf_preview_proto_goTypes = nil
	file_machinetalk_protobuf_preview_proto_depIdxs = nil
}
