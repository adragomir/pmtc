// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: machinetalk/protobuf/status.proto

// see README.msgid
// msgid base: 1100

package machinetalk_protobuf_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//  Types for EMC task execution state.
type EmcTaskExecStateType int32

const (
	EmcTaskExecStateType_EMC_TASK_EXEC_ERROR                        EmcTaskExecStateType = 1  /// Error during task execution.
	EmcTaskExecStateType_EMC_TASK_EXEC_DONE                         EmcTaskExecStateType = 2  /// Task execution has bee completed.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_MOTION           EmcTaskExecStateType = 3  /// Task execution is waiting for Motion.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE     EmcTaskExecStateType = 4  /// Task execution is waiting for Motion queue.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_IO               EmcTaskExecStateType = 5  /// Task execution is waiting for IO.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO    EmcTaskExecStateType = 7  /// Task execution is waiting for Motion and IO.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_DELAY            EmcTaskExecStateType = 8  /// Task execution is waiting for a delay.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD       EmcTaskExecStateType = 9  /// Task execution is waiting for a system command.
	EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED EmcTaskExecStateType = 10 /// Task execution is waiting for spindle orientation to complete.
)

// Enum value maps for EmcTaskExecStateType.
var (
	EmcTaskExecStateType_name = map[int32]string{
		1:  "EMC_TASK_EXEC_ERROR",
		2:  "EMC_TASK_EXEC_DONE",
		3:  "EMC_TASK_EXEC_WAITING_FOR_MOTION",
		4:  "EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE",
		5:  "EMC_TASK_EXEC_WAITING_FOR_IO",
		7:  "EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO",
		8:  "EMC_TASK_EXEC_WAITING_FOR_DELAY",
		9:  "EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD",
		10: "EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED",
	}
	EmcTaskExecStateType_value = map[string]int32{
		"EMC_TASK_EXEC_ERROR":                        1,
		"EMC_TASK_EXEC_DONE":                         2,
		"EMC_TASK_EXEC_WAITING_FOR_MOTION":           3,
		"EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE":     4,
		"EMC_TASK_EXEC_WAITING_FOR_IO":               5,
		"EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO":    7,
		"EMC_TASK_EXEC_WAITING_FOR_DELAY":            8,
		"EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD":       9,
		"EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED": 10,
	}
)

func (x EmcTaskExecStateType) Enum() *EmcTaskExecStateType {
	p := new(EmcTaskExecStateType)
	*p = x
	return p
}

func (x EmcTaskExecStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcTaskExecStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[0].Descriptor()
}

func (EmcTaskExecStateType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[0]
}

func (x EmcTaskExecStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcTaskExecStateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcTaskExecStateType(num)
	return nil
}

// Deprecated: Use EmcTaskExecStateType.Descriptor instead.
func (EmcTaskExecStateType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{0}
}

//*
// Types for EMC task interpreter state.
type EmcInterpStateType int32

const (
	EmcInterpStateType_EMC_TASK_INTERP_IDLE    EmcInterpStateType = 1 /// Task interpreter is idling.
	EmcInterpStateType_EMC_TASK_INTERP_READING EmcInterpStateType = 2 /// Task interpreter is reading.
	EmcInterpStateType_EMC_TASK_INTERP_PAUSED  EmcInterpStateType = 3 /// Task interpreter is paused.
	EmcInterpStateType_EMC_TASK_INTERP_WAITING EmcInterpStateType = 4 /// Task interpreter is waiting.
	EmcInterpStateType_EMC_TASK_INTERP_SEEKING EmcInterpStateType = 5 /// Task interpreter is seeking.
)

// Enum value maps for EmcInterpStateType.
var (
	EmcInterpStateType_name = map[int32]string{
		1: "EMC_TASK_INTERP_IDLE",
		2: "EMC_TASK_INTERP_READING",
		3: "EMC_TASK_INTERP_PAUSED",
		4: "EMC_TASK_INTERP_WAITING",
		5: "EMC_TASK_INTERP_SEEKING",
	}
	EmcInterpStateType_value = map[string]int32{
		"EMC_TASK_INTERP_IDLE":    1,
		"EMC_TASK_INTERP_READING": 2,
		"EMC_TASK_INTERP_PAUSED":  3,
		"EMC_TASK_INTERP_WAITING": 4,
		"EMC_TASK_INTERP_SEEKING": 5,
	}
)

func (x EmcInterpStateType) Enum() *EmcInterpStateType {
	p := new(EmcInterpStateType)
	*p = x
	return p
}

func (x EmcInterpStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcInterpStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[1].Descriptor()
}

func (EmcInterpStateType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[1]
}

func (x EmcInterpStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcInterpStateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcInterpStateType(num)
	return nil
}

// Deprecated: Use EmcInterpStateType.Descriptor instead.
func (EmcInterpStateType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{1}
}

//*
// Types for EMC interpreter exit codes.
type EmcInterpExitCodeType int32

const (
	EmcInterpExitCodeType_EMC_INTERP_EXIT_OK             EmcInterpExitCodeType = 0 /// Interpreter exited successfully.
	EmcInterpExitCodeType_EMC_INTERP_EXIT_EXIT           EmcInterpExitCodeType = 1 /// Interpreter exited with no status information.
	EmcInterpExitCodeType_EMC_INTERP_EXIT_EXECUTE_FINISH EmcInterpExitCodeType = 2 /// Interpreter execution finished.
	EmcInterpExitCodeType_EMC_INTERP_EXIT_ENDFILE        EmcInterpExitCodeType = 3 /// Interpreter has reached end of file.
	EmcInterpExitCodeType_EMC_INTERP_EXIT_FILE_NOT_OPEN  EmcInterpExitCodeType = 4 /// Interpreter could not open the file.
	EmcInterpExitCodeType_EMC_INTERP_EXIT_ERROR          EmcInterpExitCodeType = 5 /// Interpreter exited with an error.
)

// Enum value maps for EmcInterpExitCodeType.
var (
	EmcInterpExitCodeType_name = map[int32]string{
		0: "EMC_INTERP_EXIT_OK",
		1: "EMC_INTERP_EXIT_EXIT",
		2: "EMC_INTERP_EXIT_EXECUTE_FINISH",
		3: "EMC_INTERP_EXIT_ENDFILE",
		4: "EMC_INTERP_EXIT_FILE_NOT_OPEN",
		5: "EMC_INTERP_EXIT_ERROR",
	}
	EmcInterpExitCodeType_value = map[string]int32{
		"EMC_INTERP_EXIT_OK":             0,
		"EMC_INTERP_EXIT_EXIT":           1,
		"EMC_INTERP_EXIT_EXECUTE_FINISH": 2,
		"EMC_INTERP_EXIT_ENDFILE":        3,
		"EMC_INTERP_EXIT_FILE_NOT_OPEN":  4,
		"EMC_INTERP_EXIT_ERROR":          5,
	}
)

func (x EmcInterpExitCodeType) Enum() *EmcInterpExitCodeType {
	p := new(EmcInterpExitCodeType)
	*p = x
	return p
}

func (x EmcInterpExitCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcInterpExitCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[2].Descriptor()
}

func (EmcInterpExitCodeType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[2]
}

func (x EmcInterpExitCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcInterpExitCodeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcInterpExitCodeType(num)
	return nil
}

// Deprecated: Use EmcInterpExitCodeType.Descriptor instead.
func (EmcInterpExitCodeType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{2}
}

//*
// EMC kinematics type.
type EmcKinematicsType int32

const (
	EmcKinematicsType_KINEMATICS_IDENTITY     EmcKinematicsType = 1 /// Identity kinematics.
	EmcKinematicsType_KINEMATICS_FORWARD_ONLY EmcKinematicsType = 2 /// Forward only kinematics.
	EmcKinematicsType_KINEMATICS_INVERSE_ONLY EmcKinematicsType = 3 /// Inverse only kinematics.
	EmcKinematicsType_KINEMATICS_BOTH         EmcKinematicsType = 4 /// Forward and inverse kinematics.
)

// Enum value maps for EmcKinematicsType.
var (
	EmcKinematicsType_name = map[int32]string{
		1: "KINEMATICS_IDENTITY",
		2: "KINEMATICS_FORWARD_ONLY",
		3: "KINEMATICS_INVERSE_ONLY",
		4: "KINEMATICS_BOTH",
	}
	EmcKinematicsType_value = map[string]int32{
		"KINEMATICS_IDENTITY":     1,
		"KINEMATICS_FORWARD_ONLY": 2,
		"KINEMATICS_INVERSE_ONLY": 3,
		"KINEMATICS_BOTH":         4,
	}
)

func (x EmcKinematicsType) Enum() *EmcKinematicsType {
	p := new(EmcKinematicsType)
	*p = x
	return p
}

func (x EmcKinematicsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcKinematicsType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[3].Descriptor()
}

func (EmcKinematicsType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[3]
}

func (x EmcKinematicsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcKinematicsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcKinematicsType(num)
	return nil
}

// Deprecated: Use EmcKinematicsType.Descriptor instead.
func (EmcKinematicsType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{3}
}

//*
// Types for trajectory motion control.
type EmcTrajectoryModeType int32

const (
	EmcTrajectoryModeType_EMC_TRAJ_MODE_FREE   EmcTrajectoryModeType = 1 /// Independent axis motion.
	EmcTrajectoryModeType_EMC_TRAJ_MODE_COORD  EmcTrajectoryModeType = 2 /// Coordinated axis motion.
	EmcTrajectoryModeType_EMC_TRAJ_MODE_TELEOP EmcTrajectoryModeType = 3 /// Velocity based world coordinates motion.
)

// Enum value maps for EmcTrajectoryModeType.
var (
	EmcTrajectoryModeType_name = map[int32]string{
		1: "EMC_TRAJ_MODE_FREE",
		2: "EMC_TRAJ_MODE_COORD",
		3: "EMC_TRAJ_MODE_TELEOP",
	}
	EmcTrajectoryModeType_value = map[string]int32{
		"EMC_TRAJ_MODE_FREE":   1,
		"EMC_TRAJ_MODE_COORD":  2,
		"EMC_TRAJ_MODE_TELEOP": 3,
	}
)

func (x EmcTrajectoryModeType) Enum() *EmcTrajectoryModeType {
	p := new(EmcTrajectoryModeType)
	*p = x
	return p
}

func (x EmcTrajectoryModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcTrajectoryModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[4].Descriptor()
}

func (EmcTrajectoryModeType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[4]
}

func (x EmcTrajectoryModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcTrajectoryModeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcTrajectoryModeType(num)
	return nil
}

// Deprecated: Use EmcTrajectoryModeType.Descriptor instead.
func (EmcTrajectoryModeType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{4}
}

//*
// Types for EMC Canon units.
type EmcCanonUnitsType int32

const (
	EmcCanonUnitsType_CANON_UNITS_INCH EmcCanonUnitsType = 1 /// Inches.
	EmcCanonUnitsType_CANON_UNITS_MM   EmcCanonUnitsType = 2 /// Millimeters.
	EmcCanonUnitsType_CANON_UNITS_CM   EmcCanonUnitsType = 3 /// Centimeters.
)

// Enum value maps for EmcCanonUnitsType.
var (
	EmcCanonUnitsType_name = map[int32]string{
		1: "CANON_UNITS_INCH",
		2: "CANON_UNITS_MM",
		3: "CANON_UNITS_CM",
	}
	EmcCanonUnitsType_value = map[string]int32{
		"CANON_UNITS_INCH": 1,
		"CANON_UNITS_MM":   2,
		"CANON_UNITS_CM":   3,
	}
)

func (x EmcCanonUnitsType) Enum() *EmcCanonUnitsType {
	p := new(EmcCanonUnitsType)
	*p = x
	return p
}

func (x EmcCanonUnitsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcCanonUnitsType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[5].Descriptor()
}

func (EmcCanonUnitsType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[5]
}

func (x EmcCanonUnitsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcCanonUnitsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcCanonUnitsType(num)
	return nil
}

// Deprecated: Use EmcCanonUnitsType.Descriptor instead.
func (EmcCanonUnitsType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{5}
}

//*
// Types for EMC linear units.
type EmcLinearUnitsType int32

const (
	EmcLinearUnitsType_LINEAR_UNITS_INCH EmcLinearUnitsType = 1 /// Inches.
	EmcLinearUnitsType_LINEAR_UNITS_MM   EmcLinearUnitsType = 2 /// Millimeters.
	EmcLinearUnitsType_LINEAR_UNITS_CM   EmcLinearUnitsType = 3 /// Centimeters.
)

// Enum value maps for EmcLinearUnitsType.
var (
	EmcLinearUnitsType_name = map[int32]string{
		1: "LINEAR_UNITS_INCH",
		2: "LINEAR_UNITS_MM",
		3: "LINEAR_UNITS_CM",
	}
	EmcLinearUnitsType_value = map[string]int32{
		"LINEAR_UNITS_INCH": 1,
		"LINEAR_UNITS_MM":   2,
		"LINEAR_UNITS_CM":   3,
	}
)

func (x EmcLinearUnitsType) Enum() *EmcLinearUnitsType {
	p := new(EmcLinearUnitsType)
	*p = x
	return p
}

func (x EmcLinearUnitsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcLinearUnitsType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[6].Descriptor()
}

func (EmcLinearUnitsType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[6]
}

func (x EmcLinearUnitsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcLinearUnitsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcLinearUnitsType(num)
	return nil
}

// Deprecated: Use EmcLinearUnitsType.Descriptor instead.
func (EmcLinearUnitsType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{6}
}

//*
// Types for EMC angular units.
type EmcAngularUnitsType int32

const (
	EmcAngularUnitsType_ANGULAR_UNITS_DEGREES EmcAngularUnitsType = 1 /// Degrees.
	EmcAngularUnitsType_ANGULAR_UNITS_RADIAN  EmcAngularUnitsType = 2 /// Radian.
	EmcAngularUnitsType_ANGULAR_UNITS_GRAD    EmcAngularUnitsType = 3 /// Grad.
)

// Enum value maps for EmcAngularUnitsType.
var (
	EmcAngularUnitsType_name = map[int32]string{
		1: "ANGULAR_UNITS_DEGREES",
		2: "ANGULAR_UNITS_RADIAN",
		3: "ANGULAR_UNITS_GRAD",
	}
	EmcAngularUnitsType_value = map[string]int32{
		"ANGULAR_UNITS_DEGREES": 1,
		"ANGULAR_UNITS_RADIAN":  2,
		"ANGULAR_UNITS_GRAD":    3,
	}
)

func (x EmcAngularUnitsType) Enum() *EmcAngularUnitsType {
	p := new(EmcAngularUnitsType)
	*p = x
	return p
}

func (x EmcAngularUnitsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcAngularUnitsType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[7].Descriptor()
}

func (EmcAngularUnitsType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[7]
}

func (x EmcAngularUnitsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcAngularUnitsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcAngularUnitsType(num)
	return nil
}

// Deprecated: Use EmcAngularUnitsType.Descriptor instead.
func (EmcAngularUnitsType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{7}
}

//*
// Types for EMC time units.
type EmcTimeUnitsType int32

const (
	EmcTimeUnitsType_TIME_UNITS_MINUTE EmcTimeUnitsType = 1 /// Minutes.
	EmcTimeUnitsType_TIME_UNITS_SECOND EmcTimeUnitsType = 2 /// Seconds.
)

// Enum value maps for EmcTimeUnitsType.
var (
	EmcTimeUnitsType_name = map[int32]string{
		1: "TIME_UNITS_MINUTE",
		2: "TIME_UNITS_SECOND",
	}
	EmcTimeUnitsType_value = map[string]int32{
		"TIME_UNITS_MINUTE": 1,
		"TIME_UNITS_SECOND": 2,
	}
)

func (x EmcTimeUnitsType) Enum() *EmcTimeUnitsType {
	p := new(EmcTimeUnitsType)
	*p = x
	return p
}

func (x EmcTimeUnitsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcTimeUnitsType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[8].Descriptor()
}

func (EmcTimeUnitsType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[8]
}

func (x EmcTimeUnitsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcTimeUnitsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcTimeUnitsType(num)
	return nil
}

// Deprecated: Use EmcTimeUnitsType.Descriptor instead.
func (EmcTimeUnitsType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{8}
}

//*
// Types for EMC task modes.
type EmcTaskModeType int32

const (
	EmcTaskModeType_EMC_TASK_MODE_MANUAL EmcTaskModeType = 1 /// Manual task mode. For example jogging.
	EmcTaskModeType_EMC_TASK_MODE_AUTO   EmcTaskModeType = 2 /// Automatic task mode. For example program execution.
	EmcTaskModeType_EMC_TASK_MODE_MDI    EmcTaskModeType = 3 /// MDI task mode. MDI commands only.
)

// Enum value maps for EmcTaskModeType.
var (
	EmcTaskModeType_name = map[int32]string{
		1: "EMC_TASK_MODE_MANUAL",
		2: "EMC_TASK_MODE_AUTO",
		3: "EMC_TASK_MODE_MDI",
	}
	EmcTaskModeType_value = map[string]int32{
		"EMC_TASK_MODE_MANUAL": 1,
		"EMC_TASK_MODE_AUTO":   2,
		"EMC_TASK_MODE_MDI":    3,
	}
)

func (x EmcTaskModeType) Enum() *EmcTaskModeType {
	p := new(EmcTaskModeType)
	*p = x
	return p
}

func (x EmcTaskModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcTaskModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[9].Descriptor()
}

func (EmcTaskModeType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[9]
}

func (x EmcTaskModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcTaskModeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcTaskModeType(num)
	return nil
}

// Deprecated: Use EmcTaskModeType.Descriptor instead.
func (EmcTaskModeType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{9}
}

//*
// Types for EMC task state.
type EmcTaskStateType int32

const (
	EmcTaskStateType_EMC_TASK_STATE_ESTOP       EmcTaskStateType = 1 /// Task is in ESTOP.
	EmcTaskStateType_EMC_TASK_STATE_ESTOP_RESET EmcTaskStateType = 2 /// Task is trying to reset an ESTOP.
	EmcTaskStateType_EMC_TASK_STATE_OFF         EmcTaskStateType = 3 /// Task is turned off (no ESTOP)
	EmcTaskStateType_EMC_TASK_STATE_ON          EmcTaskStateType = 4 /// Task is turned on.
)

// Enum value maps for EmcTaskStateType.
var (
	EmcTaskStateType_name = map[int32]string{
		1: "EMC_TASK_STATE_ESTOP",
		2: "EMC_TASK_STATE_ESTOP_RESET",
		3: "EMC_TASK_STATE_OFF",
		4: "EMC_TASK_STATE_ON",
	}
	EmcTaskStateType_value = map[string]int32{
		"EMC_TASK_STATE_ESTOP":       1,
		"EMC_TASK_STATE_ESTOP_RESET": 2,
		"EMC_TASK_STATE_OFF":         3,
		"EMC_TASK_STATE_ON":          4,
	}
)

func (x EmcTaskStateType) Enum() *EmcTaskStateType {
	p := new(EmcTaskStateType)
	*p = x
	return p
}

func (x EmcTaskStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcTaskStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[10].Descriptor()
}

func (EmcTaskStateType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[10]
}

func (x EmcTaskStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcTaskStateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcTaskStateType(num)
	return nil
}

// Deprecated: Use EmcTaskStateType.Descriptor instead.
func (EmcTaskStateType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{10}
}

//*
// Axis types.
type EmcAxisType int32

const (
	EmcAxisType_EMC_AXIS_LINEAR  EmcAxisType = 1 /// Axis is using linear units.
	EmcAxisType_EMC_AXIS_ANGULAR EmcAxisType = 2 /// Axis is using angular units.
)

// Enum value maps for EmcAxisType.
var (
	EmcAxisType_name = map[int32]string{
		1: "EMC_AXIS_LINEAR",
		2: "EMC_AXIS_ANGULAR",
	}
	EmcAxisType_value = map[string]int32{
		"EMC_AXIS_LINEAR":  1,
		"EMC_AXIS_ANGULAR": 2,
	}
)

func (x EmcAxisType) Enum() *EmcAxisType {
	p := new(EmcAxisType)
	*p = x
	return p
}

func (x EmcAxisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcAxisType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[11].Descriptor()
}

func (EmcAxisType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[11]
}

func (x EmcAxisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcAxisType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcAxisType(num)
	return nil
}

// Deprecated: Use EmcAxisType.Descriptor instead.
func (EmcAxisType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{11}
}

//*
// Position offset types.
type EmcPositionOffsetType int32

const (
	EmcPositionOffsetType_EMC_CONFIG_RELATIVE_OFFSET EmcPositionOffsetType = 1 /// Offset in relative coordinates.
	EmcPositionOffsetType_EMC_CONFIG_MACHINE_OFFSET  EmcPositionOffsetType = 2 /// Offset in machine coordinates.
)

// Enum value maps for EmcPositionOffsetType.
var (
	EmcPositionOffsetType_name = map[int32]string{
		1: "EMC_CONFIG_RELATIVE_OFFSET",
		2: "EMC_CONFIG_MACHINE_OFFSET",
	}
	EmcPositionOffsetType_value = map[string]int32{
		"EMC_CONFIG_RELATIVE_OFFSET": 1,
		"EMC_CONFIG_MACHINE_OFFSET":  2,
	}
)

func (x EmcPositionOffsetType) Enum() *EmcPositionOffsetType {
	p := new(EmcPositionOffsetType)
	*p = x
	return p
}

func (x EmcPositionOffsetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcPositionOffsetType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[12].Descriptor()
}

func (EmcPositionOffsetType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[12]
}

func (x EmcPositionOffsetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcPositionOffsetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcPositionOffsetType(num)
	return nil
}

// Deprecated: Use EmcPositionOffsetType.Descriptor instead.
func (EmcPositionOffsetType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{12}
}

//*
// Position feedback types.
type EmcPositionFeedbackType int32

const (
	EmcPositionFeedbackType_EMC_CONFIG_ACTUAL_FEEDBACK    EmcPositionFeedbackType = 1 /// Feed back current position.
	EmcPositionFeedbackType_EMC_CONFIG_COMMANDED_FEEDBACK EmcPositionFeedbackType = 2 /// Feed back commanded position.
)

// Enum value maps for EmcPositionFeedbackType.
var (
	EmcPositionFeedbackType_name = map[int32]string{
		1: "EMC_CONFIG_ACTUAL_FEEDBACK",
		2: "EMC_CONFIG_COMMANDED_FEEDBACK",
	}
	EmcPositionFeedbackType_value = map[string]int32{
		"EMC_CONFIG_ACTUAL_FEEDBACK":    1,
		"EMC_CONFIG_COMMANDED_FEEDBACK": 2,
	}
)

func (x EmcPositionFeedbackType) Enum() *EmcPositionFeedbackType {
	p := new(EmcPositionFeedbackType)
	*p = x
	return p
}

func (x EmcPositionFeedbackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmcPositionFeedbackType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_status_proto_enumTypes[13].Descriptor()
}

func (EmcPositionFeedbackType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_status_proto_enumTypes[13]
}

func (x EmcPositionFeedbackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EmcPositionFeedbackType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EmcPositionFeedbackType(num)
	return nil
}

// Deprecated: Use EmcPositionFeedbackType.Descriptor instead.
func (EmcPositionFeedbackType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{13}
}

//*
// Tool table data.
type EmcToolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"` /// Tool table index (not tool id).
	Id    *int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`       /// ID/number of the tool.
	//optional double         xOffset     = 3; offsets replaced by Position message
	//optional double         yOffset     = 4;
	//optional double         zOffset     = 5;
	//optional double         aOffset     = 6;
	//optional double         bOffset     = 7;
	//optional double         cOffset     = 8;
	//optional double         uOffset     = 9;
	//optional double         vOffset     = 10;
	//optional double         wOffset     = 11;
	Diameter    *float64  `protobuf:"fixed64,12,opt,name=diameter" json:"diameter,omitempty"`      /// Diameter of the tool.
	Frontangle  *float64  `protobuf:"fixed64,13,opt,name=frontangle" json:"frontangle,omitempty"`  /// Front angle of the tool (only on lathe).
	Backangle   *float64  `protobuf:"fixed64,14,opt,name=backangle" json:"backangle,omitempty"`    /// Back angle of the tool (only on lathe).
	Orientation *int32    `protobuf:"varint,15,opt,name=orientation" json:"orientation,omitempty"` /// Orientation of the tool (lathe only, 0-9).
	Offset      *Position `protobuf:"bytes,16,opt,name=offset" json:"offset,omitempty"`            /// Position offset of the tool.
	Comment     *string   `protobuf:"bytes,17,opt,name=comment" json:"comment,omitempty"`          /// User comment.
	Pocket      *int32    `protobuf:"varint,18,opt,name=pocket" json:"pocket,omitempty"`           /// Tool pocket position.
}

func (x *EmcToolData) Reset() {
	*x = EmcToolData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcToolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcToolData) ProtoMessage() {}

func (x *EmcToolData) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcToolData.ProtoReflect.Descriptor instead.
func (*EmcToolData) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{0}
}

func (x *EmcToolData) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcToolData) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EmcToolData) GetDiameter() float64 {
	if x != nil && x.Diameter != nil {
		return *x.Diameter
	}
	return 0
}

func (x *EmcToolData) GetFrontangle() float64 {
	if x != nil && x.Frontangle != nil {
		return *x.Frontangle
	}
	return 0
}

func (x *EmcToolData) GetBackangle() float64 {
	if x != nil && x.Backangle != nil {
		return *x.Backangle
	}
	return 0
}

func (x *EmcToolData) GetOrientation() int32 {
	if x != nil && x.Orientation != nil {
		return *x.Orientation
	}
	return 0
}

func (x *EmcToolData) GetOffset() *Position {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *EmcToolData) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *EmcToolData) GetPocket() int32 {
	if x != nil && x.Pocket != nil {
		return *x.Pocket
	}
	return 0
}

//*
// Stores per axis information from motion.
type EmcStatusMotionAxis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          *int32   `protobuf:"varint,1,req,name=index" json:"index,omitempty"`                                          /// Axis index.
	Enabled        *bool    `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`                                      /// Axis is enabled.
	Fault          *bool    `protobuf:"varint,3,opt,name=fault" json:"fault,omitempty"`                                          /// Axis amp fault.
	FerrorCurrent  *float64 `protobuf:"fixed64,4,opt,name=ferror_current,json=ferrorCurrent" json:"ferror_current,omitempty"`    /// Current following error.
	FerrorHighmark *float64 `protobuf:"fixed64,5,opt,name=ferror_highmark,json=ferrorHighmark" json:"ferror_highmark,omitempty"` /// Magnitude of maximum following error.
	Homed          *bool    `protobuf:"varint,6,opt,name=homed" json:"homed,omitempty"`                                          /// Axis has been homed.
	Homing         *bool    `protobuf:"varint,7,opt,name=homing" json:"homing,omitempty"`                                        /// Homing currently progress.
	Inpos          *bool    `protobuf:"varint,8,opt,name=inpos" json:"inpos,omitempty"`                                          /// Axis is in position.
	Input          *float64 `protobuf:"fixed64,9,opt,name=input" json:"input,omitempty"`                                         /// Current input position.
	MaxHardLimit   *bool    `protobuf:"varint,10,opt,name=max_hard_limit,json=maxHardLimit" json:"max_hard_limit,omitempty"`     /// Maximum hard limit exceeded.
	MaxSoftLimit   *bool    `protobuf:"varint,11,opt,name=max_soft_limit,json=maxSoftLimit" json:"max_soft_limit,omitempty"`     /// Maximum position limit was exceeded.
	MinHardLimit   *bool    `protobuf:"varint,12,opt,name=min_hard_limit,json=minHardLimit" json:"min_hard_limit,omitempty"`     /// Minimum hard limit was exceeded.
	MinSoftLimit   *bool    `protobuf:"varint,13,opt,name=min_soft_limit,json=minSoftLimit" json:"min_soft_limit,omitempty"`     /// Minimum position limit was exceeded.
	Output         *float64 `protobuf:"fixed64,14,opt,name=output" json:"output,omitempty"`                                      /// Commanded output position.
	OverrideLimits *bool    `protobuf:"varint,15,opt,name=override_limits,json=overrideLimits" json:"override_limits,omitempty"` /// Limits are overridden.
	Velocity       *float64 `protobuf:"fixed64,16,opt,name=velocity" json:"velocity,omitempty"`                                  /// Current velocity.
}

func (x *EmcStatusMotionAxis) Reset() {
	*x = EmcStatusMotionAxis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusMotionAxis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusMotionAxis) ProtoMessage() {}

func (x *EmcStatusMotionAxis) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusMotionAxis.ProtoReflect.Descriptor instead.
func (*EmcStatusMotionAxis) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{1}
}

func (x *EmcStatusMotionAxis) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusMotionAxis) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *EmcStatusMotionAxis) GetFault() bool {
	if x != nil && x.Fault != nil {
		return *x.Fault
	}
	return false
}

func (x *EmcStatusMotionAxis) GetFerrorCurrent() float64 {
	if x != nil && x.FerrorCurrent != nil {
		return *x.FerrorCurrent
	}
	return 0
}

func (x *EmcStatusMotionAxis) GetFerrorHighmark() float64 {
	if x != nil && x.FerrorHighmark != nil {
		return *x.FerrorHighmark
	}
	return 0
}

func (x *EmcStatusMotionAxis) GetHomed() bool {
	if x != nil && x.Homed != nil {
		return *x.Homed
	}
	return false
}

func (x *EmcStatusMotionAxis) GetHoming() bool {
	if x != nil && x.Homing != nil {
		return *x.Homing
	}
	return false
}

func (x *EmcStatusMotionAxis) GetInpos() bool {
	if x != nil && x.Inpos != nil {
		return *x.Inpos
	}
	return false
}

func (x *EmcStatusMotionAxis) GetInput() float64 {
	if x != nil && x.Input != nil {
		return *x.Input
	}
	return 0
}

func (x *EmcStatusMotionAxis) GetMaxHardLimit() bool {
	if x != nil && x.MaxHardLimit != nil {
		return *x.MaxHardLimit
	}
	return false
}

func (x *EmcStatusMotionAxis) GetMaxSoftLimit() bool {
	if x != nil && x.MaxSoftLimit != nil {
		return *x.MaxSoftLimit
	}
	return false
}

func (x *EmcStatusMotionAxis) GetMinHardLimit() bool {
	if x != nil && x.MinHardLimit != nil {
		return *x.MinHardLimit
	}
	return false
}

func (x *EmcStatusMotionAxis) GetMinSoftLimit() bool {
	if x != nil && x.MinSoftLimit != nil {
		return *x.MinSoftLimit
	}
	return false
}

func (x *EmcStatusMotionAxis) GetOutput() float64 {
	if x != nil && x.Output != nil {
		return *x.Output
	}
	return 0
}

func (x *EmcStatusMotionAxis) GetOverrideLimits() bool {
	if x != nil && x.OverrideLimits != nil {
		return *x.OverrideLimits
	}
	return false
}

func (x *EmcStatusMotionAxis) GetVelocity() float64 {
	if x != nil && x.Velocity != nil {
		return *x.Velocity
	}
	return 0
}

//*
// Stores per axis information from configuration.
type EmcStatusConfigAxis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index            *int32       `protobuf:"varint,1,req,name=index" json:"index,omitempty"`                                                    /// Axis index.
	AxisType         *EmcAxisType `protobuf:"varint,2,opt,name=axis_type,json=axisType,enum=machinetalk.EmcAxisType" json:"axis_type,omitempty"` /// Type of axis. Reflects [AXIS_N]TYPE
	Backlash         *float64     `protobuf:"fixed64,3,opt,name=backlash" json:"backlash,omitempty"`                                             /// Axis backlash. Reflects [AXIS_N]BACKLASH
	MaxFerror        *float64     `protobuf:"fixed64,4,opt,name=max_ferror,json=maxFerror" json:"max_ferror,omitempty"`                          /// Maximum following error. Reflects [AXIS_N]FERROR
	MaxPositionLimit *float64     `protobuf:"fixed64,5,opt,name=max_position_limit,json=maxPositionLimit" json:"max_position_limit,omitempty"`   /// Maximum position limit. Reflects [AXIS_N]MAX_LIMIT
	MinFerror        *float64     `protobuf:"fixed64,6,opt,name=min_ferror,json=minFerror" json:"min_ferror,omitempty"`                          /// Minimum following error. Reflects [AXIS_N]MIN_FERROR
	MinPositionLimit *float64     `protobuf:"fixed64,7,opt,name=min_position_limit,json=minPositionLimit" json:"min_position_limit,omitempty"`   /// Minimum position limit. Reflects [AXIS_N]MIN_LIMIT
	//optional double         units               = 8;  // Units per mm. field removed
	HomeSequence    *int32   `protobuf:"varint,9,opt,name=home_sequence,json=homeSequence" json:"home_sequence,omitempty"`            /// Homing sequence index. Reflects [AXIS_N]HOME_SEQUENCE
	MaxAcceleration *float64 `protobuf:"fixed64,10,opt,name=max_acceleration,json=maxAcceleration" json:"max_acceleration,omitempty"` /// Maximum acceleration. Reflects [AXIS_N]MAX_ACCELERATION
	MaxVelocity     *float64 `protobuf:"fixed64,11,opt,name=max_velocity,json=maxVelocity" json:"max_velocity,omitempty"`             /// Maximum velocity. Reflects [AXIS_N]MAX_VELOCITY
	Increments      *string  `protobuf:"bytes,12,opt,name=increments" json:"increments,omitempty"`                                    /// Axis increments space separated.Reflects [AXIS_N]INCREMENTS or [DISPLAY]INCREMENTS
}

func (x *EmcStatusConfigAxis) Reset() {
	*x = EmcStatusConfigAxis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusConfigAxis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusConfigAxis) ProtoMessage() {}

func (x *EmcStatusConfigAxis) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusConfigAxis.ProtoReflect.Descriptor instead.
func (*EmcStatusConfigAxis) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{2}
}

func (x *EmcStatusConfigAxis) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetAxisType() EmcAxisType {
	if x != nil && x.AxisType != nil {
		return *x.AxisType
	}
	return EmcAxisType_EMC_AXIS_LINEAR
}

func (x *EmcStatusConfigAxis) GetBacklash() float64 {
	if x != nil && x.Backlash != nil {
		return *x.Backlash
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetMaxFerror() float64 {
	if x != nil && x.MaxFerror != nil {
		return *x.MaxFerror
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetMaxPositionLimit() float64 {
	if x != nil && x.MaxPositionLimit != nil {
		return *x.MaxPositionLimit
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetMinFerror() float64 {
	if x != nil && x.MinFerror != nil {
		return *x.MinFerror
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetMinPositionLimit() float64 {
	if x != nil && x.MinPositionLimit != nil {
		return *x.MinPositionLimit
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetHomeSequence() int32 {
	if x != nil && x.HomeSequence != nil {
		return *x.HomeSequence
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetMaxAcceleration() float64 {
	if x != nil && x.MaxAcceleration != nil {
		return *x.MaxAcceleration
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetMaxVelocity() float64 {
	if x != nil && x.MaxVelocity != nil {
		return *x.MaxVelocity
	}
	return 0
}

func (x *EmcStatusConfigAxis) GetIncrements() string {
	if x != nil && x.Increments != nil {
		return *x.Increments
	}
	return ""
}

//*
// Program extension message.
type EmcProgramExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     *int32  `protobuf:"varint,1,req,name=index" json:"index,omitempty"`        /// Index of the program extension.
	Extension *string `protobuf:"bytes,2,opt,name=extension" json:"extension,omitempty"` /// Supported program extension. E.g. .gcode GCode program
}

func (x *EmcProgramExtension) Reset() {
	*x = EmcProgramExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcProgramExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcProgramExtension) ProtoMessage() {}

func (x *EmcProgramExtension) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcProgramExtension.ProtoReflect.Descriptor instead.
func (*EmcProgramExtension) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{3}
}

func (x *EmcProgramExtension) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcProgramExtension) GetExtension() string {
	if x != nil && x.Extension != nil {
		return *x.Extension
	}
	return ""
}

//*
// Analog IO pin message.
type EmcStatusAnalogIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32   `protobuf:"varint,1,req,name=index" json:"index,omitempty"`  /// Index of analog IO pin.
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"` /// Current value of analog IO pin.
}

func (x *EmcStatusAnalogIO) Reset() {
	*x = EmcStatusAnalogIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusAnalogIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusAnalogIO) ProtoMessage() {}

func (x *EmcStatusAnalogIO) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusAnalogIO.ProtoReflect.Descriptor instead.
func (*EmcStatusAnalogIO) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{4}
}

func (x *EmcStatusAnalogIO) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusAnalogIO) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

//*
// Digital IO pin message.
type EmcStatusDigitalIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"` /// Index of digital IO pin.
	Value *bool  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"` /// Current value of digital IO pin.
}

func (x *EmcStatusDigitalIO) Reset() {
	*x = EmcStatusDigitalIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusDigitalIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusDigitalIO) ProtoMessage() {}

func (x *EmcStatusDigitalIO) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusDigitalIO.ProtoReflect.Descriptor instead.
func (*EmcStatusDigitalIO) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{5}
}

func (x *EmcStatusDigitalIO) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusDigitalIO) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

//*
// Limit mask message.
type EmcStatusLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"` /// Axis index.
	Value *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"` /// Axis limit mask. minHardLimit=1, maxHardLimit=2, minSoftLimit=4, maxSoftLimit=8
}

func (x *EmcStatusLimit) Reset() {
	*x = EmcStatusLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusLimit) ProtoMessage() {}

func (x *EmcStatusLimit) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusLimit.ProtoReflect.Descriptor instead.
func (*EmcStatusLimit) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{6}
}

func (x *EmcStatusLimit) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusLimit) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

//*
// Currently active GCodes message.
type EmcStatusGCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"` /// Index of the GCode.
	Value *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"` /// GCode value. E.g. 210 for G21
}

func (x *EmcStatusGCode) Reset() {
	*x = EmcStatusGCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusGCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusGCode) ProtoMessage() {}

func (x *EmcStatusGCode) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusGCode.ProtoReflect.Descriptor instead.
func (*EmcStatusGCode) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{7}
}

func (x *EmcStatusGCode) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusGCode) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

//*
// Currently active MCodes message.
type EmcStatusMCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"` /// Index of MCode.
	Value *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"` /// MCode value. E.g. 100 for M100
}

func (x *EmcStatusMCode) Reset() {
	*x = EmcStatusMCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusMCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusMCode) ProtoMessage() {}

func (x *EmcStatusMCode) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusMCode.ProtoReflect.Descriptor instead.
func (*EmcStatusMCode) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{8}
}

func (x *EmcStatusMCode) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusMCode) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

//*
// Interpreter setting message.
type EmcStatusSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32   `protobuf:"varint,1,req,name=index" json:"index,omitempty"`  /// Index of interpreter setting.
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"` /// Interpreter settings value.
}

func (x *EmcStatusSetting) Reset() {
	*x = EmcStatusSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusSetting) ProtoMessage() {}

func (x *EmcStatusSetting) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusSetting.ProtoReflect.Descriptor instead.
func (*EmcStatusSetting) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{9}
}

func (x *EmcStatusSetting) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusSetting) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

//*
// EMC status configuration message.
type EmcStatusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAcceleration *float64 `protobuf:"fixed64,1,opt,name=default_acceleration,json=defaultAcceleration" json:"default_acceleration,omitempty"` /// Default acceleration. Reflects parameter [TRAJ]DEFAULT_ACCELERATION.
	//optional double                     angular_units            = 2;  // Angular units scale. Reflects [TRAJ]ANGULAR_UNITS field removed
	Axes           *int32                 `protobuf:"varint,3,opt,name=axes" json:"axes,omitempty"`                                                                              /// Number of axes. Reflects [TRAJ]AXES
	Axis           []*EmcStatusConfigAxis `protobuf:"bytes,4,rep,name=axis" json:"axis,omitempty"`                                                                               /// Per axis configuration values.
	AxisMask       *int32                 `protobuf:"varint,5,opt,name=axis_mask,json=axisMask" json:"axis_mask,omitempty"`                                                      /// Mask of axes. Reflects [TRAJ]COORDINATES and returns the sum of the axes X=1, Y=2, Z=4, A=8, B=16, C=32, U=64, V=128, W=256.
	CycleTime      *float64               `protobuf:"fixed64,6,opt,name=cycle_time,json=cycleTime" json:"cycle_time,omitempty"`                                                  /// Polling cycle time. Reflects [TRAJ]CYCLE_TIME
	Debug          *int32                 `protobuf:"varint,7,opt,name=debug" json:"debug,omitempty"`                                                                            /// Debug flag.
	KinematicsType *EmcKinematicsType     `protobuf:"varint,8,opt,name=kinematics_type,json=kinematicsType,enum=machinetalk.EmcKinematicsType" json:"kinematics_type,omitempty"` /// Kinematics type.
	//optional double                     linear_units             = 9;  // Linear units scale. Reflects [TRAJ]LINEAR_UNITS field removed
	MaxAcceleration        *float64                 `protobuf:"fixed64,10,opt,name=max_acceleration,json=maxAcceleration" json:"max_acceleration,omitempty"`                                            /// Maximum acceleration. Reflects [TRAJ]MAX_ACCELERATION
	MaxVelocity            *float64                 `protobuf:"fixed64,11,opt,name=max_velocity,json=maxVelocity" json:"max_velocity,omitempty"`                                                        /// Maximum velocity. Reflects [TRAJ]MAX_VELOCITY
	LinearUnits            *EmcLinearUnitsType      `protobuf:"varint,12,opt,name=linear_units,json=linearUnits,enum=machinetalk.EmcLinearUnitsType" json:"linear_units,omitempty"`                     /// Linear machine units. Reflects [TRAJ]LINEAR_UNITS
	DefaultVelocity        *float64                 `protobuf:"fixed64,13,opt,name=default_velocity,json=defaultVelocity" json:"default_velocity,omitempty"`                                            /// Default velocity. Reflects [TRAJ]DEFAULT_VELOCITY
	ProgramExtension       []*EmcProgramExtension   `protobuf:"bytes,14,rep,name=program_extension,json=programExtension" json:"program_extension,omitempty"`                                           /// List if program supported program extensions.
	PositionOffset         *EmcPositionOffsetType   `protobuf:"varint,15,opt,name=position_offset,json=positionOffset,enum=machinetalk.EmcPositionOffsetType" json:"position_offset,omitempty"`         /// Position offset type. Reflects [DISPLAY]POSITION_OFFSET
	PositionFeedback       *EmcPositionFeedbackType `protobuf:"varint,16,opt,name=position_feedback,json=positionFeedback,enum=machinetalk.EmcPositionFeedbackType" json:"position_feedback,omitempty"` /// Position feedback type. Reflects [DISPLAY]POSITION_FEEDBACK
	MaxFeedOverride        *float64                 `protobuf:"fixed64,17,opt,name=max_feed_override,json=maxFeedOverride" json:"max_feed_override,omitempty"`                                          /// Maximum feed override. Reflects [DISPLAY]MAX_FEED_OVERRIDE
	MinFeedOverride        *float64                 `protobuf:"fixed64,18,opt,name=min_feed_override,json=minFeedOverride" json:"min_feed_override,omitempty"`                                          /// Minimum feed override. Reflects [DISPLAY]MIN_FEED_OVERRIDE
	MaxSpindleOverride     *float64                 `protobuf:"fixed64,19,opt,name=max_spindle_override,json=maxSpindleOverride" json:"max_spindle_override,omitempty"`                                 /// Maximum spindle speed override. Reflects [DISPLAY]MAX_SPINDLE_OVERRIDE
	MinSpindleOverride     *float64                 `protobuf:"fixed64,20,opt,name=min_spindle_override,json=minSpindleOverride" json:"min_spindle_override,omitempty"`                                 /// Minimum spindle override. Reflects [DISPLAY]MIN_SPINDLE_OVERRIDE
	DefaultSpindleSpeed    *float64                 `protobuf:"fixed64,21,opt,name=default_spindle_speed,json=defaultSpindleSpeed" json:"default_spindle_speed,omitempty"`                              /// Default spindle speed. Reflects [DISPLAY]DEFAULT_SPINDLE_SPEED
	DefaultLinearVelocity  *float64                 `protobuf:"fixed64,22,opt,name=default_linear_velocity,json=defaultLinearVelocity" json:"default_linear_velocity,omitempty"`                        /// Default linear velocity. Reflects [DISPLAY]DEFAULT_LINEAR_VELOCITY
	MinVelocity            *float64                 `protobuf:"fixed64,23,opt,name=min_velocity,json=minVelocity" json:"min_velocity,omitempty"`                                                        /// Minimum velocity override. Reflects [DISPLAY]MIN_VELOCITY
	MaxLinearVelocity      *float64                 `protobuf:"fixed64,24,opt,name=max_linear_velocity,json=maxLinearVelocity" json:"max_linear_velocity,omitempty"`                                    /// Maximum linear velocity. Reflects [DISPLAY]MAX_LINEAR_VELOCITY
	MinLinearVelocity      *float64                 `protobuf:"fixed64,25,opt,name=min_linear_velocity,json=minLinearVelocity" json:"min_linear_velocity,omitempty"`                                    /// Minimum linear velocity. Reflects [DISPLAY]MIN_LINEAR_VELOCITY
	DefaultAngularVelocity *float64                 `protobuf:"fixed64,26,opt,name=default_angular_velocity,json=defaultAngularVelocity" json:"default_angular_velocity,omitempty"`                     /// Default angular velocity. Reflects [DISPLAY]DEFAULT_ANGULAR_VELOCITY
	MaxAngularVelocity     *float64                 `protobuf:"fixed64,27,opt,name=max_angular_velocity,json=maxAngularVelocity" json:"max_angular_velocity,omitempty"`                                 /// Maximum angular velocity. Reflects [DISPLAY]MAX_ANGULAR_VELOCITY
	MinAngularVelocity     *float64                 `protobuf:"fixed64,28,opt,name=min_angular_velocity,json=minAngularVelocity" json:"min_angular_velocity,omitempty"`                                 /// Minimum angular velocity. Reflects [DISPLAY]MIN_ANGULAR_VELOCITY
	Increments             *string                  `protobuf:"bytes,29,opt,name=increments" json:"increments,omitempty"`                                                                               /// White space separated jog increments. Reflects [DISPLAY]INCREMENTS
	Grids                  *string                  `protobuf:"bytes,30,opt,name=grids" json:"grids,omitempty"`                                                                                         /// Grid intervals. Reflects [DISPLAY]GRIDS
	Lathe                  *bool                    `protobuf:"varint,31,opt,name=lathe" json:"lathe,omitempty"`                                                                                        /// Is machine a lathe. Reflects [DISPLAY]LATHE
	Geometry               *string                  `protobuf:"bytes,32,opt,name=geometry" json:"geometry,omitempty"`                                                                                   /// Geometry of machine. E.g. XYZ. Reflects [DISPLAY]GEOMETRY
	Arcdivision            *uint32                  `protobuf:"varint,33,opt,name=arcdivision" json:"arcdivision,omitempty"`                                                                            /// Display granularity for arcs. Reflects [DISPLAY]ARCDIVISION
	NoForceHoming          *bool                    `protobuf:"varint,34,opt,name=no_force_homing,json=noForceHoming" json:"no_force_homing,omitempty"`                                                 /// Do not enforce homing. Reflects [DISPLAY]NO_FORCE_HOMING
	RemotePath             *string                  `protobuf:"bytes,35,opt,name=remote_path,json=remotePath" json:"remote_path,omitempty"`                                                             /// Remote file path. Reflects [DISPLAY]PROGRAM_PREFIX
	TimeUnits              *EmcTimeUnitsType        `protobuf:"varint,36,opt,name=time_units,json=timeUnits,enum=machinetalk.EmcTimeUnitsType" json:"time_units,omitempty"`                             /// Time units type. Reflects [DISPLAY]TIME_UNITS
	Name                   *string                  `protobuf:"bytes,37,opt,name=name" json:"name,omitempty"`                                                                                           /// Machine name. Reflects [EMC]MACHINE
	UserCommand            []*EmcStatusUserCommand  `protobuf:"bytes,38,rep,name=user_command,json=userCommand" json:"user_command,omitempty"`                                                          /// List of user commands. Reflects [DISPLAY]USER_COMMAND
	AngularUnits           *EmcAngularUnitsType     `protobuf:"varint,39,opt,name=angular_units,json=angularUnits,enum=machinetalk.EmcAngularUnitsType" json:"angular_units,omitempty"`                 /// Angular machine units. Reflects [TRAJ]ANGULAR_UNITS
}

func (x *EmcStatusConfig) Reset() {
	*x = EmcStatusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusConfig) ProtoMessage() {}

func (x *EmcStatusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusConfig.ProtoReflect.Descriptor instead.
func (*EmcStatusConfig) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{10}
}

func (x *EmcStatusConfig) GetDefaultAcceleration() float64 {
	if x != nil && x.DefaultAcceleration != nil {
		return *x.DefaultAcceleration
	}
	return 0
}

func (x *EmcStatusConfig) GetAxes() int32 {
	if x != nil && x.Axes != nil {
		return *x.Axes
	}
	return 0
}

func (x *EmcStatusConfig) GetAxis() []*EmcStatusConfigAxis {
	if x != nil {
		return x.Axis
	}
	return nil
}

func (x *EmcStatusConfig) GetAxisMask() int32 {
	if x != nil && x.AxisMask != nil {
		return *x.AxisMask
	}
	return 0
}

func (x *EmcStatusConfig) GetCycleTime() float64 {
	if x != nil && x.CycleTime != nil {
		return *x.CycleTime
	}
	return 0
}

func (x *EmcStatusConfig) GetDebug() int32 {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return 0
}

func (x *EmcStatusConfig) GetKinematicsType() EmcKinematicsType {
	if x != nil && x.KinematicsType != nil {
		return *x.KinematicsType
	}
	return EmcKinematicsType_KINEMATICS_IDENTITY
}

func (x *EmcStatusConfig) GetMaxAcceleration() float64 {
	if x != nil && x.MaxAcceleration != nil {
		return *x.MaxAcceleration
	}
	return 0
}

func (x *EmcStatusConfig) GetMaxVelocity() float64 {
	if x != nil && x.MaxVelocity != nil {
		return *x.MaxVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetLinearUnits() EmcLinearUnitsType {
	if x != nil && x.LinearUnits != nil {
		return *x.LinearUnits
	}
	return EmcLinearUnitsType_LINEAR_UNITS_INCH
}

func (x *EmcStatusConfig) GetDefaultVelocity() float64 {
	if x != nil && x.DefaultVelocity != nil {
		return *x.DefaultVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetProgramExtension() []*EmcProgramExtension {
	if x != nil {
		return x.ProgramExtension
	}
	return nil
}

func (x *EmcStatusConfig) GetPositionOffset() EmcPositionOffsetType {
	if x != nil && x.PositionOffset != nil {
		return *x.PositionOffset
	}
	return EmcPositionOffsetType_EMC_CONFIG_RELATIVE_OFFSET
}

func (x *EmcStatusConfig) GetPositionFeedback() EmcPositionFeedbackType {
	if x != nil && x.PositionFeedback != nil {
		return *x.PositionFeedback
	}
	return EmcPositionFeedbackType_EMC_CONFIG_ACTUAL_FEEDBACK
}

func (x *EmcStatusConfig) GetMaxFeedOverride() float64 {
	if x != nil && x.MaxFeedOverride != nil {
		return *x.MaxFeedOverride
	}
	return 0
}

func (x *EmcStatusConfig) GetMinFeedOverride() float64 {
	if x != nil && x.MinFeedOverride != nil {
		return *x.MinFeedOverride
	}
	return 0
}

func (x *EmcStatusConfig) GetMaxSpindleOverride() float64 {
	if x != nil && x.MaxSpindleOverride != nil {
		return *x.MaxSpindleOverride
	}
	return 0
}

func (x *EmcStatusConfig) GetMinSpindleOverride() float64 {
	if x != nil && x.MinSpindleOverride != nil {
		return *x.MinSpindleOverride
	}
	return 0
}

func (x *EmcStatusConfig) GetDefaultSpindleSpeed() float64 {
	if x != nil && x.DefaultSpindleSpeed != nil {
		return *x.DefaultSpindleSpeed
	}
	return 0
}

func (x *EmcStatusConfig) GetDefaultLinearVelocity() float64 {
	if x != nil && x.DefaultLinearVelocity != nil {
		return *x.DefaultLinearVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetMinVelocity() float64 {
	if x != nil && x.MinVelocity != nil {
		return *x.MinVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetMaxLinearVelocity() float64 {
	if x != nil && x.MaxLinearVelocity != nil {
		return *x.MaxLinearVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetMinLinearVelocity() float64 {
	if x != nil && x.MinLinearVelocity != nil {
		return *x.MinLinearVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetDefaultAngularVelocity() float64 {
	if x != nil && x.DefaultAngularVelocity != nil {
		return *x.DefaultAngularVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetMaxAngularVelocity() float64 {
	if x != nil && x.MaxAngularVelocity != nil {
		return *x.MaxAngularVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetMinAngularVelocity() float64 {
	if x != nil && x.MinAngularVelocity != nil {
		return *x.MinAngularVelocity
	}
	return 0
}

func (x *EmcStatusConfig) GetIncrements() string {
	if x != nil && x.Increments != nil {
		return *x.Increments
	}
	return ""
}

func (x *EmcStatusConfig) GetGrids() string {
	if x != nil && x.Grids != nil {
		return *x.Grids
	}
	return ""
}

func (x *EmcStatusConfig) GetLathe() bool {
	if x != nil && x.Lathe != nil {
		return *x.Lathe
	}
	return false
}

func (x *EmcStatusConfig) GetGeometry() string {
	if x != nil && x.Geometry != nil {
		return *x.Geometry
	}
	return ""
}

func (x *EmcStatusConfig) GetArcdivision() uint32 {
	if x != nil && x.Arcdivision != nil {
		return *x.Arcdivision
	}
	return 0
}

func (x *EmcStatusConfig) GetNoForceHoming() bool {
	if x != nil && x.NoForceHoming != nil {
		return *x.NoForceHoming
	}
	return false
}

func (x *EmcStatusConfig) GetRemotePath() string {
	if x != nil && x.RemotePath != nil {
		return *x.RemotePath
	}
	return ""
}

func (x *EmcStatusConfig) GetTimeUnits() EmcTimeUnitsType {
	if x != nil && x.TimeUnits != nil {
		return *x.TimeUnits
	}
	return EmcTimeUnitsType_TIME_UNITS_MINUTE
}

func (x *EmcStatusConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EmcStatusConfig) GetUserCommand() []*EmcStatusUserCommand {
	if x != nil {
		return x.UserCommand
	}
	return nil
}

func (x *EmcStatusConfig) GetAngularUnits() EmcAngularUnitsType {
	if x != nil && x.AngularUnits != nil {
		return *x.AngularUnits
	}
	return EmcAngularUnitsType_ANGULAR_UNITS_DEGREES
}

//*
// EMC status motion message.
type EmcStatusMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveQueue            *int32                 `protobuf:"varint,1,opt,name=active_queue,json=activeQueue" json:"active_queue,omitempty"`                                      /// Number of motions blending.
	ActualPosition         *Position              `protobuf:"bytes,2,opt,name=actual_position,json=actualPosition" json:"actual_position,omitempty"`                              /// Current trajectory position.
	AdaptiveFeedEnabled    *bool                  `protobuf:"varint,3,opt,name=adaptive_feed_enabled,json=adaptiveFeedEnabled" json:"adaptive_feed_enabled,omitempty"`            /// Status of adaptive feed override.
	Ain                    []*EmcStatusAnalogIO   `protobuf:"bytes,4,rep,name=ain" json:"ain,omitempty"`                                                                          /// Status of analog input pins.
	Aout                   []*EmcStatusAnalogIO   `protobuf:"bytes,5,rep,name=aout" json:"aout,omitempty"`                                                                        /// Status of analog output pins.
	Axis                   []*EmcStatusMotionAxis `protobuf:"bytes,6,rep,name=axis" json:"axis,omitempty"`                                                                        /// Per axis motion values.
	BlockDelete            *bool                  `protobuf:"varint,7,opt,name=block_delete,json=blockDelete" json:"block_delete,omitempty"`                                      /// Block delete on or off.
	CurrentLine            *int32                 `protobuf:"varint,8,opt,name=current_line,json=currentLine" json:"current_line,omitempty"`                                      /// Currently executing line.
	CurrentVel             *float64               `protobuf:"fixed64,9,opt,name=current_vel,json=currentVel" json:"current_vel,omitempty"`                                        /// Current velocity in Cartesian space.
	DelayLeft              *float64               `protobuf:"fixed64,10,opt,name=delay_left,json=delayLeft" json:"delay_left,omitempty"`                                          /// Remaining time on dwell (G4) command.
	Din                    []*EmcStatusDigitalIO  `protobuf:"bytes,11,rep,name=din" json:"din,omitempty"`                                                                         /// Status of digital input pins.
	DistanceToGo           *float64               `protobuf:"fixed64,12,opt,name=distance_to_go,json=distanceToGo" json:"distance_to_go,omitempty"`                               /// Remaining distance of current move reported by trajectory planner.
	Dout                   []*EmcStatusDigitalIO  `protobuf:"bytes,13,rep,name=dout" json:"dout,omitempty"`                                                                       /// Status of digital output pins.
	Dtg                    *Position              `protobuf:"bytes,14,opt,name=dtg" json:"dtg,omitempty"`                                                                         /// Remaining distance of current move reported by trajectory planner.
	Enabled                *bool                  `protobuf:"varint,15,opt,name=enabled" json:"enabled,omitempty"`                                                                /// Trajectory planner enabled flag.
	FeedHoldEnabled        *bool                  `protobuf:"varint,16,opt,name=feed_hold_enabled,json=feedHoldEnabled" json:"feed_hold_enabled,omitempty"`                       /// Enable flag for feed hold.
	FeedOverrideEnabled    *bool                  `protobuf:"varint,17,opt,name=feed_override_enabled,json=feedOverrideEnabled" json:"feed_override_enabled,omitempty"`           /// Enable flag for feed override.
	Feedrate               *float64               `protobuf:"fixed64,18,opt,name=feedrate" json:"feedrate,omitempty"`                                                             /// Current feedrate override.
	G5XIndex               *OriginIndex           `protobuf:"varint,19,opt,name=g5x_index,json=g5xIndex,enum=machinetalk.OriginIndex" json:"g5x_index,omitempty"`                 /// Currently active coordinate system.
	G5XOffset              *Position              `protobuf:"bytes,20,opt,name=g5x_offset,json=g5xOffset" json:"g5x_offset,omitempty"`                                            /// Offset of the currently active coordinate system.
	G92Offset              *Position              `protobuf:"bytes,21,opt,name=g92_offset,json=g92Offset" json:"g92_offset,omitempty"`                                            /// Current G92 offset.
	Id                     *int32                 `protobuf:"varint,23,opt,name=id" json:"id,omitempty"`                                                                          /// Currently executing motion id.
	Inpos                  *bool                  `protobuf:"varint,24,opt,name=inpos" json:"inpos,omitempty"`                                                                    /// Machine in position flag.
	JointActualPosition    *Position              `protobuf:"bytes,25,opt,name=joint_actual_position,json=jointActualPosition" json:"joint_actual_position,omitempty"`            /// Actual joint position.
	JointPosition          *Position              `protobuf:"bytes,26,opt,name=joint_position,json=jointPosition" json:"joint_position,omitempty"`                                /// Desired joint position.
	Limit                  []*EmcStatusLimit      `protobuf:"bytes,27,rep,name=limit" json:"limit,omitempty"`                                                                     /// Axis limit masks.
	MotionLine             *int32                 `protobuf:"varint,28,opt,name=motion_line,json=motionLine" json:"motion_line,omitempty"`                                        /// Source line number motion is currently executing. Relation to id is unclear.
	MotionType             *MotionType            `protobuf:"varint,29,opt,name=motion_type,json=motionType,enum=machinetalk.MotionType" json:"motion_type,omitempty"`            /// Trajectory planner mode.
	MotionMode             *EmcTrajectoryModeType `protobuf:"varint,30,opt,name=motion_mode,json=motionMode,enum=machinetalk.EmcTrajectoryModeType" json:"motion_mode,omitempty"` /// Trajectory mode.
	Paused                 *bool                  `protobuf:"varint,31,opt,name=paused" json:"paused,omitempty"`                                                                  /// Motion paused flag.
	Position               *Position              `protobuf:"bytes,32,opt,name=position" json:"position,omitempty"`                                                               /// Trajectory position.
	ProbeTripped           *bool                  `protobuf:"varint,33,opt,name=probe_tripped,json=probeTripped" json:"probe_tripped,omitempty"`                                  /// True if probe has tripped.
	ProbeVal               *int32                 `protobuf:"varint,34,opt,name=probe_val,json=probeVal" json:"probe_val,omitempty"`                                              /// Reflects the value of the motion.probe-input pin
	ProbedPosition         *Position              `protobuf:"bytes,35,opt,name=probed_position,json=probedPosition" json:"probed_position,omitempty"`                             /// Position where probe has tripped
	Probing                *bool                  `protobuf:"varint,36,opt,name=probing" json:"probing,omitempty"`                                                                /// Probe operation in progress.
	Queue                  *int32                 `protobuf:"varint,37,opt,name=queue" json:"queue,omitempty"`                                                                    /// Current size of trajectory planner queue.
	QueueFull              *bool                  `protobuf:"varint,38,opt,name=queue_full,json=queueFull" json:"queue_full,omitempty"`                                           /// Trajectory planner queue is full.
	RotationXy             *float64               `protobuf:"fixed64,39,opt,name=rotation_xy,json=rotationXy" json:"rotation_xy,omitempty"`                                       /// Current XY rotation around Z axis.
	SpindleBrake           *bool                  `protobuf:"varint,40,opt,name=spindle_brake,json=spindleBrake" json:"spindle_brake,omitempty"`                                  /// Spindle braked.
	SpindleDirection       *int32                 `protobuf:"varint,41,opt,name=spindle_direction,json=spindleDirection" json:"spindle_direction,omitempty"`                      /// Rotational direction of the spindle. forward=1, reverse=-1.
	SpindleEnabled         *bool                  `protobuf:"varint,42,opt,name=spindle_enabled,json=spindleEnabled" json:"spindle_enabled,omitempty"`                            /// Spindle enabled.
	SpindleIncreasing      *int32                 `protobuf:"varint,43,opt,name=spindle_increasing,json=spindleIncreasing" json:"spindle_increasing,omitempty"`                   /// Spindle speed is increasing.
	SpindleOverrideEnabled *bool                  `protobuf:"varint,44,opt,name=spindle_override_enabled,json=spindleOverrideEnabled" json:"spindle_override_enabled,omitempty"`  /// Spindle override is enabled.
	SpindleSpeed           *float64               `protobuf:"fixed64,45,opt,name=spindle_speed,json=spindleSpeed" json:"spindle_speed,omitempty"`                                 /// Spindle speed value in rpm. > 0 is clockwise, < 0 is counterclockwise
	Spindlerate            *float64               `protobuf:"fixed64,46,opt,name=spindlerate" json:"spindlerate,omitempty"`                                                       /// Spindle speed override.
	State                  *RCS_STATUS            `protobuf:"varint,47,opt,name=state,enum=machinetalk.RCS_STATUS" json:"state,omitempty"`                                        /// Current command execution status.
	MaxVelocity            *float64               `protobuf:"fixed64,48,opt,name=max_velocity,json=maxVelocity" json:"max_velocity,omitempty"`                                    /// Maximum velocity override.
	MaxAcceleration        *float64               `protobuf:"fixed64,49,opt,name=max_acceleration,json=maxAcceleration" json:"max_acceleration,omitempty"`                        /// TODO remove
	Rapidrate              *float64               `protobuf:"fixed64,50,opt,name=rapidrate" json:"rapidrate,omitempty"`                                                           /// Current rapid override.
}

func (x *EmcStatusMotion) Reset() {
	*x = EmcStatusMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusMotion) ProtoMessage() {}

func (x *EmcStatusMotion) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusMotion.ProtoReflect.Descriptor instead.
func (*EmcStatusMotion) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{11}
}

func (x *EmcStatusMotion) GetActiveQueue() int32 {
	if x != nil && x.ActiveQueue != nil {
		return *x.ActiveQueue
	}
	return 0
}

func (x *EmcStatusMotion) GetActualPosition() *Position {
	if x != nil {
		return x.ActualPosition
	}
	return nil
}

func (x *EmcStatusMotion) GetAdaptiveFeedEnabled() bool {
	if x != nil && x.AdaptiveFeedEnabled != nil {
		return *x.AdaptiveFeedEnabled
	}
	return false
}

func (x *EmcStatusMotion) GetAin() []*EmcStatusAnalogIO {
	if x != nil {
		return x.Ain
	}
	return nil
}

func (x *EmcStatusMotion) GetAout() []*EmcStatusAnalogIO {
	if x != nil {
		return x.Aout
	}
	return nil
}

func (x *EmcStatusMotion) GetAxis() []*EmcStatusMotionAxis {
	if x != nil {
		return x.Axis
	}
	return nil
}

func (x *EmcStatusMotion) GetBlockDelete() bool {
	if x != nil && x.BlockDelete != nil {
		return *x.BlockDelete
	}
	return false
}

func (x *EmcStatusMotion) GetCurrentLine() int32 {
	if x != nil && x.CurrentLine != nil {
		return *x.CurrentLine
	}
	return 0
}

func (x *EmcStatusMotion) GetCurrentVel() float64 {
	if x != nil && x.CurrentVel != nil {
		return *x.CurrentVel
	}
	return 0
}

func (x *EmcStatusMotion) GetDelayLeft() float64 {
	if x != nil && x.DelayLeft != nil {
		return *x.DelayLeft
	}
	return 0
}

func (x *EmcStatusMotion) GetDin() []*EmcStatusDigitalIO {
	if x != nil {
		return x.Din
	}
	return nil
}

func (x *EmcStatusMotion) GetDistanceToGo() float64 {
	if x != nil && x.DistanceToGo != nil {
		return *x.DistanceToGo
	}
	return 0
}

func (x *EmcStatusMotion) GetDout() []*EmcStatusDigitalIO {
	if x != nil {
		return x.Dout
	}
	return nil
}

func (x *EmcStatusMotion) GetDtg() *Position {
	if x != nil {
		return x.Dtg
	}
	return nil
}

func (x *EmcStatusMotion) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *EmcStatusMotion) GetFeedHoldEnabled() bool {
	if x != nil && x.FeedHoldEnabled != nil {
		return *x.FeedHoldEnabled
	}
	return false
}

func (x *EmcStatusMotion) GetFeedOverrideEnabled() bool {
	if x != nil && x.FeedOverrideEnabled != nil {
		return *x.FeedOverrideEnabled
	}
	return false
}

func (x *EmcStatusMotion) GetFeedrate() float64 {
	if x != nil && x.Feedrate != nil {
		return *x.Feedrate
	}
	return 0
}

func (x *EmcStatusMotion) GetG5XIndex() OriginIndex {
	if x != nil && x.G5XIndex != nil {
		return *x.G5XIndex
	}
	return OriginIndex_ORIGIN_UNKNOWN
}

func (x *EmcStatusMotion) GetG5XOffset() *Position {
	if x != nil {
		return x.G5XOffset
	}
	return nil
}

func (x *EmcStatusMotion) GetG92Offset() *Position {
	if x != nil {
		return x.G92Offset
	}
	return nil
}

func (x *EmcStatusMotion) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EmcStatusMotion) GetInpos() bool {
	if x != nil && x.Inpos != nil {
		return *x.Inpos
	}
	return false
}

func (x *EmcStatusMotion) GetJointActualPosition() *Position {
	if x != nil {
		return x.JointActualPosition
	}
	return nil
}

func (x *EmcStatusMotion) GetJointPosition() *Position {
	if x != nil {
		return x.JointPosition
	}
	return nil
}

func (x *EmcStatusMotion) GetLimit() []*EmcStatusLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *EmcStatusMotion) GetMotionLine() int32 {
	if x != nil && x.MotionLine != nil {
		return *x.MotionLine
	}
	return 0
}

func (x *EmcStatusMotion) GetMotionType() MotionType {
	if x != nil && x.MotionType != nil {
		return *x.MotionType
	}
	return MotionType__EMC_MOTION_TYPE_NONE
}

func (x *EmcStatusMotion) GetMotionMode() EmcTrajectoryModeType {
	if x != nil && x.MotionMode != nil {
		return *x.MotionMode
	}
	return EmcTrajectoryModeType_EMC_TRAJ_MODE_FREE
}

func (x *EmcStatusMotion) GetPaused() bool {
	if x != nil && x.Paused != nil {
		return *x.Paused
	}
	return false
}

func (x *EmcStatusMotion) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *EmcStatusMotion) GetProbeTripped() bool {
	if x != nil && x.ProbeTripped != nil {
		return *x.ProbeTripped
	}
	return false
}

func (x *EmcStatusMotion) GetProbeVal() int32 {
	if x != nil && x.ProbeVal != nil {
		return *x.ProbeVal
	}
	return 0
}

func (x *EmcStatusMotion) GetProbedPosition() *Position {
	if x != nil {
		return x.ProbedPosition
	}
	return nil
}

func (x *EmcStatusMotion) GetProbing() bool {
	if x != nil && x.Probing != nil {
		return *x.Probing
	}
	return false
}

func (x *EmcStatusMotion) GetQueue() int32 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *EmcStatusMotion) GetQueueFull() bool {
	if x != nil && x.QueueFull != nil {
		return *x.QueueFull
	}
	return false
}

func (x *EmcStatusMotion) GetRotationXy() float64 {
	if x != nil && x.RotationXy != nil {
		return *x.RotationXy
	}
	return 0
}

func (x *EmcStatusMotion) GetSpindleBrake() bool {
	if x != nil && x.SpindleBrake != nil {
		return *x.SpindleBrake
	}
	return false
}

func (x *EmcStatusMotion) GetSpindleDirection() int32 {
	if x != nil && x.SpindleDirection != nil {
		return *x.SpindleDirection
	}
	return 0
}

func (x *EmcStatusMotion) GetSpindleEnabled() bool {
	if x != nil && x.SpindleEnabled != nil {
		return *x.SpindleEnabled
	}
	return false
}

func (x *EmcStatusMotion) GetSpindleIncreasing() int32 {
	if x != nil && x.SpindleIncreasing != nil {
		return *x.SpindleIncreasing
	}
	return 0
}

func (x *EmcStatusMotion) GetSpindleOverrideEnabled() bool {
	if x != nil && x.SpindleOverrideEnabled != nil {
		return *x.SpindleOverrideEnabled
	}
	return false
}

func (x *EmcStatusMotion) GetSpindleSpeed() float64 {
	if x != nil && x.SpindleSpeed != nil {
		return *x.SpindleSpeed
	}
	return 0
}

func (x *EmcStatusMotion) GetSpindlerate() float64 {
	if x != nil && x.Spindlerate != nil {
		return *x.Spindlerate
	}
	return 0
}

func (x *EmcStatusMotion) GetState() RCS_STATUS {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RCS_STATUS_UNINITIALIZED_STATUS
}

func (x *EmcStatusMotion) GetMaxVelocity() float64 {
	if x != nil && x.MaxVelocity != nil {
		return *x.MaxVelocity
	}
	return 0
}

func (x *EmcStatusMotion) GetMaxAcceleration() float64 {
	if x != nil && x.MaxAcceleration != nil {
		return *x.MaxAcceleration
	}
	return 0
}

func (x *EmcStatusMotion) GetRapidrate() float64 {
	if x != nil && x.Rapidrate != nil {
		return *x.Rapidrate
	}
	return 0
}

//*
// EMC IO message.
type EmcStatusIo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estop     *bool `protobuf:"varint,1,opt,name=estop" json:"estop,omitempty"`                          /// Estop active.
	Flood     *bool `protobuf:"varint,2,opt,name=flood" json:"flood,omitempty"`                          /// Flood enabled.
	Lube      *bool `protobuf:"varint,3,opt,name=lube" json:"lube,omitempty"`                            /// Lube enabled.
	LubeLevel *bool `protobuf:"varint,4,opt,name=lube_level,json=lubeLevel" json:"lube_level,omitempty"` /// Lube level. Reflects iocontrol.0.lube_level
	Mist      *bool `protobuf:"varint,5,opt,name=mist" json:"mist,omitempty"`                            /// Mist enabled.
	//optional bool           pocket_prepped  = 6;  /// replaced with field 10
	//optional bool           tool_in_spindle = 7;  /// replaced with field 11
	ToolOffset    *Position      `protobuf:"bytes,8,opt,name=tool_offset,json=toolOffset" json:"tool_offset,omitempty"`              /// Offset values of the current tool.
	ToolTable     []*EmcToolData `protobuf:"bytes,9,rep,name=tool_table,json=toolTable" json:"tool_table,omitempty"`                 /// List of tool entries.
	PocketPrepped *int32         `protobuf:"varint,10,opt,name=pocket_prepped,json=pocketPrepped" json:"pocket_prepped,omitempty"`   /// A Tx command completed and this pocket is prepared
	ToolInSpindle *int32         `protobuf:"varint,11,opt,name=tool_in_spindle,json=toolInSpindle" json:"tool_in_spindle,omitempty"` /// Current tool number.
}

func (x *EmcStatusIo) Reset() {
	*x = EmcStatusIo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusIo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusIo) ProtoMessage() {}

func (x *EmcStatusIo) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusIo.ProtoReflect.Descriptor instead.
func (*EmcStatusIo) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{12}
}

func (x *EmcStatusIo) GetEstop() bool {
	if x != nil && x.Estop != nil {
		return *x.Estop
	}
	return false
}

func (x *EmcStatusIo) GetFlood() bool {
	if x != nil && x.Flood != nil {
		return *x.Flood
	}
	return false
}

func (x *EmcStatusIo) GetLube() bool {
	if x != nil && x.Lube != nil {
		return *x.Lube
	}
	return false
}

func (x *EmcStatusIo) GetLubeLevel() bool {
	if x != nil && x.LubeLevel != nil {
		return *x.LubeLevel
	}
	return false
}

func (x *EmcStatusIo) GetMist() bool {
	if x != nil && x.Mist != nil {
		return *x.Mist
	}
	return false
}

func (x *EmcStatusIo) GetToolOffset() *Position {
	if x != nil {
		return x.ToolOffset
	}
	return nil
}

func (x *EmcStatusIo) GetToolTable() []*EmcToolData {
	if x != nil {
		return x.ToolTable
	}
	return nil
}

func (x *EmcStatusIo) GetPocketPrepped() int32 {
	if x != nil && x.PocketPrepped != nil {
		return *x.PocketPrepped
	}
	return 0
}

func (x *EmcStatusIo) GetToolInSpindle() int32 {
	if x != nil && x.ToolInSpindle != nil {
		return *x.ToolInSpindle
	}
	return 0
}

//*
// EMC status task message.
type EmcStatusTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The serial number of the last executed command set by a UI to task.
	// All commands carry a serial number. Once the command has been executed,
	// its serial number is reflected in echo_serial_number.
	EchoSerialNumber *int32                `protobuf:"varint,1,opt,name=echo_serial_number,json=echoSerialNumber" json:"echo_serial_number,omitempty"`
	ExecState        *EmcTaskExecStateType `protobuf:"varint,2,opt,name=exec_state,json=execState,enum=machinetalk.EmcTaskExecStateType" json:"exec_state,omitempty"` /// Task execution state.
	File             *string               `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`                                                                   /// Currently executing gcode file.
	InputTimeout     *bool                 `protobuf:"varint,4,opt,name=input_timeout,json=inputTimeout" json:"input_timeout,omitempty"`                              /// Flag for M66 timer in progress.
	OptionalStop     *bool                 `protobuf:"varint,5,opt,name=optional_stop,json=optionalStop" json:"optional_stop,omitempty"`                              /// Optional stop enabled.
	ReadLine         *int32                `protobuf:"varint,6,opt,name=read_line,json=readLine" json:"read_line,omitempty"`                                          /// Line the RS274NGC interpreter is currently reading. TODO move to interp
	TaskMode         *EmcTaskModeType      `protobuf:"varint,7,opt,name=task_mode,json=taskMode,enum=machinetalk.EmcTaskModeType" json:"task_mode,omitempty"`         /// Current task mode.
	TaskPaused       *int32                `protobuf:"varint,8,opt,name=task_paused,json=taskPaused" json:"task_paused,omitempty"`                                    /// Task paused.
	TaskState        *EmcTaskStateType     `protobuf:"varint,9,opt,name=task_state,json=taskState,enum=machinetalk.EmcTaskStateType" json:"task_state,omitempty"`     /// Current task state.
	TotalLines       *int32                `protobuf:"varint,10,opt,name=total_lines,json=totalLines" json:"total_lines,omitempty"`                                   /// Total number of lines of currently active program file.
}

func (x *EmcStatusTask) Reset() {
	*x = EmcStatusTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusTask) ProtoMessage() {}

func (x *EmcStatusTask) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusTask.ProtoReflect.Descriptor instead.
func (*EmcStatusTask) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{13}
}

func (x *EmcStatusTask) GetEchoSerialNumber() int32 {
	if x != nil && x.EchoSerialNumber != nil {
		return *x.EchoSerialNumber
	}
	return 0
}

func (x *EmcStatusTask) GetExecState() EmcTaskExecStateType {
	if x != nil && x.ExecState != nil {
		return *x.ExecState
	}
	return EmcTaskExecStateType_EMC_TASK_EXEC_ERROR
}

func (x *EmcStatusTask) GetFile() string {
	if x != nil && x.File != nil {
		return *x.File
	}
	return ""
}

func (x *EmcStatusTask) GetInputTimeout() bool {
	if x != nil && x.InputTimeout != nil {
		return *x.InputTimeout
	}
	return false
}

func (x *EmcStatusTask) GetOptionalStop() bool {
	if x != nil && x.OptionalStop != nil {
		return *x.OptionalStop
	}
	return false
}

func (x *EmcStatusTask) GetReadLine() int32 {
	if x != nil && x.ReadLine != nil {
		return *x.ReadLine
	}
	return 0
}

func (x *EmcStatusTask) GetTaskMode() EmcTaskModeType {
	if x != nil && x.TaskMode != nil {
		return *x.TaskMode
	}
	return EmcTaskModeType_EMC_TASK_MODE_MANUAL
}

func (x *EmcStatusTask) GetTaskPaused() int32 {
	if x != nil && x.TaskPaused != nil {
		return *x.TaskPaused
	}
	return 0
}

func (x *EmcStatusTask) GetTaskState() EmcTaskStateType {
	if x != nil && x.TaskState != nil {
		return *x.TaskState
	}
	return EmcTaskStateType_EMC_TASK_STATE_ESTOP
}

func (x *EmcStatusTask) GetTotalLines() int32 {
	if x != nil && x.TotalLines != nil {
		return *x.TotalLines
	}
	return 0
}

//*
// EMC status interpreter message.
type EmcStatusInterp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command            *string                `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`                                                                                         /// Currently executing command.
	Gcodes             []*EmcStatusGCode      `protobuf:"bytes,2,rep,name=gcodes" json:"gcodes,omitempty"`                                                                                           /// Currently active GCodes.
	InterpState        *EmcInterpStateType    `protobuf:"varint,3,opt,name=interp_state,json=interpState,enum=machinetalk.EmcInterpStateType" json:"interp_state,omitempty"`                         /// Current state of RS274NGC interpreter.
	InterpreterErrcode *EmcInterpExitCodeType `protobuf:"varint,4,opt,name=interpreter_errcode,json=interpreterErrcode,enum=machinetalk.EmcInterpExitCodeType" json:"interpreter_errcode,omitempty"` /// Current RS274NGC interpreter return code.
	Mcodes             []*EmcStatusMCode      `protobuf:"bytes,5,rep,name=mcodes" json:"mcodes,omitempty"`                                                                                           /// Currently active MCodes.
	Settings           []*EmcStatusSetting    `protobuf:"bytes,6,rep,name=settings" json:"settings,omitempty"`                                                                                       /// Current interpreter settings. [0] = sequence number, [1] = feed rate, [2] = velocity
	ProgramUnits       *EmcCanonUnitsType     `protobuf:"varint,7,opt,name=program_units,json=programUnits,enum=machinetalk.EmcCanonUnitsType" json:"program_units,omitempty"`                       /// Current interpreter program units.
}

func (x *EmcStatusInterp) Reset() {
	*x = EmcStatusInterp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusInterp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusInterp) ProtoMessage() {}

func (x *EmcStatusInterp) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusInterp.ProtoReflect.Descriptor instead.
func (*EmcStatusInterp) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{14}
}

func (x *EmcStatusInterp) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *EmcStatusInterp) GetGcodes() []*EmcStatusGCode {
	if x != nil {
		return x.Gcodes
	}
	return nil
}

func (x *EmcStatusInterp) GetInterpState() EmcInterpStateType {
	if x != nil && x.InterpState != nil {
		return *x.InterpState
	}
	return EmcInterpStateType_EMC_TASK_INTERP_IDLE
}

func (x *EmcStatusInterp) GetInterpreterErrcode() EmcInterpExitCodeType {
	if x != nil && x.InterpreterErrcode != nil {
		return *x.InterpreterErrcode
	}
	return EmcInterpExitCodeType_EMC_INTERP_EXIT_OK
}

func (x *EmcStatusInterp) GetMcodes() []*EmcStatusMCode {
	if x != nil {
		return x.Mcodes
	}
	return nil
}

func (x *EmcStatusInterp) GetSettings() []*EmcStatusSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *EmcStatusInterp) GetProgramUnits() EmcCanonUnitsType {
	if x != nil && x.ProgramUnits != nil {
		return *x.ProgramUnits
	}
	return EmcCanonUnitsType_CANON_UNITS_INCH
}

//*
// EMC command parameters.
type EmcCommandParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      *uint32                `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`                                                                /// General purpose index.
	DebugLevel *uint32                `protobuf:"varint,2,opt,name=debug_level,json=debugLevel" json:"debug_level,omitempty"`                                    /// Debug level.
	LineNumber *int32                 `protobuf:"varint,3,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`                                    /// General purpose line number.
	Scale      *float64               `protobuf:"fixed64,4,opt,name=scale" json:"scale,omitempty"`                                                               /// General purpose scale value.
	Velocity   *float64               `protobuf:"fixed64,5,opt,name=velocity" json:"velocity,omitempty"`                                                         /// General purpose velocity value.
	Distance   *float64               `protobuf:"fixed64,6,opt,name=distance" json:"distance,omitempty"`                                                         /// General purpose distance value.
	Value      *float64               `protobuf:"fixed64,7,opt,name=value" json:"value,omitempty"`                                                               /// General purpose value.
	Enable     *bool                  `protobuf:"varint,8,opt,name=enable" json:"enable,omitempty"`                                                              /// General purpose enable value.
	Command    *string                `protobuf:"bytes,9,opt,name=command" json:"command,omitempty"`                                                             /// General purpose command string.
	Path       *string                `protobuf:"bytes,10,opt,name=path" json:"path,omitempty"`                                                                  /// General purpose path string.
	TaskMode   *EmcTaskModeType       `protobuf:"varint,100,opt,name=task_mode,json=taskMode,enum=machinetalk.EmcTaskModeType" json:"task_mode,omitempty"`       /// Task mode.
	TaskState  *EmcTaskStateType      `protobuf:"varint,101,opt,name=task_state,json=taskState,enum=machinetalk.EmcTaskStateType" json:"task_state,omitempty"`   /// Task state.
	TrajMode   *EmcTrajectoryModeType `protobuf:"varint,102,opt,name=traj_mode,json=trajMode,enum=machinetalk.EmcTrajectoryModeType" json:"traj_mode,omitempty"` /// Trajectory mode.
	Pose       *EmcPose               `protobuf:"bytes,103,opt,name=pose" json:"pose,omitempty"`                                                                 /// General purpose pose.
	ToolData   *EmcToolData           `protobuf:"bytes,104,opt,name=tool_data,json=toolData" json:"tool_data,omitempty"`                                         /// Tool data.
	ToolTable  []*EmcToolData         `protobuf:"bytes,105,rep,name=tool_table,json=toolTable" json:"tool_table,omitempty"`                                      /// Complete tool table.
}

func (x *EmcCommandParameters) Reset() {
	*x = EmcCommandParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcCommandParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcCommandParameters) ProtoMessage() {}

func (x *EmcCommandParameters) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcCommandParameters.ProtoReflect.Descriptor instead.
func (*EmcCommandParameters) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{15}
}

func (x *EmcCommandParameters) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcCommandParameters) GetDebugLevel() uint32 {
	if x != nil && x.DebugLevel != nil {
		return *x.DebugLevel
	}
	return 0
}

func (x *EmcCommandParameters) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *EmcCommandParameters) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *EmcCommandParameters) GetVelocity() float64 {
	if x != nil && x.Velocity != nil {
		return *x.Velocity
	}
	return 0
}

func (x *EmcCommandParameters) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *EmcCommandParameters) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *EmcCommandParameters) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *EmcCommandParameters) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *EmcCommandParameters) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *EmcCommandParameters) GetTaskMode() EmcTaskModeType {
	if x != nil && x.TaskMode != nil {
		return *x.TaskMode
	}
	return EmcTaskModeType_EMC_TASK_MODE_MANUAL
}

func (x *EmcCommandParameters) GetTaskState() EmcTaskStateType {
	if x != nil && x.TaskState != nil {
		return *x.TaskState
	}
	return EmcTaskStateType_EMC_TASK_STATE_ESTOP
}

func (x *EmcCommandParameters) GetTrajMode() EmcTrajectoryModeType {
	if x != nil && x.TrajMode != nil {
		return *x.TrajMode
	}
	return EmcTrajectoryModeType_EMC_TRAJ_MODE_FREE
}

func (x *EmcCommandParameters) GetPose() *EmcPose {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *EmcCommandParameters) GetToolData() *EmcToolData {
	if x != nil {
		return x.ToolData
	}
	return nil
}

func (x *EmcCommandParameters) GetToolTable() []*EmcToolData {
	if x != nil {
		return x.ToolTable
	}
	return nil
}

//*
// User command message.
type EmcStatusUserCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   *int32  `protobuf:"varint,1,req,name=index" json:"index,omitempty"`    /// User command index.
	Command *string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"` /// User command separated by semicolon. E.g. G1A20;G1A0 Remove Filament.
}

func (x *EmcStatusUserCommand) Reset() {
	*x = EmcStatusUserCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusUserCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusUserCommand) ProtoMessage() {}

func (x *EmcStatusUserCommand) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusUserCommand.ProtoReflect.Descriptor instead.
func (*EmcStatusUserCommand) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{16}
}

func (x *EmcStatusUserCommand) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *EmcStatusUserCommand) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

//*
// EMC status user interface message.
type EmcStatusUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpindleBrakeVisible    *bool `protobuf:"varint,1,opt,name=spindle_brake_visible,json=spindleBrakeVisible" json:"spindle_brake_visible,omitempty"`          /// Spindle brake control visible
	SpindleCwVisible       *bool `protobuf:"varint,2,opt,name=spindle_cw_visible,json=spindleCwVisible" json:"spindle_cw_visible,omitempty"`                   /// Spindle CW control visible
	SpindleCcwVisible      *bool `protobuf:"varint,3,opt,name=spindle_ccw_visible,json=spindleCcwVisible" json:"spindle_ccw_visible,omitempty"`                /// Spindle CCW control visible
	SpindleStopVisible     *bool `protobuf:"varint,4,opt,name=spindle_stop_visible,json=spindleStopVisible" json:"spindle_stop_visible,omitempty"`             /// Spindle stop control visible
	SpindlePlusVisible     *bool `protobuf:"varint,5,opt,name=spindle_plus_visible,json=spindlePlusVisible" json:"spindle_plus_visible,omitempty"`             /// Spindle plus control visible
	SpindleMinusVisible    *bool `protobuf:"varint,6,opt,name=spindle_minus_visible,json=spindleMinusVisible" json:"spindle_minus_visible,omitempty"`          /// Spindle minus control visible
	SpindleOverrideVisible *bool `protobuf:"varint,7,opt,name=spindle_override_visible,json=spindleOverrideVisible" json:"spindle_override_visible,omitempty"` /// Spindle override control visible
	CoolantFloodVisible    *bool `protobuf:"varint,8,opt,name=coolant_flood_visible,json=coolantFloodVisible" json:"coolant_flood_visible,omitempty"`          /// Coolant flood control visible
	CoolantMistVisible     *bool `protobuf:"varint,9,opt,name=coolant_mist_visible,json=coolantMistVisible" json:"coolant_mist_visible,omitempty"`             /// Coolant mist control visible
}

func (x *EmcStatusUI) Reset() {
	*x = EmcStatusUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_status_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmcStatusUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmcStatusUI) ProtoMessage() {}

func (x *EmcStatusUI) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_status_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmcStatusUI.ProtoReflect.Descriptor instead.
func (*EmcStatusUI) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_status_proto_rawDescGZIP(), []int{17}
}

func (x *EmcStatusUI) GetSpindleBrakeVisible() bool {
	if x != nil && x.SpindleBrakeVisible != nil {
		return *x.SpindleBrakeVisible
	}
	return false
}

func (x *EmcStatusUI) GetSpindleCwVisible() bool {
	if x != nil && x.SpindleCwVisible != nil {
		return *x.SpindleCwVisible
	}
	return false
}

func (x *EmcStatusUI) GetSpindleCcwVisible() bool {
	if x != nil && x.SpindleCcwVisible != nil {
		return *x.SpindleCcwVisible
	}
	return false
}

func (x *EmcStatusUI) GetSpindleStopVisible() bool {
	if x != nil && x.SpindleStopVisible != nil {
		return *x.SpindleStopVisible
	}
	return false
}

func (x *EmcStatusUI) GetSpindlePlusVisible() bool {
	if x != nil && x.SpindlePlusVisible != nil {
		return *x.SpindlePlusVisible
	}
	return false
}

func (x *EmcStatusUI) GetSpindleMinusVisible() bool {
	if x != nil && x.SpindleMinusVisible != nil {
		return *x.SpindleMinusVisible
	}
	return false
}

func (x *EmcStatusUI) GetSpindleOverrideVisible() bool {
	if x != nil && x.SpindleOverrideVisible != nil {
		return *x.SpindleOverrideVisible
	}
	return false
}

func (x *EmcStatusUI) GetCoolantFloodVisible() bool {
	if x != nil && x.CoolantFloodVisible != nil {
		return *x.CoolantFloodVisible
	}
	return false
}

func (x *EmcStatusUI) GetCoolantMistVisible() bool {
	if x != nil && x.CoolantMistVisible != nil {
		return *x.CoolantMistVisible
	}
	return false
}

var File_machinetalk_protobuf_status_proto protoreflect.FileDescriptor

var file_machinetalk_protobuf_status_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x6f, 0x74, 0x63, 0x6d, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x0b, 0x45, 0x6d, 0x63, 0x54, 0x6f, 0x6f, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xcc, 0x08, 0x22, 0x82, 0x04,
	0x0a, 0x13, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x78, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x69, 0x67, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x6f, 0x6d, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x6f, 0x6d, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x48, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48,
	0xcd, 0x08, 0x22, 0xb3, 0x03, 0x0a, 0x13, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x78, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x35, 0x0a, 0x09, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x41, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xce, 0x08, 0x22, 0x51, 0x0a, 0x13, 0x45, 0x6d, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xcf, 0x08, 0x22, 0x47, 0x0a, 0x11, 0x45,
	0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x4f,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x92, 0x3f,
	0x03, 0x48, 0xd0, 0x08, 0x22, 0x48, 0x0a, 0x12, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd1, 0x08, 0x22, 0x44,
	0x0a, 0x0e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x92, 0x3f,
	0x03, 0x48, 0xd2, 0x08, 0x22, 0x44, 0x0a, 0x0e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd3, 0x08, 0x22, 0x44, 0x0a, 0x0e, 0x45, 0x6d,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd4, 0x08,
	0x22, 0x46, 0x0a, 0x10, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd5, 0x08, 0x22, 0xd8, 0x0d, 0x0a, 0x0f, 0x45, 0x6d, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61,
	0x78, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x78, 0x69, 0x73, 0x52, 0x04, 0x61, 0x78, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x78, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x78,
	0x69, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x47, 0x0a, 0x0f, 0x6b,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x51, 0x0a,
	0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x69,
	0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x69,
	0x64, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x74, 0x68, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x61, 0x74, 0x68, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x68, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45,
	0x6d, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x41, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x3a, 0x06, 0x92, 0x3f, 0x03,
	0x48, 0xd6, 0x08, 0x22, 0xc7, 0x10, 0x0a, 0x0f, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x03, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x4f, 0x52, 0x03, 0x61, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x61, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x4f, 0x52, 0x04,
	0x61, 0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x78, 0x69, 0x73, 0x52, 0x04, 0x61, 0x78, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x31, 0x0a, 0x03, 0x64, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x4f, 0x52, 0x03,
	0x64, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x47, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x6f, 0x75,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x4f, 0x52, 0x04, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x27,
	0x0a, 0x03, 0x64, 0x74, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x64, 0x74, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x65,
	0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x65,
	0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x72, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x67, 0x35, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x08, 0x67, 0x35, 0x78, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x35, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x67, 0x35, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x39,
	0x32, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x67, 0x39, 0x32, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x6f, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x6f, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6a, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x45, 0x6d, 0x63, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x56, 0x61, 0x6c, 0x12,
	0x3e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x79, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6b, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x42,
	0x72, 0x61, 0x6b, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x70,
	0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x69,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x70, 0x69,
	0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x70, 0x69, 0x64,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x61, 0x70, 0x69,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd7, 0x08, 0x22, 0xc8, 0x02,
	0x0a, 0x0b, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x73,
	0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x75, 0x62,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x75, 0x62, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x75, 0x62, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6c, 0x75, 0x62, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f,
	0x6f, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x6f,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x70, 0x70, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd8, 0x08, 0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x45, 0x6d, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd9, 0x08, 0x22, 0xb6, 0x03, 0x0a, 0x0f, 0x45, 0x6d, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x67, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x45, 0x6d, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x53, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xda,
	0x08, 0x22, 0xf4, 0x04, 0x0a, 0x14, 0x45, 0x6d, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x6a, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74,
	0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x54, 0x6f, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xdb, 0x08, 0x22, 0x4e, 0x0a, 0x14, 0x45, 0x6d, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xdc, 0x08, 0x22, 0xdf, 0x03, 0x0a, 0x0b, 0x45, 0x6d, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x49, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65,
	0x42, 0x72, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c,
	0x65, 0x43, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70,
	0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x63, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65,
	0x43, 0x63, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70,
	0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6f,
	0x6c, 0x61, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xdd, 0x08, 0x2a, 0xe7, 0x02, 0x0a, 0x14, 0x45,
	0x6d, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x49, 0x4f, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d, 0x43, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x49, 0x4f, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x4d, 0x44, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x2a, 0xa1, 0x01, 0x0a, 0x12, 0x45, 0x6d, 0x63, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x49,
	0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x53,
	0x45, 0x45, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0xc8, 0x01, 0x0a, 0x15, 0x45, 0x6d, 0x63,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50,
	0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d,
	0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x43, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x2a, 0x7b, 0x0a, 0x11, 0x45, 0x6d, 0x63, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x49, 0x4e, 0x45,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x4b, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4b,
	0x49, 0x4e, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x04,
	0x2a, 0x62, 0x0a, 0x15, 0x45, 0x6d, 0x63, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x43,
	0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x4f, 0x50, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x11, 0x45, 0x6d, 0x63, 0x43, 0x61, 0x6e, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x4d,
	0x4d, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x53, 0x5f, 0x43, 0x4d, 0x10, 0x03, 0x2a, 0x55, 0x0a, 0x12, 0x45, 0x6d, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x49, 0x4e,
	0x43, 0x48, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x53, 0x5f, 0x4d, 0x4d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x43, 0x4d, 0x10, 0x03, 0x2a, 0x62,
	0x0a, 0x13, 0x45, 0x6d, 0x63, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4e, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x4e, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x53, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x44,
	0x10, 0x03, 0x2a, 0x40, 0x0a, 0x10, 0x45, 0x6d, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x0f, 0x45, 0x6d, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x43,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x44, 0x49, 0x10, 0x03,
	0x2a, 0x7b, 0x0a, 0x10, 0x45, 0x6d, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x38, 0x0a,
	0x0b, 0x45, 0x6d, 0x63, 0x41, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x41, 0x4e,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x15, 0x45, 0x6d, 0x63, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x02, 0x2a,
	0x5c, 0x0a, 0x17, 0x45, 0x6d, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4d,
	0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4d,
	0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x42, 0x2f, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
}

var (
	file_machinetalk_protobuf_status_proto_rawDescOnce sync.Once
	file_machinetalk_protobuf_status_proto_rawDescData = file_machinetalk_protobuf_status_proto_rawDesc
)

func file_machinetalk_protobuf_status_proto_rawDescGZIP() []byte {
	file_machinetalk_protobuf_status_proto_rawDescOnce.Do(func() {
		file_machinetalk_protobuf_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_machinetalk_protobuf_status_proto_rawDescData)
	})
	return file_machinetalk_protobuf_status_proto_rawDescData
}

var file_machinetalk_protobuf_status_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_machinetalk_protobuf_status_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_machinetalk_protobuf_status_proto_goTypes = []interface{}{
	(EmcTaskExecStateType)(0),    // 0: machinetalk.EmcTaskExecStateType
	(EmcInterpStateType)(0),      // 1: machinetalk.EmcInterpStateType
	(EmcInterpExitCodeType)(0),   // 2: machinetalk.EmcInterpExitCodeType
	(EmcKinematicsType)(0),       // 3: machinetalk.EmcKinematicsType
	(EmcTrajectoryModeType)(0),   // 4: machinetalk.EmcTrajectoryModeType
	(EmcCanonUnitsType)(0),       // 5: machinetalk.EmcCanonUnitsType
	(EmcLinearUnitsType)(0),      // 6: machinetalk.EmcLinearUnitsType
	(EmcAngularUnitsType)(0),     // 7: machinetalk.EmcAngularUnitsType
	(EmcTimeUnitsType)(0),        // 8: machinetalk.EmcTimeUnitsType
	(EmcTaskModeType)(0),         // 9: machinetalk.EmcTaskModeType
	(EmcTaskStateType)(0),        // 10: machinetalk.EmcTaskStateType
	(EmcAxisType)(0),             // 11: machinetalk.EmcAxisType
	(EmcPositionOffsetType)(0),   // 12: machinetalk.EmcPositionOffsetType
	(EmcPositionFeedbackType)(0), // 13: machinetalk.EmcPositionFeedbackType
	(*EmcToolData)(nil),          // 14: machinetalk.EmcToolData
	(*EmcStatusMotionAxis)(nil),  // 15: machinetalk.EmcStatusMotionAxis
	(*EmcStatusConfigAxis)(nil),  // 16: machinetalk.EmcStatusConfigAxis
	(*EmcProgramExtension)(nil),  // 17: machinetalk.EmcProgramExtension
	(*EmcStatusAnalogIO)(nil),    // 18: machinetalk.EmcStatusAnalogIO
	(*EmcStatusDigitalIO)(nil),   // 19: machinetalk.EmcStatusDigitalIO
	(*EmcStatusLimit)(nil),       // 20: machinetalk.EmcStatusLimit
	(*EmcStatusGCode)(nil),       // 21: machinetalk.EmcStatusGCode
	(*EmcStatusMCode)(nil),       // 22: machinetalk.EmcStatusMCode
	(*EmcStatusSetting)(nil),     // 23: machinetalk.EmcStatusSetting
	(*EmcStatusConfig)(nil),      // 24: machinetalk.EmcStatusConfig
	(*EmcStatusMotion)(nil),      // 25: machinetalk.EmcStatusMotion
	(*EmcStatusIo)(nil),          // 26: machinetalk.EmcStatusIo
	(*EmcStatusTask)(nil),        // 27: machinetalk.EmcStatusTask
	(*EmcStatusInterp)(nil),      // 28: machinetalk.EmcStatusInterp
	(*EmcCommandParameters)(nil), // 29: machinetalk.EmcCommandParameters
	(*EmcStatusUserCommand)(nil), // 30: machinetalk.EmcStatusUserCommand
	(*EmcStatusUI)(nil),          // 31: machinetalk.EmcStatusUI
	(*Position)(nil),             // 32: machinetalk.Position
	(OriginIndex)(0),             // 33: machinetalk.OriginIndex
	(MotionType)(0),              // 34: machinetalk.MotionType
	(RCS_STATUS)(0),              // 35: machinetalk.RCS_STATUS
	(*EmcPose)(nil),              // 36: machinetalk.EmcPose
}
var file_machinetalk_protobuf_status_proto_depIdxs = []int32{
	32, // 0: machinetalk.EmcToolData.offset:type_name -> machinetalk.Position
	11, // 1: machinetalk.EmcStatusConfigAxis.axis_type:type_name -> machinetalk.EmcAxisType
	16, // 2: machinetalk.EmcStatusConfig.axis:type_name -> machinetalk.EmcStatusConfigAxis
	3,  // 3: machinetalk.EmcStatusConfig.kinematics_type:type_name -> machinetalk.EmcKinematicsType
	6,  // 4: machinetalk.EmcStatusConfig.linear_units:type_name -> machinetalk.EmcLinearUnitsType
	17, // 5: machinetalk.EmcStatusConfig.program_extension:type_name -> machinetalk.EmcProgramExtension
	12, // 6: machinetalk.EmcStatusConfig.position_offset:type_name -> machinetalk.EmcPositionOffsetType
	13, // 7: machinetalk.EmcStatusConfig.position_feedback:type_name -> machinetalk.EmcPositionFeedbackType
	8,  // 8: machinetalk.EmcStatusConfig.time_units:type_name -> machinetalk.EmcTimeUnitsType
	30, // 9: machinetalk.EmcStatusConfig.user_command:type_name -> machinetalk.EmcStatusUserCommand
	7,  // 10: machinetalk.EmcStatusConfig.angular_units:type_name -> machinetalk.EmcAngularUnitsType
	32, // 11: machinetalk.EmcStatusMotion.actual_position:type_name -> machinetalk.Position
	18, // 12: machinetalk.EmcStatusMotion.ain:type_name -> machinetalk.EmcStatusAnalogIO
	18, // 13: machinetalk.EmcStatusMotion.aout:type_name -> machinetalk.EmcStatusAnalogIO
	15, // 14: machinetalk.EmcStatusMotion.axis:type_name -> machinetalk.EmcStatusMotionAxis
	19, // 15: machinetalk.EmcStatusMotion.din:type_name -> machinetalk.EmcStatusDigitalIO
	19, // 16: machinetalk.EmcStatusMotion.dout:type_name -> machinetalk.EmcStatusDigitalIO
	32, // 17: machinetalk.EmcStatusMotion.dtg:type_name -> machinetalk.Position
	33, // 18: machinetalk.EmcStatusMotion.g5x_index:type_name -> machinetalk.OriginIndex
	32, // 19: machinetalk.EmcStatusMotion.g5x_offset:type_name -> machinetalk.Position
	32, // 20: machinetalk.EmcStatusMotion.g92_offset:type_name -> machinetalk.Position
	32, // 21: machinetalk.EmcStatusMotion.joint_actual_position:type_name -> machinetalk.Position
	32, // 22: machinetalk.EmcStatusMotion.joint_position:type_name -> machinetalk.Position
	20, // 23: machinetalk.EmcStatusMotion.limit:type_name -> machinetalk.EmcStatusLimit
	34, // 24: machinetalk.EmcStatusMotion.motion_type:type_name -> machinetalk.MotionType
	4,  // 25: machinetalk.EmcStatusMotion.motion_mode:type_name -> machinetalk.EmcTrajectoryModeType
	32, // 26: machinetalk.EmcStatusMotion.position:type_name -> machinetalk.Position
	32, // 27: machinetalk.EmcStatusMotion.probed_position:type_name -> machinetalk.Position
	35, // 28: machinetalk.EmcStatusMotion.state:type_name -> machinetalk.RCS_STATUS
	32, // 29: machinetalk.EmcStatusIo.tool_offset:type_name -> machinetalk.Position
	14, // 30: machinetalk.EmcStatusIo.tool_table:type_name -> machinetalk.EmcToolData
	0,  // 31: machinetalk.EmcStatusTask.exec_state:type_name -> machinetalk.EmcTaskExecStateType
	9,  // 32: machinetalk.EmcStatusTask.task_mode:type_name -> machinetalk.EmcTaskModeType
	10, // 33: machinetalk.EmcStatusTask.task_state:type_name -> machinetalk.EmcTaskStateType
	21, // 34: machinetalk.EmcStatusInterp.gcodes:type_name -> machinetalk.EmcStatusGCode
	1,  // 35: machinetalk.EmcStatusInterp.interp_state:type_name -> machinetalk.EmcInterpStateType
	2,  // 36: machinetalk.EmcStatusInterp.interpreter_errcode:type_name -> machinetalk.EmcInterpExitCodeType
	22, // 37: machinetalk.EmcStatusInterp.mcodes:type_name -> machinetalk.EmcStatusMCode
	23, // 38: machinetalk.EmcStatusInterp.settings:type_name -> machinetalk.EmcStatusSetting
	5,  // 39: machinetalk.EmcStatusInterp.program_units:type_name -> machinetalk.EmcCanonUnitsType
	9,  // 40: machinetalk.EmcCommandParameters.task_mode:type_name -> machinetalk.EmcTaskModeType
	10, // 41: machinetalk.EmcCommandParameters.task_state:type_name -> machinetalk.EmcTaskStateType
	4,  // 42: machinetalk.EmcCommandParameters.traj_mode:type_name -> machinetalk.EmcTrajectoryModeType
	36, // 43: machinetalk.EmcCommandParameters.pose:type_name -> machinetalk.EmcPose
	14, // 44: machinetalk.EmcCommandParameters.tool_data:type_name -> machinetalk.EmcToolData
	14, // 45: machinetalk.EmcCommandParameters.tool_table:type_name -> machinetalk.EmcToolData
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_machinetalk_protobuf_status_proto_init() }
func file_machinetalk_protobuf_status_proto_init() {
	if File_machinetalk_protobuf_status_proto != nil {
		return
	}
	file_machinetalk_protobuf_nanopb_proto_init()
	file_machinetalk_protobuf_types_proto_init()
	file_machinetalk_protobuf_preview_proto_init()
	file_machinetalk_protobuf_emcclass_proto_init()
	file_machinetalk_protobuf_motcmds_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_machinetalk_protobuf_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcToolData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusMotionAxis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusConfigAxis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcProgramExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusAnalogIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusDigitalIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusGCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusMCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusIo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusInterp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcCommandParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusUserCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_status_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmcStatusUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machinetalk_protobuf_status_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machinetalk_protobuf_status_proto_goTypes,
		DependencyIndexes: file_machinetalk_protobuf_status_proto_depIdxs,
		EnumInfos:         file_machinetalk_protobuf_status_proto_enumTypes,
		MessageInfos:      file_machinetalk_protobuf_status_proto_msgTypes,
	}.Build()
	File_machinetalk_protobuf_status_proto = out.File
	file_machinetalk_protobuf_status_proto_rawDesc = nil
	file_machinetalk_protobuf_status_proto_goTypes = nil
	file_machinetalk_protobuf_status_proto_depIdxs = nil
}
