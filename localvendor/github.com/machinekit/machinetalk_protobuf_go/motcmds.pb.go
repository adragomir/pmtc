// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: machinetalk/protobuf/motcmds.proto

package machinetalk_protobuf_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// add _ to avoid collision with macros in emc/nml_intf/motion_typesh
type MotionType int32

const (
	MotionType__EMC_MOTION_TYPE_NONE        MotionType = 0 // sometimes also 0 is reported
	MotionType__EMC_MOTION_TYPE_TRAVERSE    MotionType = 1
	MotionType__EMC_MOTION_TYPE_FEED        MotionType = 2
	MotionType__EMC_MOTION_TYPE_ARC         MotionType = 3
	MotionType__EMC_MOTION_TYPE_TOOLCHANGE  MotionType = 4
	MotionType__EMC_MOTION_TYPE_PROBING     MotionType = 5
	MotionType__EMC_MOTION_TYPE_INDEXROTARY MotionType = 6
)

// Enum value maps for MotionType.
var (
	MotionType_name = map[int32]string{
		0: "_EMC_MOTION_TYPE_NONE",
		1: "_EMC_MOTION_TYPE_TRAVERSE",
		2: "_EMC_MOTION_TYPE_FEED",
		3: "_EMC_MOTION_TYPE_ARC",
		4: "_EMC_MOTION_TYPE_TOOLCHANGE",
		5: "_EMC_MOTION_TYPE_PROBING",
		6: "_EMC_MOTION_TYPE_INDEXROTARY",
	}
	MotionType_value = map[string]int32{
		"_EMC_MOTION_TYPE_NONE":        0,
		"_EMC_MOTION_TYPE_TRAVERSE":    1,
		"_EMC_MOTION_TYPE_FEED":        2,
		"_EMC_MOTION_TYPE_ARC":         3,
		"_EMC_MOTION_TYPE_TOOLCHANGE":  4,
		"_EMC_MOTION_TYPE_PROBING":     5,
		"_EMC_MOTION_TYPE_INDEXROTARY": 6,
	}
)

func (x MotionType) Enum() *MotionType {
	p := new(MotionType)
	*p = x
	return p
}

func (x MotionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MotionType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_motcmds_proto_enumTypes[0].Descriptor()
}

func (MotionType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_motcmds_proto_enumTypes[0]
}

func (x MotionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MotionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MotionType(num)
	return nil
}

// Deprecated: Use MotionType.Descriptor instead.
func (MotionType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_motcmds_proto_rawDescGZIP(), []int{0}
}

type CmdCodeT int32

const (
	CmdCodeT_EMCMOT_ABORT                 CmdCodeT = 4000 // abort all motion
	CmdCodeT_EMCMOT_AXIS_ABORT            CmdCodeT = 4001
	CmdCodeT_EMCMOT_ENABLE                CmdCodeT = 4002 // enable servos for active joints
	CmdCodeT_EMCMOT_DISABLE               CmdCodeT = 4003 // disable servos for active joints
	CmdCodeT_EMCMOT_ENABLE_AMPLIFIER      CmdCodeT = 4004 // enable amp outputs
	CmdCodeT_EMCMOT_DISABLE_AMPLIFIER     CmdCodeT = 4005 // disable amp outputs
	CmdCodeT_EMCMOT_ENABLE_WATCHDOG       CmdCodeT = 4006 // enable watchdog sound = 4000; parport
	CmdCodeT_EMCMOT_DISABLE_WATCHDOG      CmdCodeT = 4007 // enable watchdog sound = 4000; parport
	CmdCodeT_EMCMOT_ACTIVATE_JOINT        CmdCodeT = 4008 // make joint active
	CmdCodeT_EMCMOT_DEACTIVATE_JOINT      CmdCodeT = 4009 // make joint inactive
	CmdCodeT_EMCMOT_PAUSE                 CmdCodeT = 4010 // pause motion
	CmdCodeT_EMCMOT_RESUME                CmdCodeT = 4011 // resume motion
	CmdCodeT_EMCMOT_STEP                  CmdCodeT = 4012 // resume motion until id encountered
	CmdCodeT_EMCMOT_FREE                  CmdCodeT = 4013 // set mode to free (joint) motion
	CmdCodeT_EMCMOT_COORD                 CmdCodeT = 4014 // set mode to coordinated motion
	CmdCodeT_EMCMOT_TELEOP                CmdCodeT = 4015 // set mode to teleop
	CmdCodeT_EMCMOT_SPINDLE_SCALE         CmdCodeT = 4016 // set scale factor for spindle speed
	CmdCodeT_EMCMOT_SS_ENABLE             CmdCodeT = 4017 // enable/disable scaling the spindle speed
	CmdCodeT_EMCMOT_FEED_SCALE            CmdCodeT = 4018 // set scale factor for feedrate
	CmdCodeT_EMCMOT_FS_ENABLE             CmdCodeT = 4019 // enable/disable scaling feedrate
	CmdCodeT_EMCMOT_FH_ENABLE             CmdCodeT = 4020 // enable/disable feed_hold
	CmdCodeT_EMCMOT_AF_ENABLE             CmdCodeT = 4021 // enable/disable adaptive feedrate
	CmdCodeT_EMCMOT_OVERRIDE_LIMITS       CmdCodeT = 4022 // temporarily ignore limits until jog done
	CmdCodeT_EMCMOT_HOME                  CmdCodeT = 4023 // home a joint or all joints
	CmdCodeT_EMCMOT_UNHOME                CmdCodeT = 4024 // unhome a joint or all joints
	CmdCodeT_EMCMOT_JOG_CONT              CmdCodeT = 4025 // continuous jog
	CmdCodeT_EMCMOT_JOG_INCR              CmdCodeT = 4026 // incremental jog
	CmdCodeT_EMCMOT_JOG_ABS               CmdCodeT = 4027 // absolute jog
	CmdCodeT_EMCMOT_SET_LINE              CmdCodeT = 4028 // queue up a linear move
	CmdCodeT_EMCMOT_SET_CIRCLE            CmdCodeT = 4029 // queue up a circular move
	CmdCodeT_EMCMOT_SET_TELEOP_VECTOR     CmdCodeT = 4030
	CmdCodeT_EMCMOT_CLEAR_PROBE_FLAGS     CmdCodeT = 4031 // clears probeTripped flag
	CmdCodeT_EMCMOT_PROBE                 CmdCodeT = 4032
	CmdCodeT_EMCMOT_RIGID_TAP             CmdCodeT = 4033
	CmdCodeT_EMCMOT_SET_POSITION_LIMITS   CmdCodeT = 4034 // set the joint position +/- limits
	CmdCodeT_EMCMOT_SET_BACKLASH          CmdCodeT = 4035 // set the joint backlash
	CmdCodeT_EMCMOT_SET_MIN_FERROR        CmdCodeT = 4036 // minimum following error = 4000; input units
	CmdCodeT_EMCMOT_SET_MAX_FERROR        CmdCodeT = 4037 // maximum following error = 4000; input units
	CmdCodeT_EMCMOT_SET_VEL               CmdCodeT = 4038 // set the velocity for subsequent moves
	CmdCodeT_EMCMOT_SET_VEL_LIMIT         CmdCodeT = 4039 // set the max vel for all moves (tooltip)
	CmdCodeT_EMCMOT_SET_JOINT_VEL_LIMIT   CmdCodeT = 4040 // set the max joint vel
	CmdCodeT_EMCMOT_SET_JOINT_ACC_LIMIT   CmdCodeT = 4041 // set the max joint accel
	CmdCodeT_EMCMOT_SET_ACC               CmdCodeT = 4042 // set the max accel for moves (tooltip)
	CmdCodeT_EMCMOT_SET_TERM_COND         CmdCodeT = 4043 // set termination condition (stop = 4000; blend)
	CmdCodeT_EMCMOT_SET_NUM_AXES          CmdCodeT = 4044
	CmdCodeT_EMCMOT_SET_WORLD_HOME        CmdCodeT = 4045 // set pose for world home
	CmdCodeT_EMCMOT_SET_HOMING_PARAMS     CmdCodeT = 4046 // sets joint homing parameters
	CmdCodeT_EMCMOT_SET_DEBUG             CmdCodeT = 4047 // sets the debug level
	CmdCodeT_EMCMOT_SET_DOUT              CmdCodeT = 4048 // sets or unsets a DIO = 4000; this can be imediate or synched with motion
	CmdCodeT_EMCMOT_SET_AOUT              CmdCodeT = 4049 // sets or unsets a AIO = 4000; this can be imediate or synched with motion
	CmdCodeT_EMCMOT_SET_SPINDLESYNC       CmdCodeT = 4050 // syncronize motion to spindle encoder
	CmdCodeT_EMCMOT_SPINDLE_ON            CmdCodeT = 4051 // start the spindle
	CmdCodeT_EMCMOT_SPINDLE_OFF           CmdCodeT = 4052 // stop the spindle
	CmdCodeT_EMCMOT_SPINDLE_INCREASE      CmdCodeT = 4053 // spindle faster
	CmdCodeT_EMCMOT_SPINDLE_DECREASE      CmdCodeT = 4054 // spindle slower
	CmdCodeT_EMCMOT_SPINDLE_BRAKE_ENGAGE  CmdCodeT = 4055 // engage the spindle brake
	CmdCodeT_EMCMOT_SPINDLE_BRAKE_RELEASE CmdCodeT = 4056 // release the spindle brake
	CmdCodeT_EMCMOT_SET_MOTOR_OFFSET      CmdCodeT = 4057 // set the offset between joint and motor
	CmdCodeT_EMCMOT_SET_JOINT_COMP        CmdCodeT = 4058 // set a compensation triplet for a joint (nominal, forw., rev.)
	CmdCodeT_EMCMOT_SET_OFFSET            CmdCodeT = 4059 // set tool offsets
)

// Enum value maps for CmdCodeT.
var (
	CmdCodeT_name = map[int32]string{
		4000: "EMCMOT_ABORT",
		4001: "EMCMOT_AXIS_ABORT",
		4002: "EMCMOT_ENABLE",
		4003: "EMCMOT_DISABLE",
		4004: "EMCMOT_ENABLE_AMPLIFIER",
		4005: "EMCMOT_DISABLE_AMPLIFIER",
		4006: "EMCMOT_ENABLE_WATCHDOG",
		4007: "EMCMOT_DISABLE_WATCHDOG",
		4008: "EMCMOT_ACTIVATE_JOINT",
		4009: "EMCMOT_DEACTIVATE_JOINT",
		4010: "EMCMOT_PAUSE",
		4011: "EMCMOT_RESUME",
		4012: "EMCMOT_STEP",
		4013: "EMCMOT_FREE",
		4014: "EMCMOT_COORD",
		4015: "EMCMOT_TELEOP",
		4016: "EMCMOT_SPINDLE_SCALE",
		4017: "EMCMOT_SS_ENABLE",
		4018: "EMCMOT_FEED_SCALE",
		4019: "EMCMOT_FS_ENABLE",
		4020: "EMCMOT_FH_ENABLE",
		4021: "EMCMOT_AF_ENABLE",
		4022: "EMCMOT_OVERRIDE_LIMITS",
		4023: "EMCMOT_HOME",
		4024: "EMCMOT_UNHOME",
		4025: "EMCMOT_JOG_CONT",
		4026: "EMCMOT_JOG_INCR",
		4027: "EMCMOT_JOG_ABS",
		4028: "EMCMOT_SET_LINE",
		4029: "EMCMOT_SET_CIRCLE",
		4030: "EMCMOT_SET_TELEOP_VECTOR",
		4031: "EMCMOT_CLEAR_PROBE_FLAGS",
		4032: "EMCMOT_PROBE",
		4033: "EMCMOT_RIGID_TAP",
		4034: "EMCMOT_SET_POSITION_LIMITS",
		4035: "EMCMOT_SET_BACKLASH",
		4036: "EMCMOT_SET_MIN_FERROR",
		4037: "EMCMOT_SET_MAX_FERROR",
		4038: "EMCMOT_SET_VEL",
		4039: "EMCMOT_SET_VEL_LIMIT",
		4040: "EMCMOT_SET_JOINT_VEL_LIMIT",
		4041: "EMCMOT_SET_JOINT_ACC_LIMIT",
		4042: "EMCMOT_SET_ACC",
		4043: "EMCMOT_SET_TERM_COND",
		4044: "EMCMOT_SET_NUM_AXES",
		4045: "EMCMOT_SET_WORLD_HOME",
		4046: "EMCMOT_SET_HOMING_PARAMS",
		4047: "EMCMOT_SET_DEBUG",
		4048: "EMCMOT_SET_DOUT",
		4049: "EMCMOT_SET_AOUT",
		4050: "EMCMOT_SET_SPINDLESYNC",
		4051: "EMCMOT_SPINDLE_ON",
		4052: "EMCMOT_SPINDLE_OFF",
		4053: "EMCMOT_SPINDLE_INCREASE",
		4054: "EMCMOT_SPINDLE_DECREASE",
		4055: "EMCMOT_SPINDLE_BRAKE_ENGAGE",
		4056: "EMCMOT_SPINDLE_BRAKE_RELEASE",
		4057: "EMCMOT_SET_MOTOR_OFFSET",
		4058: "EMCMOT_SET_JOINT_COMP",
		4059: "EMCMOT_SET_OFFSET",
	}
	CmdCodeT_value = map[string]int32{
		"EMCMOT_ABORT":                 4000,
		"EMCMOT_AXIS_ABORT":            4001,
		"EMCMOT_ENABLE":                4002,
		"EMCMOT_DISABLE":               4003,
		"EMCMOT_ENABLE_AMPLIFIER":      4004,
		"EMCMOT_DISABLE_AMPLIFIER":     4005,
		"EMCMOT_ENABLE_WATCHDOG":       4006,
		"EMCMOT_DISABLE_WATCHDOG":      4007,
		"EMCMOT_ACTIVATE_JOINT":        4008,
		"EMCMOT_DEACTIVATE_JOINT":      4009,
		"EMCMOT_PAUSE":                 4010,
		"EMCMOT_RESUME":                4011,
		"EMCMOT_STEP":                  4012,
		"EMCMOT_FREE":                  4013,
		"EMCMOT_COORD":                 4014,
		"EMCMOT_TELEOP":                4015,
		"EMCMOT_SPINDLE_SCALE":         4016,
		"EMCMOT_SS_ENABLE":             4017,
		"EMCMOT_FEED_SCALE":            4018,
		"EMCMOT_FS_ENABLE":             4019,
		"EMCMOT_FH_ENABLE":             4020,
		"EMCMOT_AF_ENABLE":             4021,
		"EMCMOT_OVERRIDE_LIMITS":       4022,
		"EMCMOT_HOME":                  4023,
		"EMCMOT_UNHOME":                4024,
		"EMCMOT_JOG_CONT":              4025,
		"EMCMOT_JOG_INCR":              4026,
		"EMCMOT_JOG_ABS":               4027,
		"EMCMOT_SET_LINE":              4028,
		"EMCMOT_SET_CIRCLE":            4029,
		"EMCMOT_SET_TELEOP_VECTOR":     4030,
		"EMCMOT_CLEAR_PROBE_FLAGS":     4031,
		"EMCMOT_PROBE":                 4032,
		"EMCMOT_RIGID_TAP":             4033,
		"EMCMOT_SET_POSITION_LIMITS":   4034,
		"EMCMOT_SET_BACKLASH":          4035,
		"EMCMOT_SET_MIN_FERROR":        4036,
		"EMCMOT_SET_MAX_FERROR":        4037,
		"EMCMOT_SET_VEL":               4038,
		"EMCMOT_SET_VEL_LIMIT":         4039,
		"EMCMOT_SET_JOINT_VEL_LIMIT":   4040,
		"EMCMOT_SET_JOINT_ACC_LIMIT":   4041,
		"EMCMOT_SET_ACC":               4042,
		"EMCMOT_SET_TERM_COND":         4043,
		"EMCMOT_SET_NUM_AXES":          4044,
		"EMCMOT_SET_WORLD_HOME":        4045,
		"EMCMOT_SET_HOMING_PARAMS":     4046,
		"EMCMOT_SET_DEBUG":             4047,
		"EMCMOT_SET_DOUT":              4048,
		"EMCMOT_SET_AOUT":              4049,
		"EMCMOT_SET_SPINDLESYNC":       4050,
		"EMCMOT_SPINDLE_ON":            4051,
		"EMCMOT_SPINDLE_OFF":           4052,
		"EMCMOT_SPINDLE_INCREASE":      4053,
		"EMCMOT_SPINDLE_DECREASE":      4054,
		"EMCMOT_SPINDLE_BRAKE_ENGAGE":  4055,
		"EMCMOT_SPINDLE_BRAKE_RELEASE": 4056,
		"EMCMOT_SET_MOTOR_OFFSET":      4057,
		"EMCMOT_SET_JOINT_COMP":        4058,
		"EMCMOT_SET_OFFSET":            4059,
	}
)

func (x CmdCodeT) Enum() *CmdCodeT {
	p := new(CmdCodeT)
	*p = x
	return p
}

func (x CmdCodeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdCodeT) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_motcmds_proto_enumTypes[1].Descriptor()
}

func (CmdCodeT) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_motcmds_proto_enumTypes[1]
}

func (x CmdCodeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CmdCodeT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CmdCodeT(num)
	return nil
}

// Deprecated: Use CmdCodeT.Descriptor instead.
func (CmdCodeT) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_motcmds_proto_rawDescGZIP(), []int{1}
}

type CmdStatusT int32

const (
	CmdStatusT_EMCMOT_COMMAND_OK              CmdStatusT = 0 // cmd honored
	CmdStatusT_EMCMOT_COMMAND_UNKNOWN_COMMAND CmdStatusT = 1 // cmd not understood
	CmdStatusT_EMCMOT_COMMAND_INVALID_COMMAND CmdStatusT = 2 // cmd can't be handled now
	CmdStatusT_EMCMOT_COMMAND_INVALID_PARAMS  CmdStatusT = 3 // bad cmd params
	CmdStatusT_EMCMOT_COMMAND_BAD_EXEC        CmdStatusT = 4 // error trying to initiate
)

// Enum value maps for CmdStatusT.
var (
	CmdStatusT_name = map[int32]string{
		0: "EMCMOT_COMMAND_OK",
		1: "EMCMOT_COMMAND_UNKNOWN_COMMAND",
		2: "EMCMOT_COMMAND_INVALID_COMMAND",
		3: "EMCMOT_COMMAND_INVALID_PARAMS",
		4: "EMCMOT_COMMAND_BAD_EXEC",
	}
	CmdStatusT_value = map[string]int32{
		"EMCMOT_COMMAND_OK":              0,
		"EMCMOT_COMMAND_UNKNOWN_COMMAND": 1,
		"EMCMOT_COMMAND_INVALID_COMMAND": 2,
		"EMCMOT_COMMAND_INVALID_PARAMS":  3,
		"EMCMOT_COMMAND_BAD_EXEC":        4,
	}
)

func (x CmdStatusT) Enum() *CmdStatusT {
	p := new(CmdStatusT)
	*p = x
	return p
}

func (x CmdStatusT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdStatusT) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_motcmds_proto_enumTypes[2].Descriptor()
}

func (CmdStatusT) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_motcmds_proto_enumTypes[2]
}

func (x CmdStatusT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CmdStatusT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CmdStatusT(num)
	return nil
}

// Deprecated: Use CmdStatusT.Descriptor instead.
func (CmdStatusT) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_motcmds_proto_rawDescGZIP(), []int{2}
}

type MotionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     *CmdCodeT    `protobuf:"varint,10,req,name=command,enum=machinetalk.CmdCodeT" json:"command,omitempty"`
	CommandNum  *uint32      `protobuf:"fixed32,20,req,name=commandNum" json:"commandNum,omitempty"`                      // increment this for new command
	MotorOffset *float64     `protobuf:"fixed64,30,opt,name=motor_offset,json=motorOffset" json:"motor_offset,omitempty"` // offset from joint to motor position
	MaxLimit    *float64     `protobuf:"fixed64,40,opt,name=maxLimit" json:"maxLimit,omitempty"`                          // pos value for position limit, output
	MinLimit    *float64     `protobuf:"fixed64,50,opt,name=minLimit" json:"minLimit,omitempty"`                          // neg value for position limit, output
	Pos         *EmcPose     `protobuf:"bytes,60,opt,name=pos" json:"pos,omitempty"`                                      // line/circle endpt, or teleop vector
	Center      *PmCartesian `protobuf:"bytes,70,opt,name=center" json:"center,omitempty"`                                // center for circle
	Normal      *PmCartesian `protobuf:"bytes,80,opt,name=normal" json:"normal,omitempty"`                                // normal vec for circle
	Turn        *uint32      `protobuf:"fixed32,90,opt,name=turn" json:"turn,omitempty"`                                  // turns for circle or which rotary to unlock for a line
	Vel         *float64     `protobuf:"fixed64,100,opt,name=vel" json:"vel,omitempty"`                                   // max velocity
	IniMaxvel   *float64     `protobuf:"fixed64,110,opt,name=ini_maxvel,json=iniMaxvel" json:"ini_maxvel,omitempty"`      // max velocity allowed by machine
	// optional constraints (the ini file)
	MotionType   *MotionType `protobuf:"varint,120,opt,name=motion_type,json=motionType,enum=machinetalk.MotionType" json:"motion_type,omitempty"` // this move is because of traverse, feed, arc, or toolchange
	Spindlesync  *float64    `protobuf:"fixed64,130,opt,name=spindlesync" json:"spindlesync,omitempty"`                                            // user units per spindle revolution, 0 = no sync
	Acc          *float64    `protobuf:"fixed64,140,opt,name=acc" json:"acc,omitempty"`                                                            // max acceleration
	Backlash     *float64    `protobuf:"fixed64,150,opt,name=backlash" json:"backlash,omitempty"`                                                  // amount of backlash
	Id           *uint32     `protobuf:"fixed32,160,opt,name=id" json:"id,omitempty"`                                                              // id for motion
	TermCond     *uint32     `protobuf:"fixed32,170,opt,name=termCond" json:"termCond,omitempty"`                                                  // termination condition
	Tolerance    *float64    `protobuf:"fixed64,180,opt,name=tolerance" json:"tolerance,omitempty"`                                                // tolerance for path deviation in CONTINUOUS mode
	Axis         *uint32     `protobuf:"fixed32,190,opt,name=axis" json:"axis,omitempty"`
	Scale        *float64    `protobuf:"fixed64,200,opt,name=scale" json:"scale,omitempty"`                                     // velocity scale or spindle_speed scale arg
	Offset       *float64    `protobuf:"fixed64,210,opt,name=offset" json:"offset,omitempty"`                                   // input, output, or home offset arg
	Home         *float64    `protobuf:"fixed64,220,opt,name=home" json:"home,omitempty"`                                       // joint home position
	HomeFinalVel *float64    `protobuf:"fixed64,230,opt,name=home_final_vel,json=homeFinalVel" json:"home_final_vel,omitempty"` // joint velocity for moving from OFFSET to HOME
	SearchVel    *float64    `protobuf:"fixed64,240,opt,name=search_vel,json=searchVel" json:"search_vel,omitempty"`            // home search velocity
	LatchVel     *float64    `protobuf:"fixed64,250,opt,name=latch_vel,json=latchVel" json:"latch_vel,omitempty"`               // home latch velocity
	Flags        *uint32     `protobuf:"fixed32,260,opt,name=flags" json:"flags,omitempty"`                                     // homing config flags, other boolean args
	HomeSequence *uint32     `protobuf:"fixed32,270,opt,name=home_sequence,json=homeSequence" json:"home_sequence,omitempty"`   // order in homing sequence
	VolatileHome *uint32     `protobuf:"fixed32,280,opt,name=volatile_home,json=volatileHome" json:"volatile_home,omitempty"`   // joint should get unhomed when we get unhome -2
	// optional  (generated by task upon estop, etc)
	MinFerror *float64 `protobuf:"fixed64,290,opt,name=minFerror" json:"minFerror,omitempty"` // min following error
	MaxFerror *float64 `protobuf:"fixed64,300,opt,name=maxFerror" json:"maxFerror,omitempty"` // max following error
	WdWait    *uint32  `protobuf:"fixed32,310,opt,name=wdWait" json:"wdWait,omitempty"`       // cycle to wait before toggling wd
	Debug     *uint32  `protobuf:"fixed32,320,opt,name=debug" json:"debug,omitempty"`         // debug level, from DEBUG in .ini file
	Now       *int32   `protobuf:"varint,330,opt,name=now" json:"now,omitempty"`
	Out       *int32   `protobuf:"varint,340,opt,name=out" json:"out,omitempty"`
	Start     *int32   `protobuf:"varint,350,opt,name=start" json:"start,omitempty"`
	End       *int32   `protobuf:"varint,360,opt,name=end" json:"end,omitempty"` // these are related to synched AOUT/DOUT
	// now=wether now or synched, out = which gets set,
	// start=start value, end=end value
	Mode        *int32   `protobuf:"varint,370,opt,name=mode" json:"mode,omitempty"`                                   // used for turning overrides etc. on/off
	CompNominal *float64 `protobuf:"fixed64,380,opt,name=comp_nominal,json=compNominal" json:"comp_nominal,omitempty"` // compensation triplet, nominal, forward, reverse
	CompForward *float64 `protobuf:"fixed64,390,opt,name=comp_forward,json=compForward" json:"comp_forward,omitempty"` // compensation triplet, nominal, forward, reverse
	CompReverse *float64 `protobuf:"fixed64,400,opt,name=comp_reverse,json=compReverse" json:"comp_reverse,omitempty"` // compensation triplet, nominal, forward, reverse
	ProbeType   *int32   `protobuf:"varint,410,opt,name=probe_type,json=probeType" json:"probe_type,omitempty"`
	ToolOffset  *EmcPose `protobuf:"bytes,420,opt,name=tool_offset,json=toolOffset" json:"tool_offset,omitempty"` // TLO
}

func (x *MotionCommand) Reset() {
	*x = MotionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_motcmds_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionCommand) ProtoMessage() {}

func (x *MotionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_motcmds_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionCommand.ProtoReflect.Descriptor instead.
func (*MotionCommand) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_motcmds_proto_rawDescGZIP(), []int{0}
}

func (x *MotionCommand) GetCommand() CmdCodeT {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return CmdCodeT_EMCMOT_ABORT
}

func (x *MotionCommand) GetCommandNum() uint32 {
	if x != nil && x.CommandNum != nil {
		return *x.CommandNum
	}
	return 0
}

func (x *MotionCommand) GetMotorOffset() float64 {
	if x != nil && x.MotorOffset != nil {
		return *x.MotorOffset
	}
	return 0
}

func (x *MotionCommand) GetMaxLimit() float64 {
	if x != nil && x.MaxLimit != nil {
		return *x.MaxLimit
	}
	return 0
}

func (x *MotionCommand) GetMinLimit() float64 {
	if x != nil && x.MinLimit != nil {
		return *x.MinLimit
	}
	return 0
}

func (x *MotionCommand) GetPos() *EmcPose {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MotionCommand) GetCenter() *PmCartesian {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *MotionCommand) GetNormal() *PmCartesian {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *MotionCommand) GetTurn() uint32 {
	if x != nil && x.Turn != nil {
		return *x.Turn
	}
	return 0
}

func (x *MotionCommand) GetVel() float64 {
	if x != nil && x.Vel != nil {
		return *x.Vel
	}
	return 0
}

func (x *MotionCommand) GetIniMaxvel() float64 {
	if x != nil && x.IniMaxvel != nil {
		return *x.IniMaxvel
	}
	return 0
}

func (x *MotionCommand) GetMotionType() MotionType {
	if x != nil && x.MotionType != nil {
		return *x.MotionType
	}
	return MotionType__EMC_MOTION_TYPE_NONE
}

func (x *MotionCommand) GetSpindlesync() float64 {
	if x != nil && x.Spindlesync != nil {
		return *x.Spindlesync
	}
	return 0
}

func (x *MotionCommand) GetAcc() float64 {
	if x != nil && x.Acc != nil {
		return *x.Acc
	}
	return 0
}

func (x *MotionCommand) GetBacklash() float64 {
	if x != nil && x.Backlash != nil {
		return *x.Backlash
	}
	return 0
}

func (x *MotionCommand) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MotionCommand) GetTermCond() uint32 {
	if x != nil && x.TermCond != nil {
		return *x.TermCond
	}
	return 0
}

func (x *MotionCommand) GetTolerance() float64 {
	if x != nil && x.Tolerance != nil {
		return *x.Tolerance
	}
	return 0
}

func (x *MotionCommand) GetAxis() uint32 {
	if x != nil && x.Axis != nil {
		return *x.Axis
	}
	return 0
}

func (x *MotionCommand) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *MotionCommand) GetOffset() float64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *MotionCommand) GetHome() float64 {
	if x != nil && x.Home != nil {
		return *x.Home
	}
	return 0
}

func (x *MotionCommand) GetHomeFinalVel() float64 {
	if x != nil && x.HomeFinalVel != nil {
		return *x.HomeFinalVel
	}
	return 0
}

func (x *MotionCommand) GetSearchVel() float64 {
	if x != nil && x.SearchVel != nil {
		return *x.SearchVel
	}
	return 0
}

func (x *MotionCommand) GetLatchVel() float64 {
	if x != nil && x.LatchVel != nil {
		return *x.LatchVel
	}
	return 0
}

func (x *MotionCommand) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MotionCommand) GetHomeSequence() uint32 {
	if x != nil && x.HomeSequence != nil {
		return *x.HomeSequence
	}
	return 0
}

func (x *MotionCommand) GetVolatileHome() uint32 {
	if x != nil && x.VolatileHome != nil {
		return *x.VolatileHome
	}
	return 0
}

func (x *MotionCommand) GetMinFerror() float64 {
	if x != nil && x.MinFerror != nil {
		return *x.MinFerror
	}
	return 0
}

func (x *MotionCommand) GetMaxFerror() float64 {
	if x != nil && x.MaxFerror != nil {
		return *x.MaxFerror
	}
	return 0
}

func (x *MotionCommand) GetWdWait() uint32 {
	if x != nil && x.WdWait != nil {
		return *x.WdWait
	}
	return 0
}

func (x *MotionCommand) GetDebug() uint32 {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return 0
}

func (x *MotionCommand) GetNow() int32 {
	if x != nil && x.Now != nil {
		return *x.Now
	}
	return 0
}

func (x *MotionCommand) GetOut() int32 {
	if x != nil && x.Out != nil {
		return *x.Out
	}
	return 0
}

func (x *MotionCommand) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *MotionCommand) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *MotionCommand) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *MotionCommand) GetCompNominal() float64 {
	if x != nil && x.CompNominal != nil {
		return *x.CompNominal
	}
	return 0
}

func (x *MotionCommand) GetCompForward() float64 {
	if x != nil && x.CompForward != nil {
		return *x.CompForward
	}
	return 0
}

func (x *MotionCommand) GetCompReverse() float64 {
	if x != nil && x.CompReverse != nil {
		return *x.CompReverse
	}
	return 0
}

func (x *MotionCommand) GetProbeType() int32 {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return 0
}

func (x *MotionCommand) GetToolOffset() *EmcPose {
	if x != nil {
		return x.ToolOffset
	}
	return nil
}

type MotionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandEcho    *CmdCodeT   `protobuf:"varint,10,req,name=commandEcho,enum=machinetalk.CmdCodeT" json:"commandEcho,omitempty"`       // echo of input command
	CommandNumEcho *uint32     `protobuf:"fixed32,20,req,name=commandNumEcho" json:"commandNumEcho,omitempty"`                          // increment this for new command
	CommandStatus  *CmdStatusT `protobuf:"varint,30,req,name=commandStatus,enum=machinetalk.CmdStatusT" json:"commandStatus,omitempty"` // result of most recent command
	CartePosFb     *EmcPose    `protobuf:"bytes,40,opt,name=carte_pos_fb,json=cartePosFb" json:"carte_pos_fb,omitempty"`                // actual Cartesian position
}

func (x *MotionStatus) Reset() {
	*x = MotionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_motcmds_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionStatus) ProtoMessage() {}

func (x *MotionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_motcmds_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionStatus.ProtoReflect.Descriptor instead.
func (*MotionStatus) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_motcmds_proto_rawDescGZIP(), []int{1}
}

func (x *MotionStatus) GetCommandEcho() CmdCodeT {
	if x != nil && x.CommandEcho != nil {
		return *x.CommandEcho
	}
	return CmdCodeT_EMCMOT_ABORT
}

func (x *MotionStatus) GetCommandNumEcho() uint32 {
	if x != nil && x.CommandNumEcho != nil {
		return *x.CommandNumEcho
	}
	return 0
}

func (x *MotionStatus) GetCommandStatus() CmdStatusT {
	if x != nil && x.CommandStatus != nil {
		return *x.CommandStatus
	}
	return CmdStatusT_EMCMOT_COMMAND_OK
}

func (x *MotionStatus) GetCartePosFb() *EmcPose {
	if x != nil {
		return x.CartePosFb
	}
	return nil
}

var File_machinetalk_protobuf_motcmds_proto protoreflect.FileDescriptor

var file_machinetalk_protobuf_motcmds_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x6f, 0x74, 0x63, 0x6d, 0x64, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x1a, 0x23, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6e,
	0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x0a, 0x0a, 0x0d, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6d, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x02,
	0x28, 0x07, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x50, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x06, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x50, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x52, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x6c,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x76, 0x65, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x78, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x11, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x65, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x18, 0xbe, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x61, 0x78, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x68, 0x6f, 0x6d,
	0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c,
	0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x56, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x76, 0x65, 0x6c, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76,
	0x65, 0x6c, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x63, 0x68,
	0x56, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x84, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x8e, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6c, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x46,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x46, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x06, 0x77, 0x64, 0x57, 0x61, 0x69, 0x74, 0x18, 0xb6,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x77, 0x64, 0x57, 0x61, 0x69, 0x74, 0x12, 0x15, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x11, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0xca, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x11, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0xd4,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x11, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xf2, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x06, 0x92,
	0x3f, 0x03, 0x48, 0xd8, 0x04, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x63, 0x68, 0x6f, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6d, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x63, 0x68,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x45,
	0x63, 0x68, 0x6f, 0x18, 0x14, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6d, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x61,
	0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x66, 0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45,
	0x6d, 0x63, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x46, 0x62, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xd9, 0x04, 0x2a, 0xdc, 0x01, 0x0a, 0x0a, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x52, 0x53,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x5f, 0x45, 0x4d, 0x43,
	0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x42, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x52, 0x4f, 0x54, 0x41, 0x52, 0x59, 0x10, 0x06, 0x2a, 0xfb, 0x0b, 0x0a, 0x0a, 0x63, 0x6d,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0xa0, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x10, 0xa1, 0x1f, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0xa2, 0x1f, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa3, 0x1f, 0x12, 0x1c, 0x0a, 0x17,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4d,
	0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0xa4, 0x1f, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4d, 0x50,
	0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0xa5, 0x1f, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48,
	0x44, 0x4f, 0x47, 0x10, 0xa6, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x44, 0x4f,
	0x47, 0x10, 0xa7, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0xa8, 0x1f,
	0x12, 0x1c, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0xa9, 0x1f, 0x12, 0x11,
	0x0a, 0x0c, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0xaa,
	0x1f, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4d, 0x45, 0x10, 0xab, 0x1f, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f,
	0x53, 0x54, 0x45, 0x50, 0x10, 0xac, 0x1f, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0xad, 0x1f, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x10, 0xae, 0x1f, 0x12, 0x12, 0x0a, 0x0d,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50, 0x10, 0xaf, 0x1f,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xb0, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0xb1, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xb2, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xb3,
	0x1f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x48, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xb4, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xb5, 0x1f, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49,
	0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0xb6, 0x1f, 0x12, 0x10, 0x0a, 0x0b,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0xb7, 0x1f, 0x12, 0x12,
	0x0a, 0x0d, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x48, 0x4f, 0x4d, 0x45, 0x10,
	0xb8, 0x1f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4a, 0x4f, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x10, 0xb9, 0x1f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x4a, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x10, 0xba, 0x1f, 0x12, 0x13,
	0x0a, 0x0e, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4a, 0x4f, 0x47, 0x5f, 0x41, 0x42, 0x53,
	0x10, 0xbb, 0x1f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0xbc, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0xbd,
	0x1f, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xbe, 0x1f,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x10, 0xbf, 0x1f, 0x12,
	0x11, 0x0a, 0x0c, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10,
	0xc0, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x52, 0x49, 0x47,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x50, 0x10, 0xc1, 0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0xc2, 0x1f, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x4c, 0x41, 0x53,
	0x48, 0x10, 0xc3, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc4, 0x1f,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc5, 0x1f, 0x12, 0x13, 0x0a, 0x0e,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x4c, 0x10, 0xc6,
	0x1f, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xc7, 0x1f, 0x12, 0x1f, 0x0a, 0x1a,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xc8, 0x1f, 0x12, 0x1f, 0x0a,
	0x1a, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xc9, 0x1f, 0x12, 0x13,
	0x0a, 0x0e, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x10, 0xca, 0x1f, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0xcb, 0x1f, 0x12, 0x18,
	0x0a, 0x13, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d,
	0x5f, 0x41, 0x58, 0x45, 0x53, 0x10, 0xcc, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x48, 0x4f, 0x4d,
	0x45, 0x10, 0xcd, 0x1f, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53,
	0x10, 0xce, 0x1f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0xcf, 0x1f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x54, 0x10, 0xd0, 0x1f,
	0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41,
	0x4f, 0x55, 0x54, 0x10, 0xd1, 0x1f, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0xd2, 0x1f, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50,
	0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0xd3, 0x1f, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0xd4, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53,
	0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10,
	0xd5, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0xd6, 0x1f,
	0x12, 0x20, 0x0a, 0x1b, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4b, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x10,
	0xd7, 0x1f, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4b, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x10, 0xd8, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0xd9, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0xda, 0x1f, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x10, 0xdb, 0x1f, 0x2a, 0xad, 0x01, 0x0a, 0x0c, 0x63, 0x6d, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x04, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x6b, 0x69, 0x74,
	0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
}

var (
	file_machinetalk_protobuf_motcmds_proto_rawDescOnce sync.Once
	file_machinetalk_protobuf_motcmds_proto_rawDescData = file_machinetalk_protobuf_motcmds_proto_rawDesc
)

func file_machinetalk_protobuf_motcmds_proto_rawDescGZIP() []byte {
	file_machinetalk_protobuf_motcmds_proto_rawDescOnce.Do(func() {
		file_machinetalk_protobuf_motcmds_proto_rawDescData = protoimpl.X.CompressGZIP(file_machinetalk_protobuf_motcmds_proto_rawDescData)
	})
	return file_machinetalk_protobuf_motcmds_proto_rawDescData
}

var file_machinetalk_protobuf_motcmds_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_machinetalk_protobuf_motcmds_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_machinetalk_protobuf_motcmds_proto_goTypes = []interface{}{
	(MotionType)(0),       // 0: machinetalk.MotionType
	(CmdCodeT)(0),         // 1: machinetalk.cmd_code_t
	(CmdStatusT)(0),       // 2: machinetalk.cmd_status_t
	(*MotionCommand)(nil), // 3: machinetalk.MotionCommand
	(*MotionStatus)(nil),  // 4: machinetalk.MotionStatus
	(*EmcPose)(nil),       // 5: machinetalk.EmcPose
	(*PmCartesian)(nil),   // 6: machinetalk.PmCartesian
}
var file_machinetalk_protobuf_motcmds_proto_depIdxs = []int32{
	1, // 0: machinetalk.MotionCommand.command:type_name -> machinetalk.cmd_code_t
	5, // 1: machinetalk.MotionCommand.pos:type_name -> machinetalk.EmcPose
	6, // 2: machinetalk.MotionCommand.center:type_name -> machinetalk.PmCartesian
	6, // 3: machinetalk.MotionCommand.normal:type_name -> machinetalk.PmCartesian
	0, // 4: machinetalk.MotionCommand.motion_type:type_name -> machinetalk.MotionType
	5, // 5: machinetalk.MotionCommand.tool_offset:type_name -> machinetalk.EmcPose
	1, // 6: machinetalk.MotionStatus.commandEcho:type_name -> machinetalk.cmd_code_t
	2, // 7: machinetalk.MotionStatus.commandStatus:type_name -> machinetalk.cmd_status_t
	5, // 8: machinetalk.MotionStatus.carte_pos_fb:type_name -> machinetalk.EmcPose
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_machinetalk_protobuf_motcmds_proto_init() }
func file_machinetalk_protobuf_motcmds_proto_init() {
	if File_machinetalk_protobuf_motcmds_proto != nil {
		return
	}
	file_machinetalk_protobuf_emcclass_proto_init()
	file_machinetalk_protobuf_nanopb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_machinetalk_protobuf_motcmds_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_motcmds_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machinetalk_protobuf_motcmds_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machinetalk_protobuf_motcmds_proto_goTypes,
		DependencyIndexes: file_machinetalk_protobuf_motcmds_proto_depIdxs,
		EnumInfos:         file_machinetalk_protobuf_motcmds_proto_enumTypes,
		MessageInfos:      file_machinetalk_protobuf_motcmds_proto_msgTypes,
	}.Build()
	File_machinetalk_protobuf_motcmds_proto = out.File
	file_machinetalk_protobuf_motcmds_proto_rawDesc = nil
	file_machinetalk_protobuf_motcmds_proto_goTypes = nil
	file_machinetalk_protobuf_motcmds_proto_depIdxs = nil
}
