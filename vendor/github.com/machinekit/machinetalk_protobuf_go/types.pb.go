// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: machinetalk/protobuf/types.proto

// see README.msgid
// msgid base: 1400

package machinetalk_protobuf_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueType int32

const (
	//  the following tags correspond to hal.h: hal_type_t;
	ValueType_HAL_BIT   ValueType = 1
	ValueType_HAL_FLOAT ValueType = 2
	ValueType_HAL_S32   ValueType = 3
	ValueType_HAL_U32   ValueType = 4
	ValueType_HAL_S64   ValueType = 5
	ValueType_HAL_U64   ValueType = 6
	// STRING and BYTES not currently used
	ValueType_STRING           ValueType = 7
	ValueType_BYTES            ValueType = 8
	ValueType_INT32            ValueType = 20
	ValueType_UINT32           ValueType = 30
	ValueType_INT64            ValueType = 40
	ValueType_UINT64           ValueType = 50
	ValueType_DOUBLE           ValueType = 60
	ValueType_BOOL             ValueType = 80
	ValueType_CARTESIAN        ValueType = 100
	ValueType_LEGACY_CARTESIAN ValueType = 110
	ValueType_POSE             ValueType = 120
	ValueType_LEGACY_POSE      ValueType = 130
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		1:   "HAL_BIT",
		2:   "HAL_FLOAT",
		3:   "HAL_S32",
		4:   "HAL_U32",
		5:   "HAL_S64",
		6:   "HAL_U64",
		7:   "STRING",
		8:   "BYTES",
		20:  "INT32",
		30:  "UINT32",
		40:  "INT64",
		50:  "UINT64",
		60:  "DOUBLE",
		80:  "BOOL",
		100: "CARTESIAN",
		110: "LEGACY_CARTESIAN",
		120: "POSE",
		130: "LEGACY_POSE",
	}
	ValueType_value = map[string]int32{
		"HAL_BIT":          1,
		"HAL_FLOAT":        2,
		"HAL_S32":          3,
		"HAL_U32":          4,
		"HAL_S64":          5,
		"HAL_U64":          6,
		"STRING":           7,
		"BYTES":            8,
		"INT32":            20,
		"UINT32":           30,
		"INT64":            40,
		"UINT64":           50,
		"DOUBLE":           60,
		"BOOL":             80,
		"CARTESIAN":        100,
		"LEGACY_CARTESIAN": 110,
		"POSE":             120,
		"LEGACY_POSE":      130,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ValueType(num)
	return nil
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{0}
}

type HalPinDirection int32

const (
	//  the following tags correspond to hal.h: hal_pin_dir_t
	HalPinDirection_HAL_IN  HalPinDirection = 16
	HalPinDirection_HAL_OUT HalPinDirection = 32
	HalPinDirection_HAL_IO  HalPinDirection = 48 // (HAL_IN | HAL_OUT),
)

// Enum value maps for HalPinDirection.
var (
	HalPinDirection_name = map[int32]string{
		16: "HAL_IN",
		32: "HAL_OUT",
		48: "HAL_IO",
	}
	HalPinDirection_value = map[string]int32{
		"HAL_IN":  16,
		"HAL_OUT": 32,
		"HAL_IO":  48,
	}
)

func (x HalPinDirection) Enum() *HalPinDirection {
	p := new(HalPinDirection)
	*p = x
	return p
}

func (x HalPinDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HalPinDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[1].Descriptor()
}

func (HalPinDirection) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[1]
}

func (x HalPinDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HalPinDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HalPinDirection(num)
	return nil
}

// Deprecated: Use HalPinDirection.Descriptor instead.
func (HalPinDirection) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{1}
}

type HalParamDirection int32

const (
	//  the following tags correspond to hal.h: hal_param_dir_t
	HalParamDirection_HAL_RO HalParamDirection = 64
	HalParamDirection_HAL_RW HalParamDirection = 192
)

// Enum value maps for HalParamDirection.
var (
	HalParamDirection_name = map[int32]string{
		64:  "HAL_RO",
		192: "HAL_RW",
	}
	HalParamDirection_value = map[string]int32{
		"HAL_RO": 64,
		"HAL_RW": 192,
	}
)

func (x HalParamDirection) Enum() *HalParamDirection {
	p := new(HalParamDirection)
	*p = x
	return p
}

func (x HalParamDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HalParamDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[2].Descriptor()
}

func (HalParamDirection) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[2]
}

func (x HalParamDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HalParamDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HalParamDirection(num)
	return nil
}

// Deprecated: Use HalParamDirection.Descriptor instead.
func (HalParamDirection) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{2}
}

type HalFunctType int32

const (
	HalFunctType_FS_LEGACY_THREADFUNC HalFunctType = 0 // legacy API
	HalFunctType_FS_XTHREADFUNC       HalFunctType = 1 // extended API
	HalFunctType_FS_USERLAND          HalFunctType = 2 // userland-callable, with argc/arv vector
)

// Enum value maps for HalFunctType.
var (
	HalFunctType_name = map[int32]string{
		0: "FS_LEGACY_THREADFUNC",
		1: "FS_XTHREADFUNC",
		2: "FS_USERLAND",
	}
	HalFunctType_value = map[string]int32{
		"FS_LEGACY_THREADFUNC": 0,
		"FS_XTHREADFUNC":       1,
		"FS_USERLAND":          2,
	}
)

func (x HalFunctType) Enum() *HalFunctType {
	p := new(HalFunctType)
	*p = x
	return p
}

func (x HalFunctType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HalFunctType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[3].Descriptor()
}

func (HalFunctType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[3]
}

func (x HalFunctType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HalFunctType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HalFunctType(num)
	return nil
}

// Deprecated: Use HalFunctType.Descriptor instead.
func (HalFunctType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{3}
}

type ObjectType int32

const (
	//  the following tags correspond to hal.h:hal_object_type
	ObjectType_HAL_OBJECT_INVALID ObjectType = 0
	ObjectType_HAL_PIN            ObjectType = 1
	ObjectType_HAL_SIGNAL         ObjectType = 2
	ObjectType_HAL_PARAM          ObjectType = 3
	ObjectType_HAL_THREAD         ObjectType = 4
	ObjectType_HAL_FUNCT          ObjectType = 5
	ObjectType_HAL_COMPONENT      ObjectType = 6
	ObjectType_HAL_VTABLE         ObjectType = 7
	ObjectType_HAL_INST           ObjectType = 8
	ObjectType_HAL_RING           ObjectType = 9
	ObjectType_HAL_GROUP          ObjectType = 10
	ObjectType_HAL_MEMBER         ObjectType = 11
	ObjectType_HAL_PLUG           ObjectType = 12
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0:  "HAL_OBJECT_INVALID",
		1:  "HAL_PIN",
		2:  "HAL_SIGNAL",
		3:  "HAL_PARAM",
		4:  "HAL_THREAD",
		5:  "HAL_FUNCT",
		6:  "HAL_COMPONENT",
		7:  "HAL_VTABLE",
		8:  "HAL_INST",
		9:  "HAL_RING",
		10: "HAL_GROUP",
		11: "HAL_MEMBER",
		12: "HAL_PLUG",
	}
	ObjectType_value = map[string]int32{
		"HAL_OBJECT_INVALID": 0,
		"HAL_PIN":            1,
		"HAL_SIGNAL":         2,
		"HAL_PARAM":          3,
		"HAL_THREAD":         4,
		"HAL_FUNCT":          5,
		"HAL_COMPONENT":      6,
		"HAL_VTABLE":         7,
		"HAL_INST":           8,
		"HAL_RING":           9,
		"HAL_GROUP":          10,
		"HAL_MEMBER":         11,
		"HAL_PLUG":           12,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[4].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[4]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ObjectType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ObjectType(num)
	return nil
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{4}
}

type MsgidType int32

const (
	// all "option (nanopb_msgopt).msgid = <values> MUST be less than MSGID_MAX
	MsgidType_MSGID_MAX MsgidType = 4000
	// the empty zeromq frame which delimits route from payload
	MsgidType_MSGID_ROUTE_DELIMITER MsgidType = 4001
	// inband error message - use if a comp needs to signal an error with zeroMQ framing etc
	MsgidType_MSGID_ERROR_MSG MsgidType = 4002
	// an uninterpreted blob:
	MsgidType_MSGID_BLOB MsgidType = 4003
	// an uninterpreted string:
	MsgidType_MSGID_STRING MsgidType = 4004
	// when using multiframe rings with zeromq router/dealer, routing elements are
	// tagged MSGID_HOP
	MsgidType_MSGID_HOP MsgidType = 4005
)

// Enum value maps for MsgidType.
var (
	MsgidType_name = map[int32]string{
		4000: "MSGID_MAX",
		4001: "MSGID_ROUTE_DELIMITER",
		4002: "MSGID_ERROR_MSG",
		4003: "MSGID_BLOB",
		4004: "MSGID_STRING",
		4005: "MSGID_HOP",
	}
	MsgidType_value = map[string]int32{
		"MSGID_MAX":             4000,
		"MSGID_ROUTE_DELIMITER": 4001,
		"MSGID_ERROR_MSG":       4002,
		"MSGID_BLOB":            4003,
		"MSGID_STRING":          4004,
		"MSGID_HOP":             4005,
	}
)

func (x MsgidType) Enum() *MsgidType {
	p := new(MsgidType)
	*p = x
	return p
}

func (x MsgidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgidType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[5].Descriptor()
}

func (MsgidType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[5]
}

func (x MsgidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgidType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgidType(num)
	return nil
}

// Deprecated: Use MsgidType.Descriptor instead.
func (MsgidType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{5}
}

type SocketType int32

const (
	SocketType_ST_ZMQ_PAIR    SocketType = 0
	SocketType_ST_ZMQ_PUB     SocketType = 1
	SocketType_ST_ZMQ_SUB     SocketType = 2
	SocketType_ST_ZMQ_REQ     SocketType = 3
	SocketType_ST_ZMQ_REP     SocketType = 4
	SocketType_ST_ZMQ_DEALER  SocketType = 5
	SocketType_ST_ZMQ_ROUTER  SocketType = 6
	SocketType_ST_ZMQ_PULL    SocketType = 7
	SocketType_ST_ZMQ_PUSH    SocketType = 8
	SocketType_ST_ZMQ_XPUB    SocketType = 9
	SocketType_ST_ZMQ_XSUB    SocketType = 10
	SocketType_ST_ZMQ_STREAM  SocketType = 11
	SocketType_ST_ZMQ_INVALID SocketType = 15
)

// Enum value maps for SocketType.
var (
	SocketType_name = map[int32]string{
		0:  "ST_ZMQ_PAIR",
		1:  "ST_ZMQ_PUB",
		2:  "ST_ZMQ_SUB",
		3:  "ST_ZMQ_REQ",
		4:  "ST_ZMQ_REP",
		5:  "ST_ZMQ_DEALER",
		6:  "ST_ZMQ_ROUTER",
		7:  "ST_ZMQ_PULL",
		8:  "ST_ZMQ_PUSH",
		9:  "ST_ZMQ_XPUB",
		10: "ST_ZMQ_XSUB",
		11: "ST_ZMQ_STREAM",
		15: "ST_ZMQ_INVALID",
	}
	SocketType_value = map[string]int32{
		"ST_ZMQ_PAIR":    0,
		"ST_ZMQ_PUB":     1,
		"ST_ZMQ_SUB":     2,
		"ST_ZMQ_REQ":     3,
		"ST_ZMQ_REP":     4,
		"ST_ZMQ_DEALER":  5,
		"ST_ZMQ_ROUTER":  6,
		"ST_ZMQ_PULL":    7,
		"ST_ZMQ_PUSH":    8,
		"ST_ZMQ_XPUB":    9,
		"ST_ZMQ_XSUB":    10,
		"ST_ZMQ_STREAM":  11,
		"ST_ZMQ_INVALID": 15,
	}
)

func (x SocketType) Enum() *SocketType {
	p := new(SocketType)
	*p = x
	return p
}

func (x SocketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[6].Descriptor()
}

func (SocketType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[6]
}

func (x SocketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SocketType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SocketType(num)
	return nil
}

// Deprecated: Use SocketType.Descriptor instead.
func (SocketType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{6}
}

type SecurityMechanism int32

const (
	SecurityMechanism_SM_ZMQ_NONE  SecurityMechanism = -1
	SecurityMechanism_SM_ZMQ_NULL  SecurityMechanism = 0
	SecurityMechanism_SM_ZMQ_PLAIN SecurityMechanism = 1
	SecurityMechanism_SM_ZMQ_CURVE SecurityMechanism = 2
)

// Enum value maps for SecurityMechanism.
var (
	SecurityMechanism_name = map[int32]string{
		-1: "SM_ZMQ_NONE",
		0:  "SM_ZMQ_NULL",
		1:  "SM_ZMQ_PLAIN",
		2:  "SM_ZMQ_CURVE",
	}
	SecurityMechanism_value = map[string]int32{
		"SM_ZMQ_NONE":  -1,
		"SM_ZMQ_NULL":  0,
		"SM_ZMQ_PLAIN": 1,
		"SM_ZMQ_CURVE": 2,
	}
)

func (x SecurityMechanism) Enum() *SecurityMechanism {
	p := new(SecurityMechanism)
	*p = x
	return p
}

func (x SecurityMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[7].Descriptor()
}

func (SecurityMechanism) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[7]
}

func (x SecurityMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SecurityMechanism) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SecurityMechanism(num)
	return nil
}

// Deprecated: Use SecurityMechanism.Descriptor instead.
func (SecurityMechanism) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{7}
}

type RCS_STATUS int32

const (
	RCS_STATUS_UNINITIALIZED_STATUS RCS_STATUS = -1
	RCS_STATUS_RCS_DONE             RCS_STATUS = 1
	RCS_STATUS_RCS_EXEC             RCS_STATUS = 2
	RCS_STATUS_RCS_ERROR            RCS_STATUS = 3
	RCS_STATUS_RCS_RECEIVED         RCS_STATUS = 4
)

// Enum value maps for RCS_STATUS.
var (
	RCS_STATUS_name = map[int32]string{
		-1: "UNINITIALIZED_STATUS",
		1:  "RCS_DONE",
		2:  "RCS_EXEC",
		3:  "RCS_ERROR",
		4:  "RCS_RECEIVED",
	}
	RCS_STATUS_value = map[string]int32{
		"UNINITIALIZED_STATUS": -1,
		"RCS_DONE":             1,
		"RCS_EXEC":             2,
		"RCS_ERROR":            3,
		"RCS_RECEIVED":         4,
	}
)

func (x RCS_STATUS) Enum() *RCS_STATUS {
	p := new(RCS_STATUS)
	*p = x
	return p
}

func (x RCS_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RCS_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[8].Descriptor()
}

func (RCS_STATUS) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[8]
}

func (x RCS_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RCS_STATUS) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RCS_STATUS(num)
	return nil
}

// Deprecated: Use RCS_STATUS.Descriptor instead.
func (RCS_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{8}
}

// see rtapi.h
type MsgOrigin int32

const (
	MsgOrigin_MSG_KERNEL MsgOrigin = 0
	MsgOrigin_MSG_RTUSER MsgOrigin = 1
	MsgOrigin_MSG_ULAPI  MsgOrigin = 2
)

// Enum value maps for MsgOrigin.
var (
	MsgOrigin_name = map[int32]string{
		0: "MSG_KERNEL",
		1: "MSG_RTUSER",
		2: "MSG_ULAPI",
	}
	MsgOrigin_value = map[string]int32{
		"MSG_KERNEL": 0,
		"MSG_RTUSER": 1,
		"MSG_ULAPI":  2,
	}
)

func (x MsgOrigin) Enum() *MsgOrigin {
	p := new(MsgOrigin)
	*p = x
	return p
}

func (x MsgOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[9].Descriptor()
}

func (MsgOrigin) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[9]
}

func (x MsgOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgOrigin) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgOrigin(num)
	return nil
}

// Deprecated: Use MsgOrigin.Descriptor instead.
func (MsgOrigin) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{9}
}

type MsgLevel int32

const (
	// see enum msg_level_t in rtapi.h
	MsgLevel_RTAPI_MSG_NONE MsgLevel = 0
	MsgLevel_RTAPI_MSG_ERR  MsgLevel = 1
	MsgLevel_RTAPI_MSG_WARN MsgLevel = 2
	MsgLevel_RTAPI_MSG_INFO MsgLevel = 3
	MsgLevel_RTAPI_MSG_DBG  MsgLevel = 4
	MsgLevel_RTAPI_MSG_ALL  MsgLevel = 5
)

// Enum value maps for MsgLevel.
var (
	MsgLevel_name = map[int32]string{
		0: "RTAPI_MSG_NONE",
		1: "RTAPI_MSG_ERR",
		2: "RTAPI_MSG_WARN",
		3: "RTAPI_MSG_INFO",
		4: "RTAPI_MSG_DBG",
		5: "RTAPI_MSG_ALL",
	}
	MsgLevel_value = map[string]int32{
		"RTAPI_MSG_NONE": 0,
		"RTAPI_MSG_ERR":  1,
		"RTAPI_MSG_WARN": 2,
		"RTAPI_MSG_INFO": 3,
		"RTAPI_MSG_DBG":  4,
		"RTAPI_MSG_ALL":  5,
	}
)

func (x MsgLevel) Enum() *MsgLevel {
	p := new(MsgLevel)
	*p = x
	return p
}

func (x MsgLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[10].Descriptor()
}

func (MsgLevel) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[10]
}

func (x MsgLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MsgLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MsgLevel(num)
	return nil
}

// Deprecated: Use MsgLevel.Descriptor instead.
func (MsgLevel) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{10}
}

type OriginDetail int32

const (
	OriginDetail_UNIX_SIGNAL       OriginDetail = 10
	OriginDetail_INSTANCE_SHUTDOWN OriginDetail = 20
	OriginDetail_ZMQ_SOCKET        OriginDetail = 70
	OriginDetail_NML_LAYER         OriginDetail = 80
	OriginDetail_RCS_LAYER         OriginDetail = 90
	OriginDetail_CMS_LAYER         OriginDetail = 100
	OriginDetail_IP_LAYER          OriginDetail = 110
	OriginDetail_TCP_LAYER         OriginDetail = 120
	OriginDetail_PGM_LAYER         OriginDetail = 130
)

// Enum value maps for OriginDetail.
var (
	OriginDetail_name = map[int32]string{
		10:  "UNIX_SIGNAL",
		20:  "INSTANCE_SHUTDOWN",
		70:  "ZMQ_SOCKET",
		80:  "NML_LAYER",
		90:  "RCS_LAYER",
		100: "CMS_LAYER",
		110: "IP_LAYER",
		120: "TCP_LAYER",
		130: "PGM_LAYER",
	}
	OriginDetail_value = map[string]int32{
		"UNIX_SIGNAL":       10,
		"INSTANCE_SHUTDOWN": 20,
		"ZMQ_SOCKET":        70,
		"NML_LAYER":         80,
		"RCS_LAYER":         90,
		"CMS_LAYER":         100,
		"IP_LAYER":          110,
		"TCP_LAYER":         120,
		"PGM_LAYER":         130,
	}
)

func (x OriginDetail) Enum() *OriginDetail {
	p := new(OriginDetail)
	*p = x
	return p
}

func (x OriginDetail) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginDetail) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[11].Descriptor()
}

func (OriginDetail) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[11]
}

func (x OriginDetail) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OriginDetail) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OriginDetail(num)
	return nil
}

// Deprecated: Use OriginDetail.Descriptor instead.
func (OriginDetail) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{11}
}

type OriginType int32

const (
	OriginType_PROCESS         OriginType = 10
	OriginType_USER_THREAD     OriginType = 20
	OriginType_RT_THREAD       OriginType = 30
	OriginType_COMPONENT       OriginType = 40
	OriginType_THREAD_FUNCTION OriginType = 50
	OriginType_COMPONENT_INIT  OriginType = 60
	OriginType_COMPONENT_EXIT  OriginType = 70
	OriginType_GROUP           OriginType = 80
	OriginType_PIN             OriginType = 90
	OriginType_SIGNAL          OriginType = 100
)

// Enum value maps for OriginType.
var (
	OriginType_name = map[int32]string{
		10:  "PROCESS",
		20:  "USER_THREAD",
		30:  "RT_THREAD",
		40:  "COMPONENT",
		50:  "THREAD_FUNCTION",
		60:  "COMPONENT_INIT",
		70:  "COMPONENT_EXIT",
		80:  "GROUP",
		90:  "PIN",
		100: "SIGNAL",
	}
	OriginType_value = map[string]int32{
		"PROCESS":         10,
		"USER_THREAD":     20,
		"RT_THREAD":       30,
		"COMPONENT":       40,
		"THREAD_FUNCTION": 50,
		"COMPONENT_INIT":  60,
		"COMPONENT_EXIT":  70,
		"GROUP":           80,
		"PIN":             90,
		"SIGNAL":          100,
	}
)

func (x OriginType) Enum() *OriginType {
	p := new(OriginType)
	*p = x
	return p
}

func (x OriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[12].Descriptor()
}

func (OriginType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[12]
}

func (x OriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OriginType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OriginType(num)
	return nil
}

// Deprecated: Use OriginType.Descriptor instead.
func (OriginType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{12}
}

type Severity int32

const (
	Severity_S_INFORMATIONAL Severity = 1
	Severity_S_WARNING       Severity = 2
	Severity_S_FAIL          Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		1: "S_INFORMATIONAL",
		2: "S_WARNING",
		4: "S_FAIL",
	}
	Severity_value = map[string]int32{
		"S_INFORMATIONAL": 1,
		"S_WARNING":       2,
		"S_FAIL":          4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[13].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[13]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Severity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Severity(num)
	return nil
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{13}
}

type StatusType int32

const (
	StatusType_ENQUEUED   StatusType = 1 // intermediate
	StatusType_PROCESSING StatusType = 2 // -- '' --
	StatusType_COMPLETE   StatusType = 3 // final
	StatusType_FAILED     StatusType = 4 // -- '' --
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		1: "ENQUEUED",
		2: "PROCESSING",
		3: "COMPLETE",
		4: "FAILED",
	}
	StatusType_value = map[string]int32{
		"ENQUEUED":   1,
		"PROCESSING": 2,
		"COMPLETE":   3,
		"FAILED":     4,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[14].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[14]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StatusType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StatusType(num)
	return nil
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{14}
}

type ReplyType int32

const (
	// NONE wont work with zmq REQ/REP sockets:
	// they require a reply
	// better to use XREQ/XREP
	ReplyType_NONE          ReplyType = 0
	ReplyType_ON_RECEPTION  ReplyType = 1
	ReplyType_ON_QUEUED     ReplyType = 2
	ReplyType_ON_COMPLETION ReplyType = 4
	ReplyType_ALL_STEPS     ReplyType = 255
)

// Enum value maps for ReplyType.
var (
	ReplyType_name = map[int32]string{
		0:   "NONE",
		1:   "ON_RECEPTION",
		2:   "ON_QUEUED",
		4:   "ON_COMPLETION",
		255: "ALL_STEPS",
	}
	ReplyType_value = map[string]int32{
		"NONE":          0,
		"ON_RECEPTION":  1,
		"ON_QUEUED":     2,
		"ON_COMPLETION": 4,
		"ALL_STEPS":     255,
	}
)

func (x ReplyType) Enum() *ReplyType {
	p := new(ReplyType)
	*p = x
	return p
}

func (x ReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[15].Descriptor()
}

func (ReplyType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[15]
}

func (x ReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplyType(num)
	return nil
}

// Deprecated: Use ReplyType.Descriptor instead.
func (ReplyType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{15}
}

// services exported by various entities
type ServiceType int32

const (
	ServiceType_ST_LOGGING             ServiceType = 1
	ServiceType_ST_CONFIG              ServiceType = 2
	ServiceType_ST_REDIS               ServiceType = 3
	ServiceType_ST_HTTP                ServiceType = 4
	ServiceType_ST_HTTPS               ServiceType = 5
	ServiceType_ST_WEBSOCKET           ServiceType = 6
	ServiceType_ST_WEBSOCKETS          ServiceType = 7
	ServiceType_ST_RTAPI_COMMAND       ServiceType = 8
	ServiceType_ST_STP_HALGROUP        ServiceType = 9
	ServiceType_ST_STP_HALRCOMP        ServiceType = 10
	ServiceType_ST_STP_INTERP          ServiceType = 11
	ServiceType_ST_STP_TASK            ServiceType = 12
	ServiceType_ST_HAL_RCOMMAND        ServiceType = 13
	ServiceType_ST_TASK_COMMAND        ServiceType = 14
	ServiceType_ST_INTERP_COMMAND      ServiceType = 15
	ServiceType_ST_MESSAGEBUS_COMMAND  ServiceType = 16
	ServiceType_ST_MESSAGEBUS_RESPONSE ServiceType = 17
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		1:  "ST_LOGGING",
		2:  "ST_CONFIG",
		3:  "ST_REDIS",
		4:  "ST_HTTP",
		5:  "ST_HTTPS",
		6:  "ST_WEBSOCKET",
		7:  "ST_WEBSOCKETS",
		8:  "ST_RTAPI_COMMAND",
		9:  "ST_STP_HALGROUP",
		10: "ST_STP_HALRCOMP",
		11: "ST_STP_INTERP",
		12: "ST_STP_TASK",
		13: "ST_HAL_RCOMMAND",
		14: "ST_TASK_COMMAND",
		15: "ST_INTERP_COMMAND",
		16: "ST_MESSAGEBUS_COMMAND",
		17: "ST_MESSAGEBUS_RESPONSE",
	}
	ServiceType_value = map[string]int32{
		"ST_LOGGING":             1,
		"ST_CONFIG":              2,
		"ST_REDIS":               3,
		"ST_HTTP":                4,
		"ST_HTTPS":               5,
		"ST_WEBSOCKET":           6,
		"ST_WEBSOCKETS":          7,
		"ST_RTAPI_COMMAND":       8,
		"ST_STP_HALGROUP":        9,
		"ST_STP_HALRCOMP":        10,
		"ST_STP_INTERP":          11,
		"ST_STP_TASK":            12,
		"ST_HAL_RCOMMAND":        13,
		"ST_TASK_COMMAND":        14,
		"ST_INTERP_COMMAND":      15,
		"ST_MESSAGEBUS_COMMAND":  16,
		"ST_MESSAGEBUS_RESPONSE": 17,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[16].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[16]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceType(num)
	return nil
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{16}
}

type ServiceAPI int32

const (
	ServiceAPI_SA_ZMQ_PROTOBUF ServiceAPI = 1
	ServiceAPI_SA_WS_JSON      ServiceAPI = 2
)

// Enum value maps for ServiceAPI.
var (
	ServiceAPI_name = map[int32]string{
		1: "SA_ZMQ_PROTOBUF",
		2: "SA_WS_JSON",
	}
	ServiceAPI_value = map[string]int32{
		"SA_ZMQ_PROTOBUF": 1,
		"SA_WS_JSON":      2,
	}
)

func (x ServiceAPI) Enum() *ServiceAPI {
	p := new(ServiceAPI)
	*p = x
	return p
}

func (x ServiceAPI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceAPI) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[17].Descriptor()
}

func (ServiceAPI) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[17]
}

func (x ServiceAPI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceAPI) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceAPI(num)
	return nil
}

// Deprecated: Use ServiceAPI.Descriptor instead.
func (ServiceAPI) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{17}
}

type ContainerType int32

const (
	ContainerType_MT_RTMESSAGE        ContainerType = 2
	ContainerType_MT_MOTCMD           ContainerType = 3
	ContainerType_MT_MOTSTATUS        ContainerType = 4
	ContainerType_MT_LEGACY_MOTCMD    ContainerType = 5
	ContainerType_MT_LEGACY_MOTSTATUS ContainerType = 6
	ContainerType_MT_WOU              ContainerType = 7
	ContainerType_MT_HALUPDATE        ContainerType = 8
	ContainerType_MT_RTAPI_MESSAGE    ContainerType = 9
	ContainerType_MT_LOG_MESSAGE      ContainerType = 10
	ContainerType_MT_PREVIEW          ContainerType = 11
	ContainerType_MT_PROGRESS         ContainerType = 12
	ContainerType_MT_INTERP_STAT      ContainerType = 13
	ContainerType_MT_SYSLOG           ContainerType = 18
	ContainerType_MT_LEGACY_NML       ContainerType = 19
	ContainerType_MT_LEGACY_MOTCONFIG ContainerType = 20
	//    MT_HALUPDATE_FULL  = 25;
	ContainerType_MT_STP_UPDATE_FULL ContainerType = 26
	ContainerType_MT_STP_UPDATE      ContainerType = 28
	ContainerType_MT_STP_NOGROUP     ContainerType = 27
	// MT_OFFER          = 30;
	// MT_CONFIRM_OFFER  = 35;
	// MT_DISPLAY_MESSAGE = 40;
	ContainerType_MT_SHUTDOWN         ContainerType = 45
	ContainerType_MT_CONFIRM_SHUTDOWN ContainerType = 50
	// identification of individual RTMessage submessages
	// field Container.rtmessage
	ContainerType_MT_RTMESSAGE0       ContainerType = 30
	ContainerType_MT_RTMESSAGE1       ContainerType = 31
	ContainerType_MT_RTMESSAGE2       ContainerType = 32
	ContainerType_MT_RTMESSAGE3       ContainerType = 33
	ContainerType_MT_RTMESSAGE4       ContainerType = 34
	ContainerType_MT_ASCII            ContainerType = 100
	ContainerType_MT_UNICODE          ContainerType = 101
	ContainerType_MT_GCODE            ContainerType = 102
	ContainerType_MT_PYTHON           ContainerType = 103
	ContainerType_MT_PICKLE           ContainerType = 104
	ContainerType_MT_TCL              ContainerType = 105
	ContainerType_MT_XML              ContainerType = 106
	ContainerType_MT_JSON             ContainerType = 107
	ContainerType_MT_JPEG             ContainerType = 108
	ContainerType_MT_PNG              ContainerType = 109
	ContainerType_MT_TIFF             ContainerType = 110
	ContainerType_MT_POSTSCRIPT       ContainerType = 111
	ContainerType_MT_SVG              ContainerType = 112
	ContainerType_MT_ZMQ_SUBSCRIBE    ContainerType = 150
	ContainerType_MT_ZMQ_UNSUBSCRIBE  ContainerType = 151
	ContainerType_MT_PING             ContainerType = 210 // keepalive test
	ContainerType_MT_PING_ACKNOWLEDGE ContainerType = 215
	ContainerType_MT_REJECT           ContainerType = 220
	ContainerType_MT_DONE             ContainerType = 240
	// ask for a specific list of services as specified in a ServiceRequest
	ContainerType_MT_SERVICE_REQUEST ContainerType = 250
	// respond to the above with one or several ServiceDescription messages
	ContainerType_MT_SERVICE_ANNOUNCEMENT ContainerType = 251
	// query for all available services
	ContainerType_MT_SERVICE_PROBE ContainerType = 252
	// error message generated by messagebus
	// also fills in note, destinaton
	ContainerType_MT_MESSAGEBUS_NO_DESTINATION ContainerType = 255
	// rcomp creation and binding
	ContainerType_MT_HALRCOMP_BIND         ContainerType = 256
	ContainerType_MT_HALRCOMP_BIND_CONFIRM ContainerType = 257
	ContainerType_MT_HALRCOMP_BIND_REJECT  ContainerType = 258
	// the following to a similar to MT_HALRCOMMAND_SET and  MT_HALRCOMMAND_GET, except
	// in the context of HALRcomp, only pins and params are evaluated
	// also, to set a pin or param, it must have direction HAL_OUT or HAL_IO
	ContainerType_MT_HALRCOMP_SET        ContainerType = 259
	ContainerType_MT_HALRCOMP_SET_REJECT ContainerType = 260
	ContainerType_MT_HALRCOMP_ACK        ContainerType = 263
	// HAL object general setter/getter operations
	// these work as viewed from halcmd and include signals
	ContainerType_MT_HALRCOMMAND_SET           ContainerType = 265
	ContainerType_MT_HALRCOMMAND_SET_REJECT    ContainerType = 266
	ContainerType_MT_HALRCOMMAND_GET           ContainerType = 267
	ContainerType_MT_HALRCOMMAND_GET_REJECT    ContainerType = 268
	ContainerType_MT_HALRCOMMAND_CREATE        ContainerType = 269
	ContainerType_MT_HALRCOMMAND_CREATE_REJECT ContainerType = 270
	ContainerType_MT_HALRCOMMAND_DELETE        ContainerType = 271
	ContainerType_MT_HALRCOMMAND_DELETE_REJECT ContainerType = 272
	ContainerType_MT_HALRCOMMAND_ACK           ContainerType = 273
	ContainerType_MT_HALRCOMMAND_ERROR         ContainerType = 274
	// introspection request
	ContainerType_MT_HALRCOMMAND_DESCRIBE ContainerType = 276
	// full HAL description
	ContainerType_MT_HALRCOMMAND_DESCRIPTION ContainerType = 277
	// rcomp tracking
	ContainerType_MT_HALRCOMP_FULL_UPDATE        ContainerType = 288
	ContainerType_MT_HALRCOMP_INCREMENTAL_UPDATE ContainerType = 289
	ContainerType_MT_HALRCOMP_ERROR              ContainerType = 290
	// group creation and binding
	ContainerType_MT_HALGROUP_BIND         ContainerType = 294
	ContainerType_MT_HALGROUP_BIND_CONFIRM ContainerType = 295
	ContainerType_MT_HALGROUP_BIND_REJECT  ContainerType = 296
	// group tracking
	ContainerType_MT_HALGROUP_FULL_UPDATE        ContainerType = 297
	ContainerType_MT_HALGROUP_INCREMENTAL_UPDATE ContainerType = 298
	ContainerType_MT_HALGROUP_ERROR              ContainerType = 299
	// rtapi_app commands from halcmd:
	ContainerType_MT_RTAPI_APP_EXIT      ContainerType = 300
	ContainerType_MT_RTAPI_APP_PING      ContainerType = 301
	ContainerType_MT_RTAPI_APP_LOADRT    ContainerType = 302
	ContainerType_MT_RTAPI_APP_LOG       ContainerType = 303
	ContainerType_MT_RTAPI_APP_UNLOADRT  ContainerType = 305
	ContainerType_MT_RTAPI_APP_NEWINST   ContainerType = 306
	ContainerType_MT_RTAPI_APP_NEWTHREAD ContainerType = 307
	ContainerType_MT_RTAPI_APP_DELTHREAD ContainerType = 308
	ContainerType_MT_RTAPI_APP_CALLFUNC  ContainerType = 309
	ContainerType_MT_RTAPI_APP_REPLY     ContainerType = 310
	ContainerType_MT_RTAPI_APP_DELINST   ContainerType = 311
	// application discovery
	ContainerType_MT_LIST_APPLICATIONS ContainerType = 350
	// this is answered with a MT_DESCRIBE_APPLICATION type
	// and repeated field apps
	// (see message Application)
	ContainerType_MT_DESCRIBE_APPLICATION ContainerType = 351
	ContainerType_MT_RETRIEVE_APPLICATION ContainerType = 352
	// this is answered with a MT_APPLICATION_DETAIL type and
	// a single field apps
	// BUT all files and config items are attached in the
	// message Application
	ContainerType_MT_APPLICATION_DETAIL ContainerType = 353
	// generic error reply. note field contains explanation.
	ContainerType_MT_ERROR ContainerType = 360
	// generic full update and incremental update
	ContainerType_MT_FULL_UPDATE        ContainerType = 370
	ContainerType_MT_INCREMENTAL_UPDATE ContainerType = 371
	// task/client comms
	ContainerType_MT_TASK_REPLY    ContainerType = 400
	ContainerType_MT_TICKET_UPDATE ContainerType = 401
	// credit-based flow control for queues
	ContainerType_MT_CREDIT_UPDATE ContainerType = 450 // sent by consumer
	// adjust this to be below lowest motion message type
	ContainerType_MT_EMCMOT_LOWER ContainerType = 1000
	// adjust this to be above highest motion message type
	ContainerType_MT_EMCMOT_UPPER ContainerType = 1100 // neded for the  is_Motion_container(msgtype) test in container.hh
	// --- snip ---
	ContainerType_MT_EMCMOT_ABORT                   ContainerType = 1001
	ContainerType_MT_EMCMOT_AXIS_ABORT              ContainerType = 1002
	ContainerType_MT_EMCMOT_ENABLE                  ContainerType = 1003
	ContainerType_MT_EMCMOT_DISABLE                 ContainerType = 1004
	ContainerType_MT_EMCMOT_ENABLE_AMPLIFIER        ContainerType = 1005
	ContainerType_MT_EMCMOT_DISABLE_AMPLIFIER       ContainerType = 1006
	ContainerType_MT_EMCMOT_ENABLE_WATCHDOG         ContainerType = 1007
	ContainerType_MT_EMCMOT_DISABLE_WATCHDOG        ContainerType = 1008
	ContainerType_MT_EMCMOT_ACTIVATE_JOINT          ContainerType = 1009
	ContainerType_MT_EMCMOT_DEACTIVATE_JOINT        ContainerType = 1010
	ContainerType_MT_EMCMOT_PAUSE                   ContainerType = 1011
	ContainerType_MT_EMCMOT_RESUME                  ContainerType = 1012
	ContainerType_MT_EMCMOT_STEP                    ContainerType = 1013
	ContainerType_MT_EMCMOT_FREE                    ContainerType = 1014
	ContainerType_MT_EMCMOT_COORD                   ContainerType = 1015
	ContainerType_MT_EMCMOT_TELEOP                  ContainerType = 1016
	ContainerType_MT_EMCMOT_SPINDLE_SCALE           ContainerType = 1017
	ContainerType_MT_EMCMOT_SS_ENABLE               ContainerType = 1018
	ContainerType_MT_EMCMOT_FEED_SCALE              ContainerType = 1019
	ContainerType_MT_EMCMOT_FS_ENABLE               ContainerType = 1020
	ContainerType_MT_EMCMOT_FH_ENABLE               ContainerType = 1021
	ContainerType_MT_EMCMOT_AF_ENABLE               ContainerType = 1022
	ContainerType_MT_EMCMOT_OVERRIDE_LIMITS         ContainerType = 1023
	ContainerType_MT_EMCMOT_HOME                    ContainerType = 1024
	ContainerType_MT_EMCMOT_UNHOME                  ContainerType = 1025
	ContainerType_MT_EMCMOT_JOG_CONT                ContainerType = 1026
	ContainerType_MT_EMCMOT_JOG_INCR                ContainerType = 1027
	ContainerType_MT_EMCMOT_JOG_ABS                 ContainerType = 1028
	ContainerType_MT_EMCMOT_SET_LINE                ContainerType = 1029
	ContainerType_MT_EMCMOT_SET_CIRCLE              ContainerType = 1030
	ContainerType_MT_EMCMOT_SET_TELEOP_VECTOR       ContainerType = 1031
	ContainerType_MT_EMCMOT_CLEAR_PROBE_FLAGS       ContainerType = 1032
	ContainerType_MT_EMCMOT_PROBE                   ContainerType = 1033
	ContainerType_MT_EMCMOT_RIGID_TAP               ContainerType = 1034
	ContainerType_MT_EMCMOT_SET_POSITION_LIMITS     ContainerType = 1035
	ContainerType_MT_EMCMOT_SET_BACKLASH            ContainerType = 1036
	ContainerType_MT_EMCMOT_SET_MIN_FERROR          ContainerType = 1037
	ContainerType_MT_EMCMOT_SET_MAX_FERROR          ContainerType = 1038
	ContainerType_MT_EMCMOT_SET_VEL                 ContainerType = 1039
	ContainerType_MT_EMCMOT_SET_VEL_LIMIT           ContainerType = 1040
	ContainerType_MT_EMCMOT_SET_JOINT_VEL_LIMIT     ContainerType = 1041
	ContainerType_MT_EMCMOT_SET_JOINT_ACC_LIMIT     ContainerType = 1042
	ContainerType_MT_EMCMOT_SET_ACC                 ContainerType = 1043
	ContainerType_MT_EMCMOT_SET_TERM_COND           ContainerType = 1044
	ContainerType_MT_EMCMOT_SET_NUM_AXES            ContainerType = 1045
	ContainerType_MT_EMCMOT_SET_WORLD_HOME          ContainerType = 1046
	ContainerType_MT_EMCMOT_SET_HOMING_PARAMS       ContainerType = 1047
	ContainerType_MT_EMCMOT_SET_DEBUG               ContainerType = 1048
	ContainerType_MT_EMCMOT_SET_DOUT                ContainerType = 1049
	ContainerType_MT_EMCMOT_SET_AOUT                ContainerType = 1050
	ContainerType_MT_EMCMOT_SET_SPINDLESYNC         ContainerType = 1051
	ContainerType_MT_EMCMOT_SPINDLE_ON              ContainerType = 1052
	ContainerType_MT_EMCMOT_SPINDLE_OFF             ContainerType = 1053
	ContainerType_MT_EMCMOT_SPINDLE_INCREASE        ContainerType = 1054
	ContainerType_MT_EMCMOT_SPINDLE_DECREASE        ContainerType = 1055
	ContainerType_MT_EMCMOT_SPINDLE_BRAKE_ENGAGE    ContainerType = 1056
	ContainerType_MT_EMCMOT_SPINDLE_BRAKE_RELEASE   ContainerType = 1057
	ContainerType_MT_EMCMOT_SET_MOTOR_OFFSET        ContainerType = 1058
	ContainerType_MT_EMCMOT_SET_JOINT_COMP          ContainerType = 1059
	ContainerType_MT_EMCMOT_SET_OFFSET              ContainerType = 1060
	ContainerType_MT_EMCMOT_COMMAND_OK              ContainerType = 1061
	ContainerType_MT_EMCMOT_COMMAND_UNKNOWN_COMMAND ContainerType = 1062
	ContainerType_MT_EMCMOT_COMMAND_INVALID_COMMAND ContainerType = 1063
	ContainerType_MT_EMCMOT_COMMAND_INVALID_PARAMS  ContainerType = 1064
	ContainerType_MT_EMCMOT_COMMAND_BAD_EXEC        ContainerType = 1065
	ContainerType_MT_EMCMOT_MOTION_DISABLED         ContainerType = 1066
	ContainerType_MT_EMCMOT_MOTION_FREE             ContainerType = 1067
	ContainerType_MT_EMCMOT_MOTION_TELEOP           ContainerType = 1068
	ContainerType_MT_EMCMOT_MOTION_COORD            ContainerType = 1069
	ContainerType_MT_EMCMOT_JOINT_FLAG              ContainerType = 1070
	ContainerType_MT_EMCMOT_MOTION_FLAG             ContainerType = 1071 // --- snip ---
	ContainerType_MT_PRU_FIRMWARE                   ContainerType = 2048
	// Mesanet firmware types: 3000 - 3999
	ContainerType_MT_MESA_5I20_FIRMWARE ContainerType = 3000
	// a blob of unspecified content - for temporary use during development
	ContainerType_MT_BLOB ContainerType = 4000
	// test message range: 5000-5100 - never used by core code
	ContainerType_MT_TEST1 ContainerType = 5001
	ContainerType_MT_TEST2 ContainerType = 5002
	ContainerType_MT_TEST3 ContainerType = 5003
	// adjust this to be below lowest NML message type
	ContainerType_MT_EMC_NML_LOWER ContainerType = 10000
	// adjust this to be above highest NML message type
	ContainerType_MT_EMC_NML_UPPER ContainerType = 13000 // neded for the  is_NML_container(msgtype) test in container.hh
	// --- snip ---
	ContainerType_MT_EMC_OPERATOR_ERROR                ContainerType = 10011
	ContainerType_MT_EMC_OPERATOR_TEXT                 ContainerType = 10012
	ContainerType_MT_EMC_OPERATOR_DISPLAY              ContainerType = 10013
	ContainerType_MT_EMC_NULL                          ContainerType = 10021
	ContainerType_MT_EMC_SET_DEBUG                     ContainerType = 10022
	ContainerType_MT_EMC_SYSTEM_CMD                    ContainerType = 10030
	ContainerType_MT_EMC_AXIS_SET_AXIS                 ContainerType = 10101
	ContainerType_MT_EMC_AXIS_SET_UNITS                ContainerType = 10102
	ContainerType_MT_EMC_AXIS_SET_MIN_POSITION_LIMIT   ContainerType = 10107
	ContainerType_MT_EMC_AXIS_SET_MAX_POSITION_LIMIT   ContainerType = 10108
	ContainerType_MT_EMC_TOOL_START_CHANGE             ContainerType = 1110
	ContainerType_MT_EMC_EXEC_PLUGIN_CALL              ContainerType = 1112
	ContainerType_MT_EMC_IO_PLUGIN_CALL                ContainerType = 1113
	ContainerType_MT_EMC_AXIS_SET_FERROR               ContainerType = 10111
	ContainerType_MT_EMC_AXIS_SET_HOMING_PARAMS        ContainerType = 10112
	ContainerType_MT_EMC_AXIS_SET_MIN_FERROR           ContainerType = 10115
	ContainerType_MT_EMC_AXIS_SET_MAX_VELOCITY         ContainerType = 10116
	ContainerType_MT_EMC_AXIS_INIT                     ContainerType = 10118
	ContainerType_MT_EMC_AXIS_HALT                     ContainerType = 10119
	ContainerType_MT_EMC_AXIS_ABORT                    ContainerType = 10120
	ContainerType_MT_EMC_AXIS_ENABLE                   ContainerType = 10121
	ContainerType_MT_EMC_AXIS_DISABLE                  ContainerType = 10122
	ContainerType_MT_EMC_AXIS_HOME                     ContainerType = 10123
	ContainerType_MT_EMC_AXIS_UNHOME                   ContainerType = 10135
	ContainerType_MT_EMC_AXIS_JOG                      ContainerType = 10124
	ContainerType_MT_EMC_AXIS_INCR_JOG                 ContainerType = 10125
	ContainerType_MT_EMC_AXIS_ABS_JOG                  ContainerType = 10126
	ContainerType_MT_EMC_AXIS_ACTIVATE                 ContainerType = 10127
	ContainerType_MT_EMC_AXIS_DEACTIVATE               ContainerType = 10128
	ContainerType_MT_EMC_AXIS_OVERRIDE_LIMITS          ContainerType = 10129
	ContainerType_MT_EMC_AXIS_LOAD_COMP                ContainerType = 10131
	ContainerType_MT_EMC_AXIS_SET_BACKLASH             ContainerType = 10134
	ContainerType_MT_EMC_AXIS_STAT                     ContainerType = 10199
	ContainerType_MT_EMC_TRAJ_SET_AXES                 ContainerType = 10201
	ContainerType_MT_EMC_TRAJ_SET_UNITS                ContainerType = 10202
	ContainerType_MT_EMC_TRAJ_SET_CYCLE_TIME           ContainerType = 10203
	ContainerType_MT_EMC_TRAJ_SET_MODE                 ContainerType = 10204
	ContainerType_MT_EMC_TRAJ_SET_VELOCITY             ContainerType = 10205
	ContainerType_MT_EMC_TRAJ_SET_ACCELERATION         ContainerType = 10206
	ContainerType_MT_EMC_TRAJ_SET_MAX_VELOCITY         ContainerType = 10207
	ContainerType_MT_EMC_TRAJ_SET_MAX_ACCELERATION     ContainerType = 10208
	ContainerType_MT_EMC_TRAJ_SET_SCALE                ContainerType = 10209
	ContainerType_MT_EMC_TRAJ_SET_MOTION_ID            ContainerType = 10210
	ContainerType_MT_EMC_TRAJ_INIT                     ContainerType = 10211
	ContainerType_MT_EMC_TRAJ_HALT                     ContainerType = 10212
	ContainerType_MT_EMC_TRAJ_ENABLE                   ContainerType = 10213
	ContainerType_MT_EMC_TRAJ_DISABLE                  ContainerType = 10214
	ContainerType_MT_EMC_TRAJ_ABORT                    ContainerType = 10215
	ContainerType_MT_EMC_TRAJ_PAUSE                    ContainerType = 10216
	ContainerType_MT_EMC_TRAJ_STEP                     ContainerType = 10217
	ContainerType_MT_EMC_TRAJ_RESUME                   ContainerType = 10218
	ContainerType_MT_EMC_TRAJ_DELAY                    ContainerType = 10219
	ContainerType_MT_EMC_TRAJ_LINEAR_MOVE              ContainerType = 10220
	ContainerType_MT_EMC_TRAJ_CIRCULAR_MOVE            ContainerType = 10221
	ContainerType_MT_EMC_TRAJ_SET_TERM_COND            ContainerType = 10222
	ContainerType_MT_EMC_TRAJ_SET_OFFSET               ContainerType = 10223
	ContainerType_MT_EMC_TRAJ_SET_G5X                  ContainerType = 10224
	ContainerType_MT_EMC_TRAJ_SET_HOME                 ContainerType = 10225
	ContainerType_MT_EMC_TRAJ_SET_ROTATION             ContainerType = 10226
	ContainerType_MT_EMC_TRAJ_SET_G92                  ContainerType = 10227
	ContainerType_MT_EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG ContainerType = 10228
	ContainerType_MT_EMC_TRAJ_PROBE                    ContainerType = 10229
	ContainerType_MT_EMC_TRAJ_SET_TELEOP_ENABLE        ContainerType = 10230
	ContainerType_MT_EMC_TRAJ_SET_TELEOP_VECTOR        ContainerType = 10231
	ContainerType_MT_EMC_TRAJ_SET_SPINDLESYNC          ContainerType = 10232
	ContainerType_MT_EMC_TRAJ_SET_SPINDLE_SCALE        ContainerType = 10233
	ContainerType_MT_EMC_TRAJ_SET_FO_ENABLE            ContainerType = 10234
	ContainerType_MT_EMC_TRAJ_SET_SO_ENABLE            ContainerType = 10235
	ContainerType_MT_EMC_TRAJ_SET_FH_ENABLE            ContainerType = 10236
	ContainerType_MT_EMC_TRAJ_RIGID_TAP                ContainerType = 10237
	ContainerType_MT_EMC_TRAJ_SET_RAPID_SCALE          ContainerType = 10238
	ContainerType_MT_EMC_TRAJ_STAT                     ContainerType = 10299
	ContainerType_MT_EMC_MOTION_INIT                   ContainerType = 10301
	ContainerType_MT_EMC_MOTION_HALT                   ContainerType = 10302
	ContainerType_MT_EMC_MOTION_ABORT                  ContainerType = 10303
	ContainerType_MT_EMC_MOTION_SET_AOUT               ContainerType = 10304
	ContainerType_MT_EMC_MOTION_SET_DOUT               ContainerType = 10305
	ContainerType_MT_EMC_MOTION_ADAPTIVE               ContainerType = 10306
	ContainerType_MT_EMC_SPINDLE_ORIENT                ContainerType = 10317
	ContainerType_MT_EMC_SPINDLE_WAIT_ORIENT_COMPLETE  ContainerType = 10318
	ContainerType_MT_EMC_MOTION_STAT                   ContainerType = 10399
	ContainerType_MT_EMC_TASK_INIT                     ContainerType = 10501
	ContainerType_MT_EMC_TASK_HALT                     ContainerType = 10502
	ContainerType_MT_EMC_TASK_ABORT                    ContainerType = 10503
	ContainerType_MT_EMC_TASK_SET_MODE                 ContainerType = 10504
	ContainerType_MT_EMC_TASK_SET_STATE                ContainerType = 10505
	ContainerType_MT_EMC_TASK_PLAN_OPEN                ContainerType = 10506
	ContainerType_MT_EMC_TASK_PLAN_RUN                 ContainerType = 10507
	ContainerType_MT_EMC_TASK_PLAN_READ                ContainerType = 10508
	ContainerType_MT_EMC_TASK_PLAN_EXECUTE             ContainerType = 10509
	ContainerType_MT_EMC_TASK_PLAN_PAUSE               ContainerType = 10510
	ContainerType_MT_EMC_TASK_PLAN_STEP                ContainerType = 10511
	ContainerType_MT_EMC_TASK_PLAN_RESUME              ContainerType = 10512
	ContainerType_MT_EMC_TASK_PLAN_END                 ContainerType = 10513
	ContainerType_MT_EMC_TASK_PLAN_CLOSE               ContainerType = 10514
	ContainerType_MT_EMC_TASK_PLAN_INIT                ContainerType = 10515
	ContainerType_MT_EMC_TASK_PLAN_SYNCH               ContainerType = 10516
	ContainerType_MT_EMC_TASK_PLAN_SET_OPTIONAL_STOP   ContainerType = 10517
	ContainerType_MT_EMC_TASK_PLAN_SET_BLOCK_DELETE    ContainerType = 10518
	ContainerType_MT_EMC_TASK_PLAN_OPTIONAL_STOP       ContainerType = 10519
	ContainerType_MT_EMC_TASK_PLAN_RESET               ContainerType = 10520
	ContainerType_MT_EMC_TASK_PLAN_REPLY               ContainerType = 10530
	ContainerType_MT_EMC_TASK_STAT                     ContainerType = 10599
	ContainerType_MT_EMC_TOOL_INIT                     ContainerType = 11101
	ContainerType_MT_EMC_TOOL_HALT                     ContainerType = 11102
	ContainerType_MT_EMC_TOOL_ABORT                    ContainerType = 11103
	ContainerType_MT_EMC_TOOL_PREPARE                  ContainerType = 11104
	ContainerType_MT_EMC_TOOL_LOAD                     ContainerType = 11105
	ContainerType_MT_EMC_TOOL_UNLOAD                   ContainerType = 11106
	ContainerType_MT_EMC_TOOL_LOAD_TOOL_TABLE          ContainerType = 11107
	ContainerType_MT_EMC_TOOL_SET_OFFSET               ContainerType = 11108
	ContainerType_MT_EMC_TOOL_SET_NUMBER               ContainerType = 11109
	ContainerType_MT_EMC_TOOL_UPDATE_TOOL_TABLE        ContainerType = 11110
	ContainerType_MT_EMC_TOOL_STAT                     ContainerType = 11199
	ContainerType_MT_EMC_AUX_ESTOP_ON                  ContainerType = 11206
	ContainerType_MT_EMC_AUX_ESTOP_OFF                 ContainerType = 11207
	ContainerType_MT_EMC_AUX_ESTOP_RESET               ContainerType = 11208
	ContainerType_MT_EMC_AUX_INPUT_WAIT                ContainerType = 11209
	ContainerType_MT_EMC_AUX_STAT                      ContainerType = 11299
	ContainerType_MT_EMC_SPINDLE_ON                    ContainerType = 11304
	ContainerType_MT_EMC_SPINDLE_OFF                   ContainerType = 11305
	ContainerType_MT_EMC_SPINDLE_INCREASE              ContainerType = 11309
	ContainerType_MT_EMC_SPINDLE_DECREASE              ContainerType = 11310
	ContainerType_MT_EMC_SPINDLE_CONSTANT              ContainerType = 11311
	ContainerType_MT_EMC_SPINDLE_BRAKE_RELEASE         ContainerType = 11312
	ContainerType_MT_EMC_SPINDLE_BRAKE_ENGAGE          ContainerType = 11313
	ContainerType_MT_EMC_SPINDLE_SPEED                 ContainerType = 11316
	ContainerType_MT_EMC_SPINDLE_STAT                  ContainerType = 11399
	ContainerType_MT_EMC_COOLANT_MIST_ON               ContainerType = 11404
	ContainerType_MT_EMC_COOLANT_MIST_OFF              ContainerType = 11405
	ContainerType_MT_EMC_COOLANT_FLOOD_ON              ContainerType = 11406
	ContainerType_MT_EMC_COOLANT_FLOOD_OFF             ContainerType = 11407
	ContainerType_MT_EMC_COOLANT_STAT                  ContainerType = 11499
	ContainerType_MT_EMC_LUBE_ON                       ContainerType = 11504
	ContainerType_MT_EMC_LUBE_OFF                      ContainerType = 11505
	ContainerType_MT_EMC_LUBE_STAT                     ContainerType = 11599
	ContainerType_MT_EMC_IO_INIT                       ContainerType = 11601
	ContainerType_MT_EMC_IO_HALT                       ContainerType = 11602
	ContainerType_MT_EMC_IO_ABORT                      ContainerType = 11603
	ContainerType_MT_EMC_IO_SET_CYCLE_TIME             ContainerType = 11604
	ContainerType_MT_EMC_IO_STAT                       ContainerType = 11699
	ContainerType_MT_EMC_INIT                          ContainerType = 11901
	ContainerType_MT_EMC_HALT                          ContainerType = 11902
	ContainerType_MT_EMC_ABORT                         ContainerType = 11903
	ContainerType_MT_EMC_STAT                          ContainerType = 11999 // --- snip ---
	// EMC status
	ContainerType_MT_EMCSTAT_FULL_UPDATE        ContainerType = 12500
	ContainerType_MT_EMCSTAT_INCREMENTAL_UPDATE ContainerType = 12501
	// EMC error
	ContainerType_MT_EMC_NML_ERROR   ContainerType = 12510
	ContainerType_MT_EMC_NML_TEXT    ContainerType = 12511
	ContainerType_MT_EMC_NML_DISPLAY ContainerType = 12512
	// EMC command
	ContainerType_MT_EMCCMD_EXECUTED  ContainerType = 12520
	ContainerType_MT_EMCCMD_COMPLETED ContainerType = 12521
	// launcher pub-sub
	ContainerType_MT_LAUNCHER_FULL_UPDATE        ContainerType = 12600
	ContainerType_MT_LAUNCHER_INCREMENTAL_UPDATE ContainerType = 12601
	ContainerType_MT_LAUNCHER_ERROR              ContainerType = 12602
	// launcher command
	ContainerType_MT_LAUNCHER_START       ContainerType = 12610
	ContainerType_MT_LAUNCHER_TERMINATE   ContainerType = 12611
	ContainerType_MT_LAUNCHER_KILL        ContainerType = 12612
	ContainerType_MT_LAUNCHER_WRITE_STDIN ContainerType = 12613
	ContainerType_MT_LAUNCHER_CALL        ContainerType = 12614
	ContainerType_MT_LAUNCHER_SHUTDOWN    ContainerType = 12615
	ContainerType_MT_LAUNCHER_SET         ContainerType = 12616
)

// Enum value maps for ContainerType.
var (
	ContainerType_name = map[int32]string{
		2:     "MT_RTMESSAGE",
		3:     "MT_MOTCMD",
		4:     "MT_MOTSTATUS",
		5:     "MT_LEGACY_MOTCMD",
		6:     "MT_LEGACY_MOTSTATUS",
		7:     "MT_WOU",
		8:     "MT_HALUPDATE",
		9:     "MT_RTAPI_MESSAGE",
		10:    "MT_LOG_MESSAGE",
		11:    "MT_PREVIEW",
		12:    "MT_PROGRESS",
		13:    "MT_INTERP_STAT",
		18:    "MT_SYSLOG",
		19:    "MT_LEGACY_NML",
		20:    "MT_LEGACY_MOTCONFIG",
		26:    "MT_STP_UPDATE_FULL",
		28:    "MT_STP_UPDATE",
		27:    "MT_STP_NOGROUP",
		45:    "MT_SHUTDOWN",
		50:    "MT_CONFIRM_SHUTDOWN",
		30:    "MT_RTMESSAGE0",
		31:    "MT_RTMESSAGE1",
		32:    "MT_RTMESSAGE2",
		33:    "MT_RTMESSAGE3",
		34:    "MT_RTMESSAGE4",
		100:   "MT_ASCII",
		101:   "MT_UNICODE",
		102:   "MT_GCODE",
		103:   "MT_PYTHON",
		104:   "MT_PICKLE",
		105:   "MT_TCL",
		106:   "MT_XML",
		107:   "MT_JSON",
		108:   "MT_JPEG",
		109:   "MT_PNG",
		110:   "MT_TIFF",
		111:   "MT_POSTSCRIPT",
		112:   "MT_SVG",
		150:   "MT_ZMQ_SUBSCRIBE",
		151:   "MT_ZMQ_UNSUBSCRIBE",
		210:   "MT_PING",
		215:   "MT_PING_ACKNOWLEDGE",
		220:   "MT_REJECT",
		240:   "MT_DONE",
		250:   "MT_SERVICE_REQUEST",
		251:   "MT_SERVICE_ANNOUNCEMENT",
		252:   "MT_SERVICE_PROBE",
		255:   "MT_MESSAGEBUS_NO_DESTINATION",
		256:   "MT_HALRCOMP_BIND",
		257:   "MT_HALRCOMP_BIND_CONFIRM",
		258:   "MT_HALRCOMP_BIND_REJECT",
		259:   "MT_HALRCOMP_SET",
		260:   "MT_HALRCOMP_SET_REJECT",
		263:   "MT_HALRCOMP_ACK",
		265:   "MT_HALRCOMMAND_SET",
		266:   "MT_HALRCOMMAND_SET_REJECT",
		267:   "MT_HALRCOMMAND_GET",
		268:   "MT_HALRCOMMAND_GET_REJECT",
		269:   "MT_HALRCOMMAND_CREATE",
		270:   "MT_HALRCOMMAND_CREATE_REJECT",
		271:   "MT_HALRCOMMAND_DELETE",
		272:   "MT_HALRCOMMAND_DELETE_REJECT",
		273:   "MT_HALRCOMMAND_ACK",
		274:   "MT_HALRCOMMAND_ERROR",
		276:   "MT_HALRCOMMAND_DESCRIBE",
		277:   "MT_HALRCOMMAND_DESCRIPTION",
		288:   "MT_HALRCOMP_FULL_UPDATE",
		289:   "MT_HALRCOMP_INCREMENTAL_UPDATE",
		290:   "MT_HALRCOMP_ERROR",
		294:   "MT_HALGROUP_BIND",
		295:   "MT_HALGROUP_BIND_CONFIRM",
		296:   "MT_HALGROUP_BIND_REJECT",
		297:   "MT_HALGROUP_FULL_UPDATE",
		298:   "MT_HALGROUP_INCREMENTAL_UPDATE",
		299:   "MT_HALGROUP_ERROR",
		300:   "MT_RTAPI_APP_EXIT",
		301:   "MT_RTAPI_APP_PING",
		302:   "MT_RTAPI_APP_LOADRT",
		303:   "MT_RTAPI_APP_LOG",
		305:   "MT_RTAPI_APP_UNLOADRT",
		306:   "MT_RTAPI_APP_NEWINST",
		307:   "MT_RTAPI_APP_NEWTHREAD",
		308:   "MT_RTAPI_APP_DELTHREAD",
		309:   "MT_RTAPI_APP_CALLFUNC",
		310:   "MT_RTAPI_APP_REPLY",
		311:   "MT_RTAPI_APP_DELINST",
		350:   "MT_LIST_APPLICATIONS",
		351:   "MT_DESCRIBE_APPLICATION",
		352:   "MT_RETRIEVE_APPLICATION",
		353:   "MT_APPLICATION_DETAIL",
		360:   "MT_ERROR",
		370:   "MT_FULL_UPDATE",
		371:   "MT_INCREMENTAL_UPDATE",
		400:   "MT_TASK_REPLY",
		401:   "MT_TICKET_UPDATE",
		450:   "MT_CREDIT_UPDATE",
		1000:  "MT_EMCMOT_LOWER",
		1100:  "MT_EMCMOT_UPPER",
		1001:  "MT_EMCMOT_ABORT",
		1002:  "MT_EMCMOT_AXIS_ABORT",
		1003:  "MT_EMCMOT_ENABLE",
		1004:  "MT_EMCMOT_DISABLE",
		1005:  "MT_EMCMOT_ENABLE_AMPLIFIER",
		1006:  "MT_EMCMOT_DISABLE_AMPLIFIER",
		1007:  "MT_EMCMOT_ENABLE_WATCHDOG",
		1008:  "MT_EMCMOT_DISABLE_WATCHDOG",
		1009:  "MT_EMCMOT_ACTIVATE_JOINT",
		1010:  "MT_EMCMOT_DEACTIVATE_JOINT",
		1011:  "MT_EMCMOT_PAUSE",
		1012:  "MT_EMCMOT_RESUME",
		1013:  "MT_EMCMOT_STEP",
		1014:  "MT_EMCMOT_FREE",
		1015:  "MT_EMCMOT_COORD",
		1016:  "MT_EMCMOT_TELEOP",
		1017:  "MT_EMCMOT_SPINDLE_SCALE",
		1018:  "MT_EMCMOT_SS_ENABLE",
		1019:  "MT_EMCMOT_FEED_SCALE",
		1020:  "MT_EMCMOT_FS_ENABLE",
		1021:  "MT_EMCMOT_FH_ENABLE",
		1022:  "MT_EMCMOT_AF_ENABLE",
		1023:  "MT_EMCMOT_OVERRIDE_LIMITS",
		1024:  "MT_EMCMOT_HOME",
		1025:  "MT_EMCMOT_UNHOME",
		1026:  "MT_EMCMOT_JOG_CONT",
		1027:  "MT_EMCMOT_JOG_INCR",
		1028:  "MT_EMCMOT_JOG_ABS",
		1029:  "MT_EMCMOT_SET_LINE",
		1030:  "MT_EMCMOT_SET_CIRCLE",
		1031:  "MT_EMCMOT_SET_TELEOP_VECTOR",
		1032:  "MT_EMCMOT_CLEAR_PROBE_FLAGS",
		1033:  "MT_EMCMOT_PROBE",
		1034:  "MT_EMCMOT_RIGID_TAP",
		1035:  "MT_EMCMOT_SET_POSITION_LIMITS",
		1036:  "MT_EMCMOT_SET_BACKLASH",
		1037:  "MT_EMCMOT_SET_MIN_FERROR",
		1038:  "MT_EMCMOT_SET_MAX_FERROR",
		1039:  "MT_EMCMOT_SET_VEL",
		1040:  "MT_EMCMOT_SET_VEL_LIMIT",
		1041:  "MT_EMCMOT_SET_JOINT_VEL_LIMIT",
		1042:  "MT_EMCMOT_SET_JOINT_ACC_LIMIT",
		1043:  "MT_EMCMOT_SET_ACC",
		1044:  "MT_EMCMOT_SET_TERM_COND",
		1045:  "MT_EMCMOT_SET_NUM_AXES",
		1046:  "MT_EMCMOT_SET_WORLD_HOME",
		1047:  "MT_EMCMOT_SET_HOMING_PARAMS",
		1048:  "MT_EMCMOT_SET_DEBUG",
		1049:  "MT_EMCMOT_SET_DOUT",
		1050:  "MT_EMCMOT_SET_AOUT",
		1051:  "MT_EMCMOT_SET_SPINDLESYNC",
		1052:  "MT_EMCMOT_SPINDLE_ON",
		1053:  "MT_EMCMOT_SPINDLE_OFF",
		1054:  "MT_EMCMOT_SPINDLE_INCREASE",
		1055:  "MT_EMCMOT_SPINDLE_DECREASE",
		1056:  "MT_EMCMOT_SPINDLE_BRAKE_ENGAGE",
		1057:  "MT_EMCMOT_SPINDLE_BRAKE_RELEASE",
		1058:  "MT_EMCMOT_SET_MOTOR_OFFSET",
		1059:  "MT_EMCMOT_SET_JOINT_COMP",
		1060:  "MT_EMCMOT_SET_OFFSET",
		1061:  "MT_EMCMOT_COMMAND_OK",
		1062:  "MT_EMCMOT_COMMAND_UNKNOWN_COMMAND",
		1063:  "MT_EMCMOT_COMMAND_INVALID_COMMAND",
		1064:  "MT_EMCMOT_COMMAND_INVALID_PARAMS",
		1065:  "MT_EMCMOT_COMMAND_BAD_EXEC",
		1066:  "MT_EMCMOT_MOTION_DISABLED",
		1067:  "MT_EMCMOT_MOTION_FREE",
		1068:  "MT_EMCMOT_MOTION_TELEOP",
		1069:  "MT_EMCMOT_MOTION_COORD",
		1070:  "MT_EMCMOT_JOINT_FLAG",
		1071:  "MT_EMCMOT_MOTION_FLAG",
		2048:  "MT_PRU_FIRMWARE",
		3000:  "MT_MESA_5I20_FIRMWARE",
		4000:  "MT_BLOB",
		5001:  "MT_TEST1",
		5002:  "MT_TEST2",
		5003:  "MT_TEST3",
		10000: "MT_EMC_NML_LOWER",
		13000: "MT_EMC_NML_UPPER",
		10011: "MT_EMC_OPERATOR_ERROR",
		10012: "MT_EMC_OPERATOR_TEXT",
		10013: "MT_EMC_OPERATOR_DISPLAY",
		10021: "MT_EMC_NULL",
		10022: "MT_EMC_SET_DEBUG",
		10030: "MT_EMC_SYSTEM_CMD",
		10101: "MT_EMC_AXIS_SET_AXIS",
		10102: "MT_EMC_AXIS_SET_UNITS",
		10107: "MT_EMC_AXIS_SET_MIN_POSITION_LIMIT",
		10108: "MT_EMC_AXIS_SET_MAX_POSITION_LIMIT",
		1110:  "MT_EMC_TOOL_START_CHANGE",
		1112:  "MT_EMC_EXEC_PLUGIN_CALL",
		1113:  "MT_EMC_IO_PLUGIN_CALL",
		10111: "MT_EMC_AXIS_SET_FERROR",
		10112: "MT_EMC_AXIS_SET_HOMING_PARAMS",
		10115: "MT_EMC_AXIS_SET_MIN_FERROR",
		10116: "MT_EMC_AXIS_SET_MAX_VELOCITY",
		10118: "MT_EMC_AXIS_INIT",
		10119: "MT_EMC_AXIS_HALT",
		10120: "MT_EMC_AXIS_ABORT",
		10121: "MT_EMC_AXIS_ENABLE",
		10122: "MT_EMC_AXIS_DISABLE",
		10123: "MT_EMC_AXIS_HOME",
		10135: "MT_EMC_AXIS_UNHOME",
		10124: "MT_EMC_AXIS_JOG",
		10125: "MT_EMC_AXIS_INCR_JOG",
		10126: "MT_EMC_AXIS_ABS_JOG",
		10127: "MT_EMC_AXIS_ACTIVATE",
		10128: "MT_EMC_AXIS_DEACTIVATE",
		10129: "MT_EMC_AXIS_OVERRIDE_LIMITS",
		10131: "MT_EMC_AXIS_LOAD_COMP",
		10134: "MT_EMC_AXIS_SET_BACKLASH",
		10199: "MT_EMC_AXIS_STAT",
		10201: "MT_EMC_TRAJ_SET_AXES",
		10202: "MT_EMC_TRAJ_SET_UNITS",
		10203: "MT_EMC_TRAJ_SET_CYCLE_TIME",
		10204: "MT_EMC_TRAJ_SET_MODE",
		10205: "MT_EMC_TRAJ_SET_VELOCITY",
		10206: "MT_EMC_TRAJ_SET_ACCELERATION",
		10207: "MT_EMC_TRAJ_SET_MAX_VELOCITY",
		10208: "MT_EMC_TRAJ_SET_MAX_ACCELERATION",
		10209: "MT_EMC_TRAJ_SET_SCALE",
		10210: "MT_EMC_TRAJ_SET_MOTION_ID",
		10211: "MT_EMC_TRAJ_INIT",
		10212: "MT_EMC_TRAJ_HALT",
		10213: "MT_EMC_TRAJ_ENABLE",
		10214: "MT_EMC_TRAJ_DISABLE",
		10215: "MT_EMC_TRAJ_ABORT",
		10216: "MT_EMC_TRAJ_PAUSE",
		10217: "MT_EMC_TRAJ_STEP",
		10218: "MT_EMC_TRAJ_RESUME",
		10219: "MT_EMC_TRAJ_DELAY",
		10220: "MT_EMC_TRAJ_LINEAR_MOVE",
		10221: "MT_EMC_TRAJ_CIRCULAR_MOVE",
		10222: "MT_EMC_TRAJ_SET_TERM_COND",
		10223: "MT_EMC_TRAJ_SET_OFFSET",
		10224: "MT_EMC_TRAJ_SET_G5X",
		10225: "MT_EMC_TRAJ_SET_HOME",
		10226: "MT_EMC_TRAJ_SET_ROTATION",
		10227: "MT_EMC_TRAJ_SET_G92",
		10228: "MT_EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG",
		10229: "MT_EMC_TRAJ_PROBE",
		10230: "MT_EMC_TRAJ_SET_TELEOP_ENABLE",
		10231: "MT_EMC_TRAJ_SET_TELEOP_VECTOR",
		10232: "MT_EMC_TRAJ_SET_SPINDLESYNC",
		10233: "MT_EMC_TRAJ_SET_SPINDLE_SCALE",
		10234: "MT_EMC_TRAJ_SET_FO_ENABLE",
		10235: "MT_EMC_TRAJ_SET_SO_ENABLE",
		10236: "MT_EMC_TRAJ_SET_FH_ENABLE",
		10237: "MT_EMC_TRAJ_RIGID_TAP",
		10238: "MT_EMC_TRAJ_SET_RAPID_SCALE",
		10299: "MT_EMC_TRAJ_STAT",
		10301: "MT_EMC_MOTION_INIT",
		10302: "MT_EMC_MOTION_HALT",
		10303: "MT_EMC_MOTION_ABORT",
		10304: "MT_EMC_MOTION_SET_AOUT",
		10305: "MT_EMC_MOTION_SET_DOUT",
		10306: "MT_EMC_MOTION_ADAPTIVE",
		10317: "MT_EMC_SPINDLE_ORIENT",
		10318: "MT_EMC_SPINDLE_WAIT_ORIENT_COMPLETE",
		10399: "MT_EMC_MOTION_STAT",
		10501: "MT_EMC_TASK_INIT",
		10502: "MT_EMC_TASK_HALT",
		10503: "MT_EMC_TASK_ABORT",
		10504: "MT_EMC_TASK_SET_MODE",
		10505: "MT_EMC_TASK_SET_STATE",
		10506: "MT_EMC_TASK_PLAN_OPEN",
		10507: "MT_EMC_TASK_PLAN_RUN",
		10508: "MT_EMC_TASK_PLAN_READ",
		10509: "MT_EMC_TASK_PLAN_EXECUTE",
		10510: "MT_EMC_TASK_PLAN_PAUSE",
		10511: "MT_EMC_TASK_PLAN_STEP",
		10512: "MT_EMC_TASK_PLAN_RESUME",
		10513: "MT_EMC_TASK_PLAN_END",
		10514: "MT_EMC_TASK_PLAN_CLOSE",
		10515: "MT_EMC_TASK_PLAN_INIT",
		10516: "MT_EMC_TASK_PLAN_SYNCH",
		10517: "MT_EMC_TASK_PLAN_SET_OPTIONAL_STOP",
		10518: "MT_EMC_TASK_PLAN_SET_BLOCK_DELETE",
		10519: "MT_EMC_TASK_PLAN_OPTIONAL_STOP",
		10520: "MT_EMC_TASK_PLAN_RESET",
		10530: "MT_EMC_TASK_PLAN_REPLY",
		10599: "MT_EMC_TASK_STAT",
		11101: "MT_EMC_TOOL_INIT",
		11102: "MT_EMC_TOOL_HALT",
		11103: "MT_EMC_TOOL_ABORT",
		11104: "MT_EMC_TOOL_PREPARE",
		11105: "MT_EMC_TOOL_LOAD",
		11106: "MT_EMC_TOOL_UNLOAD",
		11107: "MT_EMC_TOOL_LOAD_TOOL_TABLE",
		11108: "MT_EMC_TOOL_SET_OFFSET",
		11109: "MT_EMC_TOOL_SET_NUMBER",
		11110: "MT_EMC_TOOL_UPDATE_TOOL_TABLE",
		11199: "MT_EMC_TOOL_STAT",
		11206: "MT_EMC_AUX_ESTOP_ON",
		11207: "MT_EMC_AUX_ESTOP_OFF",
		11208: "MT_EMC_AUX_ESTOP_RESET",
		11209: "MT_EMC_AUX_INPUT_WAIT",
		11299: "MT_EMC_AUX_STAT",
		11304: "MT_EMC_SPINDLE_ON",
		11305: "MT_EMC_SPINDLE_OFF",
		11309: "MT_EMC_SPINDLE_INCREASE",
		11310: "MT_EMC_SPINDLE_DECREASE",
		11311: "MT_EMC_SPINDLE_CONSTANT",
		11312: "MT_EMC_SPINDLE_BRAKE_RELEASE",
		11313: "MT_EMC_SPINDLE_BRAKE_ENGAGE",
		11316: "MT_EMC_SPINDLE_SPEED",
		11399: "MT_EMC_SPINDLE_STAT",
		11404: "MT_EMC_COOLANT_MIST_ON",
		11405: "MT_EMC_COOLANT_MIST_OFF",
		11406: "MT_EMC_COOLANT_FLOOD_ON",
		11407: "MT_EMC_COOLANT_FLOOD_OFF",
		11499: "MT_EMC_COOLANT_STAT",
		11504: "MT_EMC_LUBE_ON",
		11505: "MT_EMC_LUBE_OFF",
		11599: "MT_EMC_LUBE_STAT",
		11601: "MT_EMC_IO_INIT",
		11602: "MT_EMC_IO_HALT",
		11603: "MT_EMC_IO_ABORT",
		11604: "MT_EMC_IO_SET_CYCLE_TIME",
		11699: "MT_EMC_IO_STAT",
		11901: "MT_EMC_INIT",
		11902: "MT_EMC_HALT",
		11903: "MT_EMC_ABORT",
		11999: "MT_EMC_STAT",
		12500: "MT_EMCSTAT_FULL_UPDATE",
		12501: "MT_EMCSTAT_INCREMENTAL_UPDATE",
		12510: "MT_EMC_NML_ERROR",
		12511: "MT_EMC_NML_TEXT",
		12512: "MT_EMC_NML_DISPLAY",
		12520: "MT_EMCCMD_EXECUTED",
		12521: "MT_EMCCMD_COMPLETED",
		12600: "MT_LAUNCHER_FULL_UPDATE",
		12601: "MT_LAUNCHER_INCREMENTAL_UPDATE",
		12602: "MT_LAUNCHER_ERROR",
		12610: "MT_LAUNCHER_START",
		12611: "MT_LAUNCHER_TERMINATE",
		12612: "MT_LAUNCHER_KILL",
		12613: "MT_LAUNCHER_WRITE_STDIN",
		12614: "MT_LAUNCHER_CALL",
		12615: "MT_LAUNCHER_SHUTDOWN",
		12616: "MT_LAUNCHER_SET",
	}
	ContainerType_value = map[string]int32{
		"MT_RTMESSAGE":                         2,
		"MT_MOTCMD":                            3,
		"MT_MOTSTATUS":                         4,
		"MT_LEGACY_MOTCMD":                     5,
		"MT_LEGACY_MOTSTATUS":                  6,
		"MT_WOU":                               7,
		"MT_HALUPDATE":                         8,
		"MT_RTAPI_MESSAGE":                     9,
		"MT_LOG_MESSAGE":                       10,
		"MT_PREVIEW":                           11,
		"MT_PROGRESS":                          12,
		"MT_INTERP_STAT":                       13,
		"MT_SYSLOG":                            18,
		"MT_LEGACY_NML":                        19,
		"MT_LEGACY_MOTCONFIG":                  20,
		"MT_STP_UPDATE_FULL":                   26,
		"MT_STP_UPDATE":                        28,
		"MT_STP_NOGROUP":                       27,
		"MT_SHUTDOWN":                          45,
		"MT_CONFIRM_SHUTDOWN":                  50,
		"MT_RTMESSAGE0":                        30,
		"MT_RTMESSAGE1":                        31,
		"MT_RTMESSAGE2":                        32,
		"MT_RTMESSAGE3":                        33,
		"MT_RTMESSAGE4":                        34,
		"MT_ASCII":                             100,
		"MT_UNICODE":                           101,
		"MT_GCODE":                             102,
		"MT_PYTHON":                            103,
		"MT_PICKLE":                            104,
		"MT_TCL":                               105,
		"MT_XML":                               106,
		"MT_JSON":                              107,
		"MT_JPEG":                              108,
		"MT_PNG":                               109,
		"MT_TIFF":                              110,
		"MT_POSTSCRIPT":                        111,
		"MT_SVG":                               112,
		"MT_ZMQ_SUBSCRIBE":                     150,
		"MT_ZMQ_UNSUBSCRIBE":                   151,
		"MT_PING":                              210,
		"MT_PING_ACKNOWLEDGE":                  215,
		"MT_REJECT":                            220,
		"MT_DONE":                              240,
		"MT_SERVICE_REQUEST":                   250,
		"MT_SERVICE_ANNOUNCEMENT":              251,
		"MT_SERVICE_PROBE":                     252,
		"MT_MESSAGEBUS_NO_DESTINATION":         255,
		"MT_HALRCOMP_BIND":                     256,
		"MT_HALRCOMP_BIND_CONFIRM":             257,
		"MT_HALRCOMP_BIND_REJECT":              258,
		"MT_HALRCOMP_SET":                      259,
		"MT_HALRCOMP_SET_REJECT":               260,
		"MT_HALRCOMP_ACK":                      263,
		"MT_HALRCOMMAND_SET":                   265,
		"MT_HALRCOMMAND_SET_REJECT":            266,
		"MT_HALRCOMMAND_GET":                   267,
		"MT_HALRCOMMAND_GET_REJECT":            268,
		"MT_HALRCOMMAND_CREATE":                269,
		"MT_HALRCOMMAND_CREATE_REJECT":         270,
		"MT_HALRCOMMAND_DELETE":                271,
		"MT_HALRCOMMAND_DELETE_REJECT":         272,
		"MT_HALRCOMMAND_ACK":                   273,
		"MT_HALRCOMMAND_ERROR":                 274,
		"MT_HALRCOMMAND_DESCRIBE":              276,
		"MT_HALRCOMMAND_DESCRIPTION":           277,
		"MT_HALRCOMP_FULL_UPDATE":              288,
		"MT_HALRCOMP_INCREMENTAL_UPDATE":       289,
		"MT_HALRCOMP_ERROR":                    290,
		"MT_HALGROUP_BIND":                     294,
		"MT_HALGROUP_BIND_CONFIRM":             295,
		"MT_HALGROUP_BIND_REJECT":              296,
		"MT_HALGROUP_FULL_UPDATE":              297,
		"MT_HALGROUP_INCREMENTAL_UPDATE":       298,
		"MT_HALGROUP_ERROR":                    299,
		"MT_RTAPI_APP_EXIT":                    300,
		"MT_RTAPI_APP_PING":                    301,
		"MT_RTAPI_APP_LOADRT":                  302,
		"MT_RTAPI_APP_LOG":                     303,
		"MT_RTAPI_APP_UNLOADRT":                305,
		"MT_RTAPI_APP_NEWINST":                 306,
		"MT_RTAPI_APP_NEWTHREAD":               307,
		"MT_RTAPI_APP_DELTHREAD":               308,
		"MT_RTAPI_APP_CALLFUNC":                309,
		"MT_RTAPI_APP_REPLY":                   310,
		"MT_RTAPI_APP_DELINST":                 311,
		"MT_LIST_APPLICATIONS":                 350,
		"MT_DESCRIBE_APPLICATION":              351,
		"MT_RETRIEVE_APPLICATION":              352,
		"MT_APPLICATION_DETAIL":                353,
		"MT_ERROR":                             360,
		"MT_FULL_UPDATE":                       370,
		"MT_INCREMENTAL_UPDATE":                371,
		"MT_TASK_REPLY":                        400,
		"MT_TICKET_UPDATE":                     401,
		"MT_CREDIT_UPDATE":                     450,
		"MT_EMCMOT_LOWER":                      1000,
		"MT_EMCMOT_UPPER":                      1100,
		"MT_EMCMOT_ABORT":                      1001,
		"MT_EMCMOT_AXIS_ABORT":                 1002,
		"MT_EMCMOT_ENABLE":                     1003,
		"MT_EMCMOT_DISABLE":                    1004,
		"MT_EMCMOT_ENABLE_AMPLIFIER":           1005,
		"MT_EMCMOT_DISABLE_AMPLIFIER":          1006,
		"MT_EMCMOT_ENABLE_WATCHDOG":            1007,
		"MT_EMCMOT_DISABLE_WATCHDOG":           1008,
		"MT_EMCMOT_ACTIVATE_JOINT":             1009,
		"MT_EMCMOT_DEACTIVATE_JOINT":           1010,
		"MT_EMCMOT_PAUSE":                      1011,
		"MT_EMCMOT_RESUME":                     1012,
		"MT_EMCMOT_STEP":                       1013,
		"MT_EMCMOT_FREE":                       1014,
		"MT_EMCMOT_COORD":                      1015,
		"MT_EMCMOT_TELEOP":                     1016,
		"MT_EMCMOT_SPINDLE_SCALE":              1017,
		"MT_EMCMOT_SS_ENABLE":                  1018,
		"MT_EMCMOT_FEED_SCALE":                 1019,
		"MT_EMCMOT_FS_ENABLE":                  1020,
		"MT_EMCMOT_FH_ENABLE":                  1021,
		"MT_EMCMOT_AF_ENABLE":                  1022,
		"MT_EMCMOT_OVERRIDE_LIMITS":            1023,
		"MT_EMCMOT_HOME":                       1024,
		"MT_EMCMOT_UNHOME":                     1025,
		"MT_EMCMOT_JOG_CONT":                   1026,
		"MT_EMCMOT_JOG_INCR":                   1027,
		"MT_EMCMOT_JOG_ABS":                    1028,
		"MT_EMCMOT_SET_LINE":                   1029,
		"MT_EMCMOT_SET_CIRCLE":                 1030,
		"MT_EMCMOT_SET_TELEOP_VECTOR":          1031,
		"MT_EMCMOT_CLEAR_PROBE_FLAGS":          1032,
		"MT_EMCMOT_PROBE":                      1033,
		"MT_EMCMOT_RIGID_TAP":                  1034,
		"MT_EMCMOT_SET_POSITION_LIMITS":        1035,
		"MT_EMCMOT_SET_BACKLASH":               1036,
		"MT_EMCMOT_SET_MIN_FERROR":             1037,
		"MT_EMCMOT_SET_MAX_FERROR":             1038,
		"MT_EMCMOT_SET_VEL":                    1039,
		"MT_EMCMOT_SET_VEL_LIMIT":              1040,
		"MT_EMCMOT_SET_JOINT_VEL_LIMIT":        1041,
		"MT_EMCMOT_SET_JOINT_ACC_LIMIT":        1042,
		"MT_EMCMOT_SET_ACC":                    1043,
		"MT_EMCMOT_SET_TERM_COND":              1044,
		"MT_EMCMOT_SET_NUM_AXES":               1045,
		"MT_EMCMOT_SET_WORLD_HOME":             1046,
		"MT_EMCMOT_SET_HOMING_PARAMS":          1047,
		"MT_EMCMOT_SET_DEBUG":                  1048,
		"MT_EMCMOT_SET_DOUT":                   1049,
		"MT_EMCMOT_SET_AOUT":                   1050,
		"MT_EMCMOT_SET_SPINDLESYNC":            1051,
		"MT_EMCMOT_SPINDLE_ON":                 1052,
		"MT_EMCMOT_SPINDLE_OFF":                1053,
		"MT_EMCMOT_SPINDLE_INCREASE":           1054,
		"MT_EMCMOT_SPINDLE_DECREASE":           1055,
		"MT_EMCMOT_SPINDLE_BRAKE_ENGAGE":       1056,
		"MT_EMCMOT_SPINDLE_BRAKE_RELEASE":      1057,
		"MT_EMCMOT_SET_MOTOR_OFFSET":           1058,
		"MT_EMCMOT_SET_JOINT_COMP":             1059,
		"MT_EMCMOT_SET_OFFSET":                 1060,
		"MT_EMCMOT_COMMAND_OK":                 1061,
		"MT_EMCMOT_COMMAND_UNKNOWN_COMMAND":    1062,
		"MT_EMCMOT_COMMAND_INVALID_COMMAND":    1063,
		"MT_EMCMOT_COMMAND_INVALID_PARAMS":     1064,
		"MT_EMCMOT_COMMAND_BAD_EXEC":           1065,
		"MT_EMCMOT_MOTION_DISABLED":            1066,
		"MT_EMCMOT_MOTION_FREE":                1067,
		"MT_EMCMOT_MOTION_TELEOP":              1068,
		"MT_EMCMOT_MOTION_COORD":               1069,
		"MT_EMCMOT_JOINT_FLAG":                 1070,
		"MT_EMCMOT_MOTION_FLAG":                1071,
		"MT_PRU_FIRMWARE":                      2048,
		"MT_MESA_5I20_FIRMWARE":                3000,
		"MT_BLOB":                              4000,
		"MT_TEST1":                             5001,
		"MT_TEST2":                             5002,
		"MT_TEST3":                             5003,
		"MT_EMC_NML_LOWER":                     10000,
		"MT_EMC_NML_UPPER":                     13000,
		"MT_EMC_OPERATOR_ERROR":                10011,
		"MT_EMC_OPERATOR_TEXT":                 10012,
		"MT_EMC_OPERATOR_DISPLAY":              10013,
		"MT_EMC_NULL":                          10021,
		"MT_EMC_SET_DEBUG":                     10022,
		"MT_EMC_SYSTEM_CMD":                    10030,
		"MT_EMC_AXIS_SET_AXIS":                 10101,
		"MT_EMC_AXIS_SET_UNITS":                10102,
		"MT_EMC_AXIS_SET_MIN_POSITION_LIMIT":   10107,
		"MT_EMC_AXIS_SET_MAX_POSITION_LIMIT":   10108,
		"MT_EMC_TOOL_START_CHANGE":             1110,
		"MT_EMC_EXEC_PLUGIN_CALL":              1112,
		"MT_EMC_IO_PLUGIN_CALL":                1113,
		"MT_EMC_AXIS_SET_FERROR":               10111,
		"MT_EMC_AXIS_SET_HOMING_PARAMS":        10112,
		"MT_EMC_AXIS_SET_MIN_FERROR":           10115,
		"MT_EMC_AXIS_SET_MAX_VELOCITY":         10116,
		"MT_EMC_AXIS_INIT":                     10118,
		"MT_EMC_AXIS_HALT":                     10119,
		"MT_EMC_AXIS_ABORT":                    10120,
		"MT_EMC_AXIS_ENABLE":                   10121,
		"MT_EMC_AXIS_DISABLE":                  10122,
		"MT_EMC_AXIS_HOME":                     10123,
		"MT_EMC_AXIS_UNHOME":                   10135,
		"MT_EMC_AXIS_JOG":                      10124,
		"MT_EMC_AXIS_INCR_JOG":                 10125,
		"MT_EMC_AXIS_ABS_JOG":                  10126,
		"MT_EMC_AXIS_ACTIVATE":                 10127,
		"MT_EMC_AXIS_DEACTIVATE":               10128,
		"MT_EMC_AXIS_OVERRIDE_LIMITS":          10129,
		"MT_EMC_AXIS_LOAD_COMP":                10131,
		"MT_EMC_AXIS_SET_BACKLASH":             10134,
		"MT_EMC_AXIS_STAT":                     10199,
		"MT_EMC_TRAJ_SET_AXES":                 10201,
		"MT_EMC_TRAJ_SET_UNITS":                10202,
		"MT_EMC_TRAJ_SET_CYCLE_TIME":           10203,
		"MT_EMC_TRAJ_SET_MODE":                 10204,
		"MT_EMC_TRAJ_SET_VELOCITY":             10205,
		"MT_EMC_TRAJ_SET_ACCELERATION":         10206,
		"MT_EMC_TRAJ_SET_MAX_VELOCITY":         10207,
		"MT_EMC_TRAJ_SET_MAX_ACCELERATION":     10208,
		"MT_EMC_TRAJ_SET_SCALE":                10209,
		"MT_EMC_TRAJ_SET_MOTION_ID":            10210,
		"MT_EMC_TRAJ_INIT":                     10211,
		"MT_EMC_TRAJ_HALT":                     10212,
		"MT_EMC_TRAJ_ENABLE":                   10213,
		"MT_EMC_TRAJ_DISABLE":                  10214,
		"MT_EMC_TRAJ_ABORT":                    10215,
		"MT_EMC_TRAJ_PAUSE":                    10216,
		"MT_EMC_TRAJ_STEP":                     10217,
		"MT_EMC_TRAJ_RESUME":                   10218,
		"MT_EMC_TRAJ_DELAY":                    10219,
		"MT_EMC_TRAJ_LINEAR_MOVE":              10220,
		"MT_EMC_TRAJ_CIRCULAR_MOVE":            10221,
		"MT_EMC_TRAJ_SET_TERM_COND":            10222,
		"MT_EMC_TRAJ_SET_OFFSET":               10223,
		"MT_EMC_TRAJ_SET_G5X":                  10224,
		"MT_EMC_TRAJ_SET_HOME":                 10225,
		"MT_EMC_TRAJ_SET_ROTATION":             10226,
		"MT_EMC_TRAJ_SET_G92":                  10227,
		"MT_EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG": 10228,
		"MT_EMC_TRAJ_PROBE":                    10229,
		"MT_EMC_TRAJ_SET_TELEOP_ENABLE":        10230,
		"MT_EMC_TRAJ_SET_TELEOP_VECTOR":        10231,
		"MT_EMC_TRAJ_SET_SPINDLESYNC":          10232,
		"MT_EMC_TRAJ_SET_SPINDLE_SCALE":        10233,
		"MT_EMC_TRAJ_SET_FO_ENABLE":            10234,
		"MT_EMC_TRAJ_SET_SO_ENABLE":            10235,
		"MT_EMC_TRAJ_SET_FH_ENABLE":            10236,
		"MT_EMC_TRAJ_RIGID_TAP":                10237,
		"MT_EMC_TRAJ_SET_RAPID_SCALE":          10238,
		"MT_EMC_TRAJ_STAT":                     10299,
		"MT_EMC_MOTION_INIT":                   10301,
		"MT_EMC_MOTION_HALT":                   10302,
		"MT_EMC_MOTION_ABORT":                  10303,
		"MT_EMC_MOTION_SET_AOUT":               10304,
		"MT_EMC_MOTION_SET_DOUT":               10305,
		"MT_EMC_MOTION_ADAPTIVE":               10306,
		"MT_EMC_SPINDLE_ORIENT":                10317,
		"MT_EMC_SPINDLE_WAIT_ORIENT_COMPLETE":  10318,
		"MT_EMC_MOTION_STAT":                   10399,
		"MT_EMC_TASK_INIT":                     10501,
		"MT_EMC_TASK_HALT":                     10502,
		"MT_EMC_TASK_ABORT":                    10503,
		"MT_EMC_TASK_SET_MODE":                 10504,
		"MT_EMC_TASK_SET_STATE":                10505,
		"MT_EMC_TASK_PLAN_OPEN":                10506,
		"MT_EMC_TASK_PLAN_RUN":                 10507,
		"MT_EMC_TASK_PLAN_READ":                10508,
		"MT_EMC_TASK_PLAN_EXECUTE":             10509,
		"MT_EMC_TASK_PLAN_PAUSE":               10510,
		"MT_EMC_TASK_PLAN_STEP":                10511,
		"MT_EMC_TASK_PLAN_RESUME":              10512,
		"MT_EMC_TASK_PLAN_END":                 10513,
		"MT_EMC_TASK_PLAN_CLOSE":               10514,
		"MT_EMC_TASK_PLAN_INIT":                10515,
		"MT_EMC_TASK_PLAN_SYNCH":               10516,
		"MT_EMC_TASK_PLAN_SET_OPTIONAL_STOP":   10517,
		"MT_EMC_TASK_PLAN_SET_BLOCK_DELETE":    10518,
		"MT_EMC_TASK_PLAN_OPTIONAL_STOP":       10519,
		"MT_EMC_TASK_PLAN_RESET":               10520,
		"MT_EMC_TASK_PLAN_REPLY":               10530,
		"MT_EMC_TASK_STAT":                     10599,
		"MT_EMC_TOOL_INIT":                     11101,
		"MT_EMC_TOOL_HALT":                     11102,
		"MT_EMC_TOOL_ABORT":                    11103,
		"MT_EMC_TOOL_PREPARE":                  11104,
		"MT_EMC_TOOL_LOAD":                     11105,
		"MT_EMC_TOOL_UNLOAD":                   11106,
		"MT_EMC_TOOL_LOAD_TOOL_TABLE":          11107,
		"MT_EMC_TOOL_SET_OFFSET":               11108,
		"MT_EMC_TOOL_SET_NUMBER":               11109,
		"MT_EMC_TOOL_UPDATE_TOOL_TABLE":        11110,
		"MT_EMC_TOOL_STAT":                     11199,
		"MT_EMC_AUX_ESTOP_ON":                  11206,
		"MT_EMC_AUX_ESTOP_OFF":                 11207,
		"MT_EMC_AUX_ESTOP_RESET":               11208,
		"MT_EMC_AUX_INPUT_WAIT":                11209,
		"MT_EMC_AUX_STAT":                      11299,
		"MT_EMC_SPINDLE_ON":                    11304,
		"MT_EMC_SPINDLE_OFF":                   11305,
		"MT_EMC_SPINDLE_INCREASE":              11309,
		"MT_EMC_SPINDLE_DECREASE":              11310,
		"MT_EMC_SPINDLE_CONSTANT":              11311,
		"MT_EMC_SPINDLE_BRAKE_RELEASE":         11312,
		"MT_EMC_SPINDLE_BRAKE_ENGAGE":          11313,
		"MT_EMC_SPINDLE_SPEED":                 11316,
		"MT_EMC_SPINDLE_STAT":                  11399,
		"MT_EMC_COOLANT_MIST_ON":               11404,
		"MT_EMC_COOLANT_MIST_OFF":              11405,
		"MT_EMC_COOLANT_FLOOD_ON":              11406,
		"MT_EMC_COOLANT_FLOOD_OFF":             11407,
		"MT_EMC_COOLANT_STAT":                  11499,
		"MT_EMC_LUBE_ON":                       11504,
		"MT_EMC_LUBE_OFF":                      11505,
		"MT_EMC_LUBE_STAT":                     11599,
		"MT_EMC_IO_INIT":                       11601,
		"MT_EMC_IO_HALT":                       11602,
		"MT_EMC_IO_ABORT":                      11603,
		"MT_EMC_IO_SET_CYCLE_TIME":             11604,
		"MT_EMC_IO_STAT":                       11699,
		"MT_EMC_INIT":                          11901,
		"MT_EMC_HALT":                          11902,
		"MT_EMC_ABORT":                         11903,
		"MT_EMC_STAT":                          11999,
		"MT_EMCSTAT_FULL_UPDATE":               12500,
		"MT_EMCSTAT_INCREMENTAL_UPDATE":        12501,
		"MT_EMC_NML_ERROR":                     12510,
		"MT_EMC_NML_TEXT":                      12511,
		"MT_EMC_NML_DISPLAY":                   12512,
		"MT_EMCCMD_EXECUTED":                   12520,
		"MT_EMCCMD_COMPLETED":                  12521,
		"MT_LAUNCHER_FULL_UPDATE":              12600,
		"MT_LAUNCHER_INCREMENTAL_UPDATE":       12601,
		"MT_LAUNCHER_ERROR":                    12602,
		"MT_LAUNCHER_START":                    12610,
		"MT_LAUNCHER_TERMINATE":                12611,
		"MT_LAUNCHER_KILL":                     12612,
		"MT_LAUNCHER_WRITE_STDIN":              12613,
		"MT_LAUNCHER_CALL":                     12614,
		"MT_LAUNCHER_SHUTDOWN":                 12615,
		"MT_LAUNCHER_SET":                      12616,
	}
)

func (x ContainerType) Enum() *ContainerType {
	p := new(ContainerType)
	*p = x
	return p
}

func (x ContainerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[18].Descriptor()
}

func (ContainerType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[18]
}

func (x ContainerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerType(num)
	return nil
}

// Deprecated: Use ContainerType.Descriptor instead.
func (ContainerType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{18}
}

type OriginIndex int32

const (
	OriginIndex_ORIGIN_UNKNOWN OriginIndex = 0
	OriginIndex_ORIGIN_G54     OriginIndex = 1
	OriginIndex_ORIGIN_G55     OriginIndex = 2
	OriginIndex_ORIGIN_G56     OriginIndex = 3
	OriginIndex_ORIGIN_G57     OriginIndex = 4
	OriginIndex_ORIGIN_G58     OriginIndex = 5
	OriginIndex_ORIGIN_G59     OriginIndex = 6
	OriginIndex_ORIGIN_G59_1   OriginIndex = 7
	OriginIndex_ORIGIN_G59_2   OriginIndex = 8
	OriginIndex_ORIGIN_G59_3   OriginIndex = 9
)

// Enum value maps for OriginIndex.
var (
	OriginIndex_name = map[int32]string{
		0: "ORIGIN_UNKNOWN",
		1: "ORIGIN_G54",
		2: "ORIGIN_G55",
		3: "ORIGIN_G56",
		4: "ORIGIN_G57",
		5: "ORIGIN_G58",
		6: "ORIGIN_G59",
		7: "ORIGIN_G59_1",
		8: "ORIGIN_G59_2",
		9: "ORIGIN_G59_3",
	}
	OriginIndex_value = map[string]int32{
		"ORIGIN_UNKNOWN": 0,
		"ORIGIN_G54":     1,
		"ORIGIN_G55":     2,
		"ORIGIN_G56":     3,
		"ORIGIN_G57":     4,
		"ORIGIN_G58":     5,
		"ORIGIN_G59":     6,
		"ORIGIN_G59_1":   7,
		"ORIGIN_G59_2":   8,
		"ORIGIN_G59_3":   9,
	}
)

func (x OriginIndex) Enum() *OriginIndex {
	p := new(OriginIndex)
	*p = x
	return p
}

func (x OriginIndex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginIndex) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[19].Descriptor()
}

func (OriginIndex) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[19]
}

func (x OriginIndex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OriginIndex) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OriginIndex(num)
	return nil
}

// Deprecated: Use OriginIndex.Descriptor instead.
func (OriginIndex) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{19}
}

// add leading _ to avoid collision with macros in emc.hh
type TermConditionType int32

const (
	TermConditionType__EMC_TRAJ_TERM_COND_STOP  TermConditionType = 1
	TermConditionType__EMC_TRAJ_TERM_COND_BLEND TermConditionType = 2
)

// Enum value maps for TermConditionType.
var (
	TermConditionType_name = map[int32]string{
		1: "_EMC_TRAJ_TERM_COND_STOP",
		2: "_EMC_TRAJ_TERM_COND_BLEND",
	}
	TermConditionType_value = map[string]int32{
		"_EMC_TRAJ_TERM_COND_STOP":  1,
		"_EMC_TRAJ_TERM_COND_BLEND": 2,
	}
)

func (x TermConditionType) Enum() *TermConditionType {
	p := new(TermConditionType)
	*p = x
	return p
}

func (x TermConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TermConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[20].Descriptor()
}

func (TermConditionType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[20]
}

func (x TermConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TermConditionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TermConditionType(num)
	return nil
}

// Deprecated: Use TermConditionType.Descriptor instead.
func (TermConditionType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{20}
}

type CanonDirection int32

const (
	CanonDirection__CANON_STOPPED          CanonDirection = 1
	CanonDirection__CANON_CLOCKWISE        CanonDirection = 2
	CanonDirection__CANON_COUNTERCLOCKWISE CanonDirection = 3
)

// Enum value maps for CanonDirection.
var (
	CanonDirection_name = map[int32]string{
		1: "_CANON_STOPPED",
		2: "_CANON_CLOCKWISE",
		3: "_CANON_COUNTERCLOCKWISE",
	}
	CanonDirection_value = map[string]int32{
		"_CANON_STOPPED":          1,
		"_CANON_CLOCKWISE":        2,
		"_CANON_COUNTERCLOCKWISE": 3,
	}
)

func (x CanonDirection) Enum() *CanonDirection {
	p := new(CanonDirection)
	*p = x
	return p
}

func (x CanonDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanonDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[21].Descriptor()
}

func (CanonDirection) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[21]
}

func (x CanonDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CanonDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CanonDirection(num)
	return nil
}

// Deprecated: Use CanonDirection.Descriptor instead.
func (CanonDirection) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{21}
}

type InputType int32

const (
	InputType__ANALOG_INPUT  InputType = 0
	InputType__DIGITAL_INPUT InputType = 1
)

// Enum value maps for InputType.
var (
	InputType_name = map[int32]string{
		0: "_ANALOG_INPUT",
		1: "_DIGITAL_INPUT",
	}
	InputType_value = map[string]int32{
		"_ANALOG_INPUT":  0,
		"_DIGITAL_INPUT": 1,
	}
)

func (x InputType) Enum() *InputType {
	p := new(InputType)
	*p = x
	return p
}

func (x InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[22].Descriptor()
}

func (InputType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[22]
}

func (x InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InputType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InputType(num)
	return nil
}

// Deprecated: Use InputType.Descriptor instead.
func (InputType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{22}
}

type WaitType int32

const (
	WaitType_IMMEDIATE WaitType = 0
	WaitType_RISE      WaitType = 1
	WaitType_FALL      WaitType = 2
	WaitType_BE_HIGH   WaitType = 3
	WaitType_BE_LOW    WaitType = 4
)

// Enum value maps for WaitType.
var (
	WaitType_name = map[int32]string{
		0: "IMMEDIATE",
		1: "RISE",
		2: "FALL",
		3: "BE_HIGH",
		4: "BE_LOW",
	}
	WaitType_value = map[string]int32{
		"IMMEDIATE": 0,
		"RISE":      1,
		"FALL":      2,
		"BE_HIGH":   3,
		"BE_LOW":    4,
	}
)

func (x WaitType) Enum() *WaitType {
	p := new(WaitType)
	*p = x
	return p
}

func (x WaitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[23].Descriptor()
}

func (WaitType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[23]
}

func (x WaitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WaitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WaitType(num)
	return nil
}

// Deprecated: Use WaitType.Descriptor instead.
func (WaitType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{23}
}

// types for EMC_TASK interpState
type InterpreterStateType int32

const (
	InterpreterStateType_INTERP_IDLE        InterpreterStateType = 1
	InterpreterStateType_INTERP_RUNNING     InterpreterStateType = 2
	InterpreterStateType_INTERP_SYNC_WAIT   InterpreterStateType = 3
	InterpreterStateType_INTERP_PAUSED      InterpreterStateType = 4
	InterpreterStateType_INTERP_QUEUE_WAIT  InterpreterStateType = 5
	InterpreterStateType_INTERP_ABORT_WAIT  InterpreterStateType = 6
	InterpreterStateType_INTERP_STATE_UNSET InterpreterStateType = 99 // to ease change tracking
)

// Enum value maps for InterpreterStateType.
var (
	InterpreterStateType_name = map[int32]string{
		1:  "INTERP_IDLE",
		2:  "INTERP_RUNNING",
		3:  "INTERP_SYNC_WAIT",
		4:  "INTERP_PAUSED",
		5:  "INTERP_QUEUE_WAIT",
		6:  "INTERP_ABORT_WAIT",
		99: "INTERP_STATE_UNSET",
	}
	InterpreterStateType_value = map[string]int32{
		"INTERP_IDLE":        1,
		"INTERP_RUNNING":     2,
		"INTERP_SYNC_WAIT":   3,
		"INTERP_PAUSED":      4,
		"INTERP_QUEUE_WAIT":  5,
		"INTERP_ABORT_WAIT":  6,
		"INTERP_STATE_UNSET": 99,
	}
)

func (x InterpreterStateType) Enum() *InterpreterStateType {
	p := new(InterpreterStateType)
	*p = x
	return p
}

func (x InterpreterStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterpreterStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_machinetalk_protobuf_types_proto_enumTypes[24].Descriptor()
}

func (InterpreterStateType) Type() protoreflect.EnumType {
	return &file_machinetalk_protobuf_types_proto_enumTypes[24]
}

func (x InterpreterStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InterpreterStateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InterpreterStateType(num)
	return nil
}

// Deprecated: Use InterpreterStateType.Descriptor instead.
func (InterpreterStateType) EnumDescriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_types_proto_rawDescGZIP(), []int{24}
}

var File_machinetalk_protobuf_types_proto protoreflect.FileDescriptor

var file_machinetalk_protobuf_types_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x1a,
	0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2a, 0xf7, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x5f, 0x42, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x48, 0x41, 0x4c, 0x5f, 0x53, 0x33, 0x32, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c,
	0x5f, 0x55, 0x33, 0x32, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x5f, 0x53, 0x36,
	0x34, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x5f, 0x55, 0x36, 0x34, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x1e, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10,
	0x3c, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x50, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x52, 0x54, 0x45, 0x53, 0x49, 0x41, 0x4e, 0x10, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45,
	0x47, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x54, 0x45, 0x53, 0x49, 0x41, 0x4e, 0x10, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x78, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x45,
	0x47, 0x41, 0x43, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x82, 0x01, 0x2a, 0x36, 0x0a, 0x0f,
	0x48, 0x61, 0x6c, 0x50, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x5f,
	0x49, 0x4f, 0x10, 0x30, 0x2a, 0x2c, 0x0a, 0x11, 0x48, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c,
	0x5f, 0x52, 0x4f, 0x10, 0x40, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x5f, 0x52, 0x57, 0x10,
	0xc0, 0x01, 0x2a, 0x4d, 0x0a, 0x0c, 0x48, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x53, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x53, 0x5f, 0x58, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x41, 0x4e, 0x44, 0x10,
	0x02, 0x2a, 0xdb, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x5f,
	0x50, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4c, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4c, 0x5f, 0x56, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x4c, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x4c, 0x5f, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x0c, 0x2a,
	0x81, 0x01, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x09, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0xa0, 0x1f, 0x12, 0x1a, 0x0a,
	0x15, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10, 0xa1, 0x1f, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x53, 0x47,
	0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xa2, 0x1f, 0x12,
	0x0f, 0x0a, 0x0a, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0xa3, 0x1f,
	0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0xa4, 0x1f, 0x12, 0x0e, 0x0a, 0x09, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x48, 0x4f, 0x50,
	0x10, 0xa5, 0x1f, 0x2a, 0xee, 0x01, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x50, 0x41, 0x49,
	0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x50, 0x55,
	0x42, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x53, 0x55,
	0x42, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x52, 0x45,
	0x50, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x5f,
	0x5a, 0x4d, 0x51, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x58, 0x50, 0x55, 0x42, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x58, 0x53, 0x55, 0x42, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x0f, 0x2a, 0x62, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x18, 0x0a, 0x0b, 0x53, 0x4d, 0x5f,
	0x5a, 0x4d, 0x51, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4d, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4d, 0x5f, 0x5a, 0x4d, 0x51,
	0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x0a, 0x52, 0x43, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x21, 0x0a, 0x14, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x43, 0x53,
	0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x43, 0x53, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x43, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x43, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x3a, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x53, 0x47, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x54, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x4c, 0x41, 0x50, 0x49,
	0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d,
	0x53, 0x47, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x41,
	0x50, 0x49, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x42, 0x47, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x05, 0x2a, 0xa0, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a,
	0x5a, 0x4d, 0x51, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x46, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4d, 0x4c, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x50, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x43, 0x53, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x5a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4d,
	0x53, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x50, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x5f, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x10, 0x78, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x47, 0x4d, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x82, 0x01, 0x2a, 0xa5, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10,
	0x28, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x3c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x46, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x4e,
	0x10, 0x5a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0x64, 0x2a, 0x3a,
	0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x2a, 0x44, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x2a, 0x59, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x41,
	0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x53, 0x10, 0xff, 0x01, 0x2a, 0xd6, 0x02, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x5f, 0x52,
	0x54, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x48, 0x41, 0x4c, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x48, 0x41,
	0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x5f, 0x53,
	0x54, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x5f, 0x52, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x42, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x42, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x11, 0x2a, 0x31, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x50, 0x49, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x5f, 0x57, 0x53,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x9f, 0x46, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x54, 0x5f,
	0x52, 0x54, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x43, 0x4d, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x54,
	0x5f, 0x4d, 0x4f, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x54, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x54, 0x43, 0x4d, 0x44,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f,
	0x4d, 0x4f, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x54, 0x5f, 0x57, 0x4f, 0x55, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x54, 0x5f, 0x48, 0x41,
	0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x5f,
	0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x53,
	0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x4c, 0x45,
	0x47, 0x41, 0x43, 0x59, 0x5f, 0x4e, 0x4d, 0x4c, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54,
	0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1c, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x54, 0x5f, 0x52, 0x54, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x30, 0x10, 0x1e, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x31,
	0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x32, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x33, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x52,
	0x54, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x34, 0x10, 0x22, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x54, 0x5f, 0x41, 0x53, 0x43, 0x49, 0x49, 0x10, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x54, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x5f,
	0x47, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x66, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x50, 0x59,
	0x54, 0x48, 0x4f, 0x4e, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x50, 0x49, 0x43,
	0x4b, 0x4c, 0x45, 0x10, 0x68, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x54, 0x43, 0x4c, 0x10,
	0x69, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x6a, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x54,
	0x5f, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x50, 0x4e,
	0x47, 0x10, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x54, 0x49, 0x46, 0x46, 0x10, 0x6e,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x10, 0x6f, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x53, 0x56, 0x47, 0x10, 0x70, 0x12,
	0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x5a, 0x4d, 0x51, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x10, 0x96, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x5a, 0x4d, 0x51,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x97, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xd2, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x4d, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c,
	0x45, 0x44, 0x47, 0x45, 0x10, 0xd7, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0xdc, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0xf0, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xfa, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x4e,
	0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xfb, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x4d, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x10, 0xfc, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x42, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xff, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c,
	0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x80, 0x02, 0x12, 0x1d, 0x0a,
	0x18, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x42, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x81, 0x02, 0x12, 0x1c, 0x0a, 0x17,
	0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x82, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54,
	0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x83, 0x02,
	0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x84, 0x02, 0x12, 0x14, 0x0a,
	0x0f, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x41, 0x43, 0x4b,
	0x10, 0x87, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x89, 0x02, 0x12, 0x1e, 0x0a, 0x19,
	0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x8a, 0x02, 0x12, 0x17, 0x0a, 0x12,
	0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47,
	0x45, 0x54, 0x10, 0x8b, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x8c, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x8d,
	0x02, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x8e, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x8f, 0x02,
	0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x90, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x91, 0x02, 0x12, 0x19, 0x0a, 0x14,
	0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x92, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x48, 0x41,
	0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x10, 0x94, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x95, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c,
	0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0xa0, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x52, 0x43,
	0x4f, 0x4d, 0x50, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xa1, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f,
	0x48, 0x41, 0x4c, 0x52, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa2,
	0x02, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0xa6, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x48,
	0x41, 0x4c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x10, 0xa7, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x48, 0x41,
	0x4c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0xa8, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0xa9, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xaa, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x48,
	0x41, 0x4c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xab, 0x02,
	0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0xac, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x52,
	0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xad, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x54, 0x10, 0xae, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54,
	0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xaf,
	0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x54, 0x10, 0xb1, 0x02, 0x12, 0x19, 0x0a,
	0x14, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x45,
	0x57, 0x49, 0x4e, 0x53, 0x54, 0x10, 0xb2, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x52,
	0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x54, 0x48, 0x52, 0x45,
	0x41, 0x44, 0x10, 0xb3, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50,
	0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x10,
	0xb4, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41,
	0x50, 0x50, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x10, 0xb5, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0xb6, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x52, 0x54,
	0x41, 0x50, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x4e, 0x53, 0x54, 0x10,
	0xb7, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xde, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x4d, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xdf, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x4d,
	0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe0, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0xe1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xe8, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xf2, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f,
	0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0xf3, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x90, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x91, 0x03,
	0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0xc2, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xe8, 0x07, 0x12, 0x14, 0x0a,
	0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52,
	0x10, 0xcc, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0xe9, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x10, 0xea, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xeb, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xec, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x10, 0xed, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0xee, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48,
	0x44, 0x4f, 0x47, 0x10, 0xef, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x44, 0x4f, 0x47, 0x10, 0xf0, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0xf1, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0xf2, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0xf3, 0x07, 0x12, 0x15, 0x0a,
	0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x45, 0x10, 0xf4, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0xf5, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0xf6, 0x07, 0x12, 0x14,
	0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x52,
	0x44, 0x10, 0xf7, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f,
	0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50, 0x10, 0xf8, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xf9, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xfa, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xfb, 0x07, 0x12, 0x18,
	0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x53, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xfc, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0xfd, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f,
	0x41, 0x46, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xfe, 0x07, 0x12, 0x1e, 0x0a, 0x19,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49,
	0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0xff, 0x07, 0x12, 0x13, 0x0a, 0x0e,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x80,
	0x08, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x55,
	0x4e, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x81, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4a, 0x4f, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x10, 0x82,
	0x08, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4a,
	0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x10, 0x83, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4a, 0x4f, 0x47, 0x5f, 0x41, 0x42, 0x53, 0x10,
	0x84, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x85, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x49, 0x52,
	0x43, 0x4c, 0x45, 0x10, 0x86, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50, 0x5f, 0x56,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x87, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x10, 0x88, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x89, 0x08,
	0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x52, 0x49,
	0x47, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x50, 0x10, 0x8a, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0x8b, 0x08, 0x12, 0x1b,
	0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x8c, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x49, 0x4e,
	0x5f, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8d, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8e, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x4c, 0x10, 0x8f,
	0x08, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x90, 0x08, 0x12,
	0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x91, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x92, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x93, 0x08, 0x12,
	0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x94, 0x08, 0x12, 0x1b, 0x0a,
	0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x5f, 0x41, 0x58, 0x45, 0x53, 0x10, 0x95, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4c,
	0x44, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x96, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x97, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x10, 0x98, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x99, 0x08, 0x12, 0x17,
	0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x41, 0x4f, 0x55, 0x54, 0x10, 0x9a, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x9b, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x10,
	0x9c, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f,
	0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x9d, 0x08, 0x12, 0x1f,
	0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x9e, 0x08, 0x12,
	0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x9f, 0x08,
	0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x50,
	0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4b, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x41,
	0x47, 0x45, 0x10, 0xa0, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4b, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0xa1, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x54,
	0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0xa2, 0x08, 0x12, 0x1d, 0x0a, 0x18,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0xa3, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x10, 0xa4, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0xa5,
	0x08, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0xa6, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0xa7,
	0x08, 0x12, 0x25, 0x0a, 0x20, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0xa8, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0xa9, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xaa, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x10, 0xab, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d,
	0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50,
	0x10, 0xac, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54,
	0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x10, 0xad, 0x08,
	0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0xae, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x4d, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x10, 0xaf, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x50, 0x52,
	0x55, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10, 0x80, 0x10, 0x12, 0x1a, 0x0a,
	0x15, 0x4d, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x41, 0x5f, 0x35, 0x49, 0x32, 0x30, 0x5f, 0x46, 0x49,
	0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10, 0xb8, 0x17, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x42, 0x10, 0xa0, 0x1f, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x31, 0x10, 0x89, 0x27, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x32, 0x10, 0x8a, 0x27, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x33, 0x10, 0x8b, 0x27, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4e,
	0x4d, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x90, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4e, 0x4d, 0x4c, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10,
	0xc8, 0x65, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x9b, 0x4e, 0x12, 0x19,
	0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x9c, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x9d, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0xa5, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0xa6, 0x4e,
	0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0xae, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x58, 0x49, 0x53,
	0x10, 0xf5, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58,
	0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xf6, 0x4e, 0x12,
	0x27, 0x0a, 0x22, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xfb, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xfc,
	0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xd6, 0x08,
	0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f,
	0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xd8, 0x08, 0x12, 0x1a,
	0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4f, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xd9, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xff, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x80, 0x4f, 0x12, 0x1f, 0x0a, 0x1a, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x46, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x83, 0x4f, 0x12, 0x21, 0x0a, 0x1c,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x84, 0x4f, 0x12,
	0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x86, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x87, 0x4f, 0x12, 0x16, 0x0a,
	0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x10, 0x88, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x41, 0x58, 0x49, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x89, 0x4f, 0x12, 0x18,
	0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x8a, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x8b, 0x4f, 0x12,
	0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x55,
	0x4e, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x97, 0x4f, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4a, 0x4f, 0x47, 0x10, 0x8c, 0x4f, 0x12, 0x19,
	0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x49, 0x4e,
	0x43, 0x52, 0x5f, 0x4a, 0x4f, 0x47, 0x10, 0x8d, 0x4f, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x41, 0x42, 0x53, 0x5f, 0x4a, 0x4f, 0x47,
	0x10, 0x8e, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58,
	0x49, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x8f, 0x4f, 0x12, 0x1b,
	0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x44, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x90, 0x4f, 0x12, 0x20, 0x0a, 0x1b, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0x91, 0x4f, 0x12, 0x1a, 0x0a,
	0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0x93, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x96, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0xd7, 0x4f, 0x12,
	0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x41, 0x58, 0x45, 0x53, 0x10, 0xd9, 0x4f, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x53, 0x10, 0xda, 0x4f, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0xdb, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0xdc, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41,
	0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10, 0xdd,
	0x4f, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xde, 0x4f, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x56, 0x45, 0x4c, 0x4f,
	0x43, 0x49, 0x54, 0x59, 0x10, 0xdf, 0x4f, 0x12, 0x25, 0x0a, 0x20, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe0, 0x4f, 0x12, 0x1a,
	0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xe1, 0x4f, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe2, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xe3,
	0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a,
	0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0xe4, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xe5,
	0x4f, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xe6, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x10, 0xe7, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52,
	0x41, 0x4a, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0xe8, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10,
	0xe9, 0x4f, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41,
	0x4a, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0xea, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x10, 0xeb, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52,
	0x41, 0x4a, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xec,
	0x4f, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a,
	0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xed,
	0x4f, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0xee,
	0x4f, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0xef, 0x4f, 0x12, 0x18,
	0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x47, 0x35, 0x58, 0x10, 0xf0, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4d, 0x45,
	0x10, 0xf1, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52,
	0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xf2, 0x4f, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41,
	0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x39, 0x32, 0x10, 0xf3, 0x4f, 0x12, 0x29, 0x0a, 0x24,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x10, 0xf4, 0x4f, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0xf5, 0x4f, 0x12,
	0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xf6, 0x4f, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52,
	0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4f, 0x50, 0x5f, 0x56, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x10, 0xf7, 0x4f, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44,
	0x4c, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xf8, 0x4f, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x49,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xf9, 0x4f, 0x12, 0x1e, 0x0a,
	0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x46, 0x4f, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xfa, 0x4f, 0x12, 0x1e, 0x0a,
	0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x4f, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xfb, 0x4f, 0x12, 0x1e, 0x0a,
	0x19, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x46, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xfc, 0x4f, 0x12, 0x1a, 0x0a,
	0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x52, 0x49, 0x47,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x50, 0x10, 0xfd, 0x4f, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x50,
	0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0xfe, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10,
	0xbb, 0x50, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xbd, 0x50, 0x12, 0x17, 0x0a, 0x12, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4c,
	0x54, 0x10, 0xbe, 0x50, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0xbf, 0x50, 0x12, 0x1b,
	0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x41, 0x4f, 0x55, 0x54, 0x10, 0xc0, 0x50, 0x12, 0x1b, 0x0a, 0x16, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x44, 0x4f, 0x55, 0x54, 0x10, 0xc1, 0x50, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49,
	0x56, 0x45, 0x10, 0xc2, 0x50, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x10, 0xcd,
	0x50, 0x12, 0x28, 0x0a, 0x23, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xce, 0x50, 0x12, 0x17, 0x0a, 0x12, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x10, 0x9f, 0x51, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x85, 0x52, 0x12, 0x15, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10,
	0x86, 0x52, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x87, 0x52, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0x88, 0x52, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x89,
	0x52, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x8a, 0x52, 0x12, 0x19, 0x0a,
	0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x8b, 0x52, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x8c, 0x52, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45,
	0x10, 0x8d, 0x52, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x8e, 0x52,
	0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x8f, 0x52, 0x12, 0x1c, 0x0a, 0x17,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x90, 0x52, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x91, 0x52, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x92, 0x52, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x93, 0x52, 0x12, 0x1b,
	0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c,
	0x41, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x10, 0x94, 0x52, 0x12, 0x27, 0x0a, 0x22, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x10, 0x95, 0x52, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x96, 0x52, 0x12, 0x23, 0x0a, 0x1e,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x97,
	0x52, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x98, 0x52, 0x12, 0x1b,
	0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4c,
	0x41, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xa2, 0x52, 0x12, 0x15, 0x0a, 0x10, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10,
	0xe7, 0x52, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xdd, 0x56, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0xde, 0x56,
	0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0xdf, 0x56, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10,
	0xe0, 0x56, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xe1, 0x56, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0xe2, 0x56, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0xe3, 0x56, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0xe4,
	0x56, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xe5, 0x56, 0x12, 0x22,
	0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0xe6, 0x56, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0xbf, 0x57, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x41, 0x55, 0x58, 0x5f, 0x45, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x4e,
	0x10, 0xc6, 0x57, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x55,
	0x58, 0x5f, 0x45, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xc7, 0x57, 0x12, 0x1b,
	0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x55, 0x58, 0x5f, 0x45, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0xc8, 0x57, 0x12, 0x1a, 0x0a, 0x15, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x55, 0x58, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x10, 0xc9, 0x57, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x43, 0x5f, 0x41, 0x55, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0xa3, 0x58, 0x12, 0x16, 0x0a,
	0x11, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x4f, 0x4e, 0x10, 0xa8, 0x58, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xa9, 0x58, 0x12, 0x1c,
	0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0xad, 0x58, 0x12, 0x1c, 0x0a, 0x17,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0xae, 0x58, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0xaf, 0x58, 0x12, 0x21, 0x0a, 0x1c, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4b, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0xb0, 0x58, 0x12, 0x20, 0x0a, 0x1b, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x42, 0x52,
	0x41, 0x4b, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x10, 0xb1, 0x58, 0x12, 0x19, 0x0a,
	0x14, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0xb4, 0x58, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45,
	0x4d, 0x43, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10,
	0x87, 0x59, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4f,
	0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x10, 0x8c, 0x59, 0x12,
	0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x41, 0x4e,
	0x54, 0x5f, 0x4d, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x8d, 0x59, 0x12, 0x1c, 0x0a,
	0x17, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x41, 0x4e, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x8e, 0x59, 0x12, 0x1d, 0x0a, 0x18, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x4c,
	0x4f, 0x4f, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x8f, 0x59, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x10, 0xeb, 0x59, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4c,
	0x55, 0x42, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0xf0, 0x59, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f,
	0x45, 0x4d, 0x43, 0x5f, 0x4c, 0x55, 0x42, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xf1, 0x59, 0x12,
	0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4c, 0x55, 0x42, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x10, 0xcf, 0x5a, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x5f, 0x49, 0x4f, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xd1, 0x5a, 0x12, 0x13, 0x0a, 0x0e, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4f, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0xd2, 0x5a,
	0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4f, 0x5f, 0x41, 0x42,
	0x4f, 0x52, 0x54, 0x10, 0xd3, 0x5a, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43,
	0x5f, 0x49, 0x4f, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0xd4, 0x5a, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f,
	0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0xb3, 0x5b, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xfd, 0x5c, 0x12, 0x10, 0x0a, 0x0b,
	0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0xfe, 0x5c, 0x12, 0x11,
	0x0a, 0x0c, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0xff,
	0x5c, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x10, 0xdf, 0x5d, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xd4, 0x61,
	0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0xd5, 0x61, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4e,
	0x4d, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xde, 0x61, 0x12, 0x14, 0x0a, 0x0f, 0x4d,
	0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4e, 0x4d, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0xdf,
	0x61, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x4e, 0x4d, 0x4c, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0xe0, 0x61, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x54,
	0x5f, 0x45, 0x4d, 0x43, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44,
	0x10, 0xe8, 0x61, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x45, 0x4d, 0x43, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xe9, 0x61, 0x12, 0x1c, 0x0a,
	0x17, 0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xb8, 0x62, 0x12, 0x23, 0x0a, 0x1e, 0x4d,
	0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xb9, 0x62,
	0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xba, 0x62, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x4c,
	0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xc2, 0x62,
	0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0xc3, 0x62, 0x12, 0x15, 0x0a, 0x10,
	0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c,
	0x10, 0xc4, 0x62, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48,
	0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x49, 0x4e, 0x10, 0xc5,
	0x62, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xc6, 0x62, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x4c,
	0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0xc7, 0x62, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xc8, 0x62, 0x2a, 0xb7, 0x01, 0x0a, 0x0b, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x34, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x35, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x36, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x37, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x38, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x39, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x39, 0x5f, 0x31, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x39, 0x5f, 0x32, 0x10,
	0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x35, 0x39, 0x5f,
	0x33, 0x10, 0x09, 0x2a, 0x50, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x5f, 0x45, 0x4d, 0x43,
	0x5f, 0x54, 0x52, 0x41, 0x4a, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x5f, 0x45, 0x4d, 0x43, 0x5f, 0x54,
	0x52, 0x41, 0x4a, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x42, 0x4c,
	0x45, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x57, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x5f, 0x43, 0x41, 0x4e, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x5f,
	0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x57, 0x49, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x5f, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x57, 0x49, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x32,
	0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x01, 0x2a, 0x46, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x4c, 0x4c, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x2a, 0xaa, 0x01, 0x0a, 0x14, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x63, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x6b, 0x69, 0x74,
	0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
}

var (
	file_machinetalk_protobuf_types_proto_rawDescOnce sync.Once
	file_machinetalk_protobuf_types_proto_rawDescData = file_machinetalk_protobuf_types_proto_rawDesc
)

func file_machinetalk_protobuf_types_proto_rawDescGZIP() []byte {
	file_machinetalk_protobuf_types_proto_rawDescOnce.Do(func() {
		file_machinetalk_protobuf_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_machinetalk_protobuf_types_proto_rawDescData)
	})
	return file_machinetalk_protobuf_types_proto_rawDescData
}

var file_machinetalk_protobuf_types_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_machinetalk_protobuf_types_proto_goTypes = []interface{}{
	(ValueType)(0),            // 0: machinetalk.ValueType
	(HalPinDirection)(0),      // 1: machinetalk.HalPinDirection
	(HalParamDirection)(0),    // 2: machinetalk.HalParamDirection
	(HalFunctType)(0),         // 3: machinetalk.HalFunctType
	(ObjectType)(0),           // 4: machinetalk.ObjectType
	(MsgidType)(0),            // 5: machinetalk.msgidType
	(SocketType)(0),           // 6: machinetalk.socketType
	(SecurityMechanism)(0),    // 7: machinetalk.securityMechanism
	(RCS_STATUS)(0),           // 8: machinetalk.RCS_STATUS
	(MsgOrigin)(0),            // 9: machinetalk.MsgOrigin
	(MsgLevel)(0),             // 10: machinetalk.MsgLevel
	(OriginDetail)(0),         // 11: machinetalk.OriginDetail
	(OriginType)(0),           // 12: machinetalk.OriginType
	(Severity)(0),             // 13: machinetalk.Severity
	(StatusType)(0),           // 14: machinetalk.StatusType
	(ReplyType)(0),            // 15: machinetalk.ReplyType
	(ServiceType)(0),          // 16: machinetalk.ServiceType
	(ServiceAPI)(0),           // 17: machinetalk.ServiceAPI
	(ContainerType)(0),        // 18: machinetalk.ContainerType
	(OriginIndex)(0),          // 19: machinetalk.OriginIndex
	(TermConditionType)(0),    // 20: machinetalk.TermConditionType
	(CanonDirection)(0),       // 21: machinetalk.CanonDirection
	(InputType)(0),            // 22: machinetalk.InputType
	(WaitType)(0),             // 23: machinetalk.WaitType
	(InterpreterStateType)(0), // 24: machinetalk.InterpreterStateType
}
var file_machinetalk_protobuf_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_machinetalk_protobuf_types_proto_init() }
func file_machinetalk_protobuf_types_proto_init() {
	if File_machinetalk_protobuf_types_proto != nil {
		return
	}
	file_machinetalk_protobuf_nanopb_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machinetalk_protobuf_types_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machinetalk_protobuf_types_proto_goTypes,
		DependencyIndexes: file_machinetalk_protobuf_types_proto_depIdxs,
		EnumInfos:         file_machinetalk_protobuf_types_proto_enumTypes,
	}.Build()
	File_machinetalk_protobuf_types_proto = out.File
	file_machinetalk_protobuf_types_proto_rawDesc = nil
	file_machinetalk_protobuf_types_proto_goTypes = nil
	file_machinetalk_protobuf_types_proto_depIdxs = nil
}
