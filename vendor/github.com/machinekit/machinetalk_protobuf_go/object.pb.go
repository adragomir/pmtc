// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: machinetalk/protobuf/object.proto

package machinetalk_protobuf_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// describes a RTAPI/HAL/LinuxCNC instance
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //  [(nanopb).max_size = 41];
	Id   *int32  `protobuf:"fixed32,2,opt,name=id" json:"id,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{0}
}

func (x *Instance) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Instance) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

// a service, for announcement/response to ServiceRequest via zbeacon(7)
type ServiceAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype       *ServiceType `protobuf:"varint,1,req,name=stype,enum=machinetalk.ServiceType" json:"stype,omitempty"`
	Version     *uint32      `protobuf:"fixed32,2,req,name=version,def=0" json:"version,omitempty"`
	Instance    *uint32      `protobuf:"fixed32,3,req,name=instance,def=0" json:"instance,omitempty"` // RTAPI instance id
	Api         *ServiceAPI  `protobuf:"varint,8,req,name=api,enum=machinetalk.ServiceAPI" json:"api,omitempty"`
	Uri         *string      `protobuf:"bytes,6,req,name=uri" json:"uri,omitempty"`
	Description *string      `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

// Default values for ServiceAnnouncement fields.
const (
	Default_ServiceAnnouncement_Version  = uint32(0)
	Default_ServiceAnnouncement_Instance = uint32(0)
)

func (x *ServiceAnnouncement) Reset() {
	*x = ServiceAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAnnouncement) ProtoMessage() {}

func (x *ServiceAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAnnouncement.ProtoReflect.Descriptor instead.
func (*ServiceAnnouncement) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceAnnouncement) GetStype() ServiceType {
	if x != nil && x.Stype != nil {
		return *x.Stype
	}
	return ServiceType_ST_LOGGING
}

func (x *ServiceAnnouncement) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_ServiceAnnouncement_Version
}

func (x *ServiceAnnouncement) GetInstance() uint32 {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return Default_ServiceAnnouncement_Instance
}

func (x *ServiceAnnouncement) GetApi() ServiceAPI {
	if x != nil && x.Api != nil {
		return *x.Api
	}
	return ServiceAPI_SA_ZMQ_PROTOBUF
}

func (x *ServiceAnnouncement) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *ServiceAnnouncement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// describes an entity which may cause a message:
// a process, a component, a thread, a group,
// a remote component
// also used as a optional error detail
type Originator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin   *OriginType   `protobuf:"varint,1,opt,name=origin,enum=machinetalk.OriginType" json:"origin,omitempty"`
	Detail   *OriginDetail `protobuf:"varint,2,opt,name=detail,enum=machinetalk.OriginDetail" json:"detail,omitempty"`
	Name     *string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"` //   [(nanopb).max_size = 41];
	Id       *int32        `protobuf:"fixed32,4,opt,name=id" json:"id,omitempty"`
	Instance *Instance     `protobuf:"bytes,5,opt,name=instance" json:"instance,omitempty"`
}

func (x *Originator) Reset() {
	*x = Originator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Originator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Originator) ProtoMessage() {}

func (x *Originator) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Originator.ProtoReflect.Descriptor instead.
func (*Originator) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{2}
}

func (x *Originator) GetOrigin() OriginType {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return OriginType_PROCESS
}

func (x *Originator) GetDetail() OriginDetail {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return OriginDetail_UNIX_SIGNAL
}

func (x *Originator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Originator) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Originator) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type AnError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode *int32      `protobuf:"fixed32,1,req,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Severity  *Severity   `protobuf:"varint,2,opt,name=severity,enum=machinetalk.Severity" json:"severity,omitempty"`
	ErrorText *string     `protobuf:"bytes,3,opt,name=error_text,json=errorText" json:"error_text,omitempty"`
	Origin    *Originator `protobuf:"bytes,4,opt,name=origin" json:"origin,omitempty"`
}

func (x *AnError) Reset() {
	*x = AnError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnError) ProtoMessage() {}

func (x *AnError) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnError.ProtoReflect.Descriptor instead.
func (*AnError) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{3}
}

func (x *AnError) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *AnError) GetSeverity() Severity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Severity_S_INFORMATIONAL
}

func (x *AnError) GetErrorText() string {
	if x != nil && x.ErrorText != nil {
		return *x.ErrorText
	}
	return ""
}

func (x *AnError) GetOrigin() *Originator {
	if x != nil {
		return x.Origin
	}
	return nil
}

type Pin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *ValueType       `protobuf:"varint,1,opt,name=type,enum=machinetalk.ValueType" json:"type,omitempty"`
	Name   *string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"` //    [(nanopb).max_size = 41];
	Handle *uint32          `protobuf:"fixed32,3,opt,name=handle" json:"handle,omitempty"`
	Dir    *HalPinDirection `protobuf:"varint,4,opt,name=dir,enum=machinetalk.HalPinDirection" json:"dir,omitempty"`
	// One of the following must be filled in,
	// depending on type.
	Halbit   *bool    `protobuf:"varint,5,opt,name=halbit" json:"halbit,omitempty"`
	Halfloat *float64 `protobuf:"fixed64,6,opt,name=halfloat" json:"halfloat,omitempty"`
	Hals32   *int32   `protobuf:"fixed32,7,opt,name=hals32" json:"hals32,omitempty"`
	Halu32   *uint32  `protobuf:"fixed32,8,opt,name=halu32" json:"halu32,omitempty"`
	Owner    *int32   `protobuf:"fixed32,9,opt,name=owner" json:"owner,omitempty"`
	Linked   *bool    `protobuf:"varint,10,opt,name=linked" json:"linked,omitempty"`
	Oldname  *string  `protobuf:"bytes,11,opt,name=oldname" json:"oldname,omitempty"` //   [(nanopb).max_size = 41];
	Epsilon  *float64 `protobuf:"fixed64,12,opt,name=epsilon" json:"epsilon,omitempty"`
	Flags    *uint32  `protobuf:"fixed32,13,opt,name=flags" json:"flags,omitempty"`
}

func (x *Pin) Reset() {
	*x = Pin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pin) ProtoMessage() {}

func (x *Pin) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pin.ProtoReflect.Descriptor instead.
func (*Pin) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{4}
}

func (x *Pin) GetType() ValueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ValueType_HAL_BIT
}

func (x *Pin) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Pin) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Pin) GetDir() HalPinDirection {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return HalPinDirection_HAL_IN
}

func (x *Pin) GetHalbit() bool {
	if x != nil && x.Halbit != nil {
		return *x.Halbit
	}
	return false
}

func (x *Pin) GetHalfloat() float64 {
	if x != nil && x.Halfloat != nil {
		return *x.Halfloat
	}
	return 0
}

func (x *Pin) GetHals32() int32 {
	if x != nil && x.Hals32 != nil {
		return *x.Hals32
	}
	return 0
}

func (x *Pin) GetHalu32() uint32 {
	if x != nil && x.Halu32 != nil {
		return *x.Halu32
	}
	return 0
}

func (x *Pin) GetOwner() int32 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *Pin) GetLinked() bool {
	if x != nil && x.Linked != nil {
		return *x.Linked
	}
	return false
}

func (x *Pin) GetOldname() string {
	if x != nil && x.Oldname != nil {
		return *x.Oldname
	}
	return ""
}

func (x *Pin) GetEpsilon() float64 {
	if x != nil && x.Epsilon != nil {
		return *x.Epsilon
	}
	return 0
}

func (x *Pin) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *ValueType `protobuf:"varint,1,opt,name=type,enum=machinetalk.ValueType" json:"type,omitempty"`
	Name     *string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"` //  [(nanopb).max_size = 41];
	Handle   *uint32    `protobuf:"fixed32,3,opt,name=handle" json:"handle,omitempty"`
	Halbit   *bool      `protobuf:"varint,5,opt,name=halbit" json:"halbit,omitempty"`
	Halfloat *float64   `protobuf:"fixed64,6,opt,name=halfloat" json:"halfloat,omitempty"`
	Hals32   *int32     `protobuf:"fixed32,7,opt,name=hals32" json:"hals32,omitempty"`
	Halu32   *uint32    `protobuf:"fixed32,8,opt,name=halu32" json:"halu32,omitempty"`
	Strval   *string    `protobuf:"bytes,9,opt,name=strval" json:"strval,omitempty"`
	Blob     []byte     `protobuf:"bytes,10,opt,name=blob" json:"blob,omitempty"`
	Readers  *uint32    `protobuf:"fixed32,11,opt,name=readers" json:"readers,omitempty"`
	Writers  *uint32    `protobuf:"fixed32,12,opt,name=writers" json:"writers,omitempty"`
	Bidirs   *uint32    `protobuf:"fixed32,13,opt,name=bidirs" json:"bidirs,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{5}
}

func (x *Signal) GetType() ValueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ValueType_HAL_BIT
}

func (x *Signal) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Signal) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Signal) GetHalbit() bool {
	if x != nil && x.Halbit != nil {
		return *x.Halbit
	}
	return false
}

func (x *Signal) GetHalfloat() float64 {
	if x != nil && x.Halfloat != nil {
		return *x.Halfloat
	}
	return 0
}

func (x *Signal) GetHals32() int32 {
	if x != nil && x.Hals32 != nil {
		return *x.Hals32
	}
	return 0
}

func (x *Signal) GetHalu32() uint32 {
	if x != nil && x.Halu32 != nil {
		return *x.Halu32
	}
	return 0
}

func (x *Signal) GetStrval() string {
	if x != nil && x.Strval != nil {
		return *x.Strval
	}
	return ""
}

func (x *Signal) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *Signal) GetReaders() uint32 {
	if x != nil && x.Readers != nil {
		return *x.Readers
	}
	return 0
}

func (x *Signal) GetWriters() uint32 {
	if x != nil && x.Writers != nil {
		return *x.Writers
	}
	return 0
}

func (x *Signal) GetBidirs() uint32 {
	if x != nil && x.Bidirs != nil {
		return *x.Bidirs
	}
	return 0
}

type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *ValueType         `protobuf:"varint,1,opt,name=type,enum=machinetalk.ValueType" json:"type,omitempty"`
	Name     *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"` //   [(nanopb).max_size = 41];
	Handle   *uint32            `protobuf:"fixed32,3,opt,name=handle" json:"handle,omitempty"`
	Halbit   *bool              `protobuf:"varint,5,opt,name=halbit" json:"halbit,omitempty"`
	Halfloat *float64           `protobuf:"fixed64,6,opt,name=halfloat" json:"halfloat,omitempty"`
	Hals32   *int32             `protobuf:"fixed32,7,opt,name=hals32" json:"hals32,omitempty"`
	Halu32   *uint32            `protobuf:"fixed32,8,opt,name=halu32" json:"halu32,omitempty"`
	Strval   *string            `protobuf:"bytes,9,opt,name=strval" json:"strval,omitempty"`
	Blob     []byte             `protobuf:"bytes,10,opt,name=blob" json:"blob,omitempty"`
	Dir      *HalParamDirection `protobuf:"varint,11,opt,name=dir,enum=machinetalk.HalParamDirection" json:"dir,omitempty"`
	Oldname  *string            `protobuf:"bytes,12,opt,name=oldname" json:"oldname,omitempty"` //   [(nanopb).max_size = 41];
	Owner    *int32             `protobuf:"fixed32,13,opt,name=owner" json:"owner,omitempty"`
	Runtime  *int32             `protobuf:"fixed32,14,opt,name=runtime" json:"runtime,omitempty"`
	Maytime  *int32             `protobuf:"fixed32,15,opt,name=maytime" json:"maytime,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{6}
}

func (x *Param) GetType() ValueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ValueType_HAL_BIT
}

func (x *Param) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Param) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Param) GetHalbit() bool {
	if x != nil && x.Halbit != nil {
		return *x.Halbit
	}
	return false
}

func (x *Param) GetHalfloat() float64 {
	if x != nil && x.Halfloat != nil {
		return *x.Halfloat
	}
	return 0
}

func (x *Param) GetHals32() int32 {
	if x != nil && x.Hals32 != nil {
		return *x.Hals32
	}
	return 0
}

func (x *Param) GetHalu32() uint32 {
	if x != nil && x.Halu32 != nil {
		return *x.Halu32
	}
	return 0
}

func (x *Param) GetStrval() string {
	if x != nil && x.Strval != nil {
		return *x.Strval
	}
	return ""
}

func (x *Param) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *Param) GetDir() HalParamDirection {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return HalParamDirection_HAL_RO
}

func (x *Param) GetOldname() string {
	if x != nil && x.Oldname != nil {
		return *x.Oldname
	}
	return ""
}

func (x *Param) GetOwner() int32 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *Param) GetRuntime() int32 {
	if x != nil && x.Runtime != nil {
		return *x.Runtime
	}
	return 0
}

func (x *Param) GetMaytime() int32 {
	if x != nil && x.Maytime != nil {
		return *x.Maytime
	}
	return 0
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //   [(nanopb).max_size = 41];
	Handle           *uint32       `protobuf:"fixed32,2,opt,name=handle" json:"handle,omitempty"`
	OwnerId          *uint32       `protobuf:"fixed32,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	Users            *uint32       `protobuf:"fixed32,4,opt,name=users" json:"users,omitempty"`
	Runtime          *uint32       `protobuf:"fixed32,5,opt,name=runtime" json:"runtime,omitempty"`
	Maxtime          *uint32       `protobuf:"fixed32,6,opt,name=maxtime" json:"maxtime,omitempty"`
	Reentrant        *bool         `protobuf:"varint,7,opt,name=reentrant" json:"reentrant,omitempty"`
	Type             *HalFunctType `protobuf:"varint,8,opt,name=type,enum=machinetalk.HalFunctType" json:"type,omitempty"`
	MaxtimeIncreased *bool         `protobuf:"varint,9,opt,name=maxtime_increased,json=maxtimeIncreased" json:"maxtime_increased,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{7}
}

func (x *Function) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Function) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Function) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *Function) GetUsers() uint32 {
	if x != nil && x.Users != nil {
		return *x.Users
	}
	return 0
}

func (x *Function) GetRuntime() uint32 {
	if x != nil && x.Runtime != nil {
		return *x.Runtime
	}
	return 0
}

func (x *Function) GetMaxtime() uint32 {
	if x != nil && x.Maxtime != nil {
		return *x.Maxtime
	}
	return 0
}

func (x *Function) GetReentrant() bool {
	if x != nil && x.Reentrant != nil {
		return *x.Reentrant
	}
	return false
}

func (x *Function) GetType() HalFunctType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HalFunctType_FS_LEGACY_THREADFUNC
}

func (x *Function) GetMaxtimeIncreased() bool {
	if x != nil && x.MaxtimeIncreased != nil {
		return *x.MaxtimeIncreased
	}
	return false
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //   [(nanopb).max_size = 41];
	Handle   *uint32  `protobuf:"fixed32,2,opt,name=handle" json:"handle,omitempty"`
	UsesFp   *bool    `protobuf:"varint,3,opt,name=uses_fp,json=usesFp" json:"uses_fp,omitempty"`
	Period   *uint32  `protobuf:"fixed32,4,opt,name=period" json:"period,omitempty"`
	Priority *int32   `protobuf:"fixed32,5,opt,name=priority" json:"priority,omitempty"`
	TaskId   *uint32  `protobuf:"fixed32,6,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	CpuId    *uint32  `protobuf:"fixed32,7,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
	Function []string `protobuf:"bytes,8,rep,name=function" json:"function,omitempty"` //   [(nanopb).max_count = 100];
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{8}
}

func (x *Thread) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Thread) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Thread) GetUsesFp() bool {
	if x != nil && x.UsesFp != nil {
		return *x.UsesFp
	}
	return false
}

func (x *Thread) GetPeriod() uint32 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *Thread) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Thread) GetTaskId() uint32 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *Thread) GetCpuId() uint32 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

func (x *Thread) GetFunction() []string {
	if x != nil {
		return x.Function
	}
	return nil
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //   [(nanopb).max_size = 41];
	Ninst       *uint32 `protobuf:"fixed32,2,opt,name=ninst" json:"ninst,omitempty"`
	CompId      *int32  `protobuf:"fixed32,4,opt,name=comp_id,json=compId" json:"comp_id,omitempty"`
	Type        *uint32 `protobuf:"fixed32,5,opt,name=type" json:"type,omitempty"`
	State       *uint32 `protobuf:"fixed32,6,opt,name=state" json:"state,omitempty"`
	LastUpdate  *uint32 `protobuf:"fixed32,7,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	LastBound   *uint32 `protobuf:"fixed32,8,opt,name=last_bound,json=lastBound" json:"last_bound,omitempty"`
	LastUnbound *uint32 `protobuf:"fixed32,9,opt,name=last_unbound,json=lastUnbound" json:"last_unbound,omitempty"`
	Pid         *uint32 `protobuf:"fixed32,10,opt,name=pid" json:"pid,omitempty"`
	Args        *string `protobuf:"bytes,11,opt,name=args" json:"args,omitempty"` //   [(nanopb).max_count = 20,
	//   (nanopb).max_size = 41];
	Timer    *int32      `protobuf:"fixed32,12,opt,name=timer" json:"timer,omitempty"` // using layer information; not in HAL
	Userarg1 *int32      `protobuf:"fixed32,14,opt,name=userarg1" json:"userarg1,omitempty"`
	Userarg2 *int32      `protobuf:"fixed32,15,opt,name=userarg2" json:"userarg2,omitempty"`
	Pin      []*Pin      `protobuf:"bytes,16,rep,name=pin" json:"pin,omitempty"`
	Param    []*Param    `protobuf:"bytes,17,rep,name=param" json:"param,omitempty"`
	Funct    []*Function `protobuf:"bytes,19,rep,name=funct" json:"funct,omitempty"`
	// do not create the component on MT_HALRCOMP_BIND if the component does not exist
	NoCreate *bool `protobuf:"varint,18,opt,name=no_create,json=noCreate" json:"no_create,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{9}
}

func (x *Component) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Component) GetNinst() uint32 {
	if x != nil && x.Ninst != nil {
		return *x.Ninst
	}
	return 0
}

func (x *Component) GetCompId() int32 {
	if x != nil && x.CompId != nil {
		return *x.CompId
	}
	return 0
}

func (x *Component) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Component) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *Component) GetLastUpdate() uint32 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *Component) GetLastBound() uint32 {
	if x != nil && x.LastBound != nil {
		return *x.LastBound
	}
	return 0
}

func (x *Component) GetLastUnbound() uint32 {
	if x != nil && x.LastUnbound != nil {
		return *x.LastUnbound
	}
	return 0
}

func (x *Component) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *Component) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *Component) GetTimer() int32 {
	if x != nil && x.Timer != nil {
		return *x.Timer
	}
	return 0
}

func (x *Component) GetUserarg1() int32 {
	if x != nil && x.Userarg1 != nil {
		return *x.Userarg1
	}
	return 0
}

func (x *Component) GetUserarg2() int32 {
	if x != nil && x.Userarg2 != nil {
		return *x.Userarg2
	}
	return 0
}

func (x *Component) GetPin() []*Pin {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *Component) GetParam() []*Param {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Component) GetFunct() []*Function {
	if x != nil {
		return x.Funct
	}
	return nil
}

func (x *Component) GetNoCreate() bool {
	if x != nil && x.NoCreate != nil {
		return *x.NoCreate
	}
	return false
}

type Ring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //  [(nanopb).max_size = 41];
	Handle     *uint32 `protobuf:"fixed32,2,opt,name=handle" json:"handle,omitempty"`
	Owner      *int32  `protobuf:"fixed32,3,opt,name=owner" json:"owner,omitempty"`
	Stream     *bool   `protobuf:"varint,4,opt,name=stream" json:"stream,omitempty"`
	Wmutex     *bool   `protobuf:"varint,5,opt,name=wmutex" json:"wmutex,omitempty"`
	Rmutex     *bool   `protobuf:"varint,6,opt,name=rmutex" json:"rmutex,omitempty"`
	RtapiShm   *bool   `protobuf:"varint,7,opt,name=rtapi_shm,json=rtapiShm" json:"rtapi_shm,omitempty"`
	Reader     *int32  `protobuf:"fixed32,8,opt,name=reader" json:"reader,omitempty"`
	Writer     *int32  `protobuf:"fixed32,9,opt,name=writer" json:"writer,omitempty"`
	TotalSize  *int32  `protobuf:"fixed32,10,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
	Scratchpad *int32  `protobuf:"fixed32,11,opt,name=scratchpad" json:"scratchpad,omitempty"`
	RingShmkey *int32  `protobuf:"fixed32,12,opt,name=ring_shmkey,json=ringShmkey" json:"ring_shmkey,omitempty"`
	Encodings  *uint32 `protobuf:"fixed32,13,opt,name=encodings" json:"encodings,omitempty"`
}

func (x *Ring) Reset() {
	*x = Ring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ring) ProtoMessage() {}

func (x *Ring) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ring.ProtoReflect.Descriptor instead.
func (*Ring) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{10}
}

func (x *Ring) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ring) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Ring) GetOwner() int32 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return 0
}

func (x *Ring) GetStream() bool {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return false
}

func (x *Ring) GetWmutex() bool {
	if x != nil && x.Wmutex != nil {
		return *x.Wmutex
	}
	return false
}

func (x *Ring) GetRmutex() bool {
	if x != nil && x.Rmutex != nil {
		return *x.Rmutex
	}
	return false
}

func (x *Ring) GetRtapiShm() bool {
	if x != nil && x.RtapiShm != nil {
		return *x.RtapiShm
	}
	return false
}

func (x *Ring) GetReader() int32 {
	if x != nil && x.Reader != nil {
		return *x.Reader
	}
	return 0
}

func (x *Ring) GetWriter() int32 {
	if x != nil && x.Writer != nil {
		return *x.Writer
	}
	return 0
}

func (x *Ring) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

func (x *Ring) GetScratchpad() int32 {
	if x != nil && x.Scratchpad != nil {
		return *x.Scratchpad
	}
	return 0
}

func (x *Ring) GetRingShmkey() int32 {
	if x != nil && x.RingShmkey != nil {
		return *x.RingShmkey
	}
	return 0
}

func (x *Ring) GetEncodings() uint32 {
	if x != nil && x.Encodings != nil {
		return *x.Encodings
	}
	return 0
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtype    *ObjectType `protobuf:"varint,1,opt,name=mtype,enum=machinetalk.ObjectType" json:"mtype,omitempty"`
	Userarg1 *int32      `protobuf:"fixed32,2,opt,name=userarg1" json:"userarg1,omitempty"`
	Epsilon  *float64    `protobuf:"fixed64,3,opt,name=epsilon" json:"epsilon,omitempty"`
	// if mtype == HAL_MEMBER_SIGNAL
	Signal *Signal `protobuf:"bytes,4,opt,name=signal" json:"signal,omitempty"`
	// if mtype == HAL_MEMBER_GROUP
	Groupname *string `protobuf:"bytes,5,opt,name=groupname" json:"groupname,omitempty"` //  [(nanopb).max_size = 41];
	Handle    *uint32 `protobuf:"fixed32,6,opt,name=handle" json:"handle,omitempty"`
	// if mtype == HAL_MEMBER_PIN
	Pin *Pin `protobuf:"bytes,7,opt,name=pin" json:"pin,omitempty"`
	// if mtype == HAL_MEMBER_PARAM
	Param *Param `protobuf:"bytes,8,opt,name=param" json:"param,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{11}
}

func (x *Member) GetMtype() ObjectType {
	if x != nil && x.Mtype != nil {
		return *x.Mtype
	}
	return ObjectType_HAL_OBJECT_INVALID
}

func (x *Member) GetUserarg1() int32 {
	if x != nil && x.Userarg1 != nil {
		return *x.Userarg1
	}
	return 0
}

func (x *Member) GetEpsilon() float64 {
	if x != nil && x.Epsilon != nil {
		return *x.Epsilon
	}
	return 0
}

func (x *Member) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *Member) GetGroupname() string {
	if x != nil && x.Groupname != nil {
		return *x.Groupname
	}
	return ""
}

func (x *Member) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Member) GetPin() *Pin {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *Member) GetParam() *Param {
	if x != nil {
		return x.Param
	}
	return nil
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //  [(nanopb).max_size = 41];
	Handle   *uint32   `protobuf:"fixed32,2,opt,name=handle" json:"handle,omitempty"`
	Userarg1 *int32    `protobuf:"fixed32,4,opt,name=userarg1" json:"userarg1,omitempty"`
	Userarg2 *int32    `protobuf:"fixed32,5,opt,name=userarg2" json:"userarg2,omitempty"`
	Refcount *int32    `protobuf:"fixed32,6,opt,name=refcount" json:"refcount,omitempty"`
	Member   []*Member `protobuf:"bytes,7,rep,name=member" json:"member,omitempty"` // list of signals or group names
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{12}
}

func (x *Group) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Group) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Group) GetUserarg1() int32 {
	if x != nil && x.Userarg1 != nil {
		return *x.Userarg1
	}
	return 0
}

func (x *Group) GetUserarg2() int32 {
	if x != nil && x.Userarg2 != nil {
		return *x.Userarg2
	}
	return 0
}

func (x *Group) GetRefcount() int32 {
	if x != nil && x.Refcount != nil {
		return *x.Refcount
	}
	return 0
}

func (x *Group) GetMember() []*Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type ProtocolParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeepaliveTimer *int32 `protobuf:"fixed32,1,opt,name=keepalive_timer,json=keepaliveTimer" json:"keepalive_timer,omitempty"` // group and rcomp ping interval sent by haltalk
	GroupTimer     *int32 `protobuf:"fixed32,2,opt,name=group_timer,json=groupTimer" json:"group_timer,omitempty"`             // group default scan timer
	RcompTimer     *int32 `protobuf:"fixed32,3,opt,name=rcomp_timer,json=rcompTimer" json:"rcomp_timer,omitempty"`             // rcomp default scan timer
}

func (x *ProtocolParameters) Reset() {
	*x = ProtocolParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolParameters) ProtoMessage() {}

func (x *ProtocolParameters) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolParameters.ProtoReflect.Descriptor instead.
func (*ProtocolParameters) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{13}
}

func (x *ProtocolParameters) GetKeepaliveTimer() int32 {
	if x != nil && x.KeepaliveTimer != nil {
		return *x.KeepaliveTimer
	}
	return 0
}

func (x *ProtocolParameters) GetGroupTimer() int32 {
	if x != nil && x.GroupTimer != nil {
		return *x.GroupTimer
	}
	return 0
}

func (x *ProtocolParameters) GetRcompTimer() int32 {
	if x != nil && x.RcompTimer != nil {
		return *x.RcompTimer
	}
	return 0
}

type Vtable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //  [(nanopb).max_size = 41];
	Handle   *uint32 `protobuf:"fixed32,2,opt,name=handle" json:"handle,omitempty"`
	OwnerId  *int32  `protobuf:"fixed32,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	Context  *uint32 `protobuf:"fixed32,5,opt,name=context" json:"context,omitempty"`
	Refcount *int32  `protobuf:"fixed32,6,opt,name=refcount" json:"refcount,omitempty"`
	Version  *int32  `protobuf:"fixed32,7,opt,name=version" json:"version,omitempty"`
	Vtable   *uint64 `protobuf:"fixed64,8,opt,name=vtable" json:"vtable,omitempty"`
}

func (x *Vtable) Reset() {
	*x = Vtable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vtable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vtable) ProtoMessage() {}

func (x *Vtable) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vtable.ProtoReflect.Descriptor instead.
func (*Vtable) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{14}
}

func (x *Vtable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Vtable) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *Vtable) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *Vtable) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *Vtable) GetRefcount() int32 {
	if x != nil && x.Refcount != nil {
		return *x.Refcount
	}
	return 0
}

func (x *Vtable) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Vtable) GetVtable() uint64 {
	if x != nil && x.Vtable != nil {
		return *x.Vtable
	}
	return 0
}

type Inst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` //  [(nanopb).max_size = 41];
	CompId   *int32      `protobuf:"fixed32,2,opt,name=comp_id,json=compId" json:"comp_id,omitempty"`
	InstId   *uint32     `protobuf:"fixed32,3,opt,name=inst_id,json=instId" json:"inst_id,omitempty"`
	InstSize *uint32     `protobuf:"fixed32,4,opt,name=inst_size,json=instSize" json:"inst_size,omitempty"`
	Vtable   *uint64     `protobuf:"fixed64,5,opt,name=vtable" json:"vtable,omitempty"`
	Pin      []*Pin      `protobuf:"bytes,16,rep,name=pin" json:"pin,omitempty"`
	Param    []*Param    `protobuf:"bytes,17,rep,name=param" json:"param,omitempty"`
	Funct    []*Function `protobuf:"bytes,19,rep,name=funct" json:"funct,omitempty"`
}

func (x *Inst) Reset() {
	*x = Inst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_object_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inst) ProtoMessage() {}

func (x *Inst) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_object_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inst.ProtoReflect.Descriptor instead.
func (*Inst) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_object_proto_rawDescGZIP(), []int{15}
}

func (x *Inst) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Inst) GetCompId() int32 {
	if x != nil && x.CompId != nil {
		return *x.CompId
	}
	return 0
}

func (x *Inst) GetInstId() uint32 {
	if x != nil && x.InstId != nil {
		return *x.InstId
	}
	return 0
}

func (x *Inst) GetInstSize() uint32 {
	if x != nil && x.InstSize != nil {
		return *x.InstSize
	}
	return 0
}

func (x *Inst) GetVtable() uint64 {
	if x != nil && x.Vtable != nil {
		return *x.Vtable
	}
	return 0
}

func (x *Inst) GetPin() []*Pin {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *Inst) GetParam() []*Param {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Inst) GetFunct() []*Function {
	if x != nil {
		return x.Funct
	}
	return nil
}

var File_machinetalk_protobuf_object_proto protoreflect.FileDescriptor

var file_machinetalk_protobuf_object_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xbc, 0x05, 0x22, 0xe8, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x07, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x07, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x49, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xbd, 0x05, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xbe, 0x05, 0x22, 0xb3, 0x01, 0x0a, 0x07, 0x41,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0f, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xbf, 0x05,
	0x22, 0xf1, 0x02, 0x0a, 0x03, 0x50, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x48, 0x61, 0x6c, 0x50,
	0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x6c, 0x62, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c, 0x73, 0x33, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x6c, 0x75, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61,
	0x6c, 0x75, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65,
	0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x06, 0x92, 0x3f,
	0x03, 0x48, 0xc0, 0x05, 0x22, 0xc4, 0x02, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c, 0x62, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x62, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x6c, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x06, 0x68, 0x61, 0x6c,
	0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c, 0x75, 0x33, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x75, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x64, 0x69, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x62, 0x69, 0x64,
	0x69, 0x72, 0x73, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xc1, 0x05, 0x22, 0x8d, 0x03, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x61, 0x6c, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68,
	0x61, 0x6c, 0x62, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c,
	0x75, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x75, 0x33,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x30, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x48, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x07, 0x6d, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xc2, 0x05, 0x22, 0x9d, 0x02, 0x0a, 0x08,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x48, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xc3, 0x05, 0x22, 0xd5, 0x01, 0x0a, 0x06,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x66, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x73, 0x46, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x92, 0x3f, 0x03,
	0x48, 0xc4, 0x05, 0x22, 0xef, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x61, 0x72, 0x67, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x61, 0x72, 0x67, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x61, 0x72, 0x67, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x61, 0x72, 0x67, 0x32, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x50, 0x69, 0x6e, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x92,
	0x3f, 0x03, 0x48, 0xc5, 0x05, 0x22, 0xe3, 0x02, 0x0a, 0x04, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6d, 0x75, 0x74,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x6d, 0x75, 0x74, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x74, 0x61,
	0x70, 0x69, 0x53, 0x68, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x06, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x70,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63,
	0x68, 0x70, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x6d,
	0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x68, 0x6d, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xc6, 0x05, 0x22, 0xa6, 0x02, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x61, 0x72, 0x67,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x61, 0x72, 0x67,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x03, 0x70,
	0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x06, 0x92, 0x3f,
	0x03, 0x48, 0xc7, 0x05, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x72, 0x67, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x72, 0x67, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x61, 0x72,
	0x67, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x61, 0x72,
	0x67, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x06, 0x92, 0x3f, 0x03,
	0x48, 0xc8, 0x05, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0a, 0x72, 0x63, 0x6f, 0x6d, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xc9, 0x05, 0x22, 0xbf, 0x01,
	0x0a, 0x06, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x06, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xca, 0x05, 0x22,
	0x84, 0x02, 0x0a, 0x04, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x76, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50,
	0x69, 0x6e, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x3a, 0x06,
	0x92, 0x3f, 0x03, 0x48, 0xcb, 0x05, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x6b, 0x69, 0x74, 0x2f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
}

var (
	file_machinetalk_protobuf_object_proto_rawDescOnce sync.Once
	file_machinetalk_protobuf_object_proto_rawDescData = file_machinetalk_protobuf_object_proto_rawDesc
)

func file_machinetalk_protobuf_object_proto_rawDescGZIP() []byte {
	file_machinetalk_protobuf_object_proto_rawDescOnce.Do(func() {
		file_machinetalk_protobuf_object_proto_rawDescData = protoimpl.X.CompressGZIP(file_machinetalk_protobuf_object_proto_rawDescData)
	})
	return file_machinetalk_protobuf_object_proto_rawDescData
}

var file_machinetalk_protobuf_object_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_machinetalk_protobuf_object_proto_goTypes = []interface{}{
	(*Instance)(nil),            // 0: machinetalk.Instance
	(*ServiceAnnouncement)(nil), // 1: machinetalk.ServiceAnnouncement
	(*Originator)(nil),          // 2: machinetalk.Originator
	(*AnError)(nil),             // 3: machinetalk.AnError
	(*Pin)(nil),                 // 4: machinetalk.Pin
	(*Signal)(nil),              // 5: machinetalk.Signal
	(*Param)(nil),               // 6: machinetalk.Param
	(*Function)(nil),            // 7: machinetalk.Function
	(*Thread)(nil),              // 8: machinetalk.Thread
	(*Component)(nil),           // 9: machinetalk.Component
	(*Ring)(nil),                // 10: machinetalk.Ring
	(*Member)(nil),              // 11: machinetalk.Member
	(*Group)(nil),               // 12: machinetalk.Group
	(*ProtocolParameters)(nil),  // 13: machinetalk.ProtocolParameters
	(*Vtable)(nil),              // 14: machinetalk.Vtable
	(*Inst)(nil),                // 15: machinetalk.Inst
	(ServiceType)(0),            // 16: machinetalk.ServiceType
	(ServiceAPI)(0),             // 17: machinetalk.ServiceAPI
	(OriginType)(0),             // 18: machinetalk.OriginType
	(OriginDetail)(0),           // 19: machinetalk.OriginDetail
	(Severity)(0),               // 20: machinetalk.Severity
	(ValueType)(0),              // 21: machinetalk.ValueType
	(HalPinDirection)(0),        // 22: machinetalk.HalPinDirection
	(HalParamDirection)(0),      // 23: machinetalk.HalParamDirection
	(HalFunctType)(0),           // 24: machinetalk.HalFunctType
	(ObjectType)(0),             // 25: machinetalk.ObjectType
}
var file_machinetalk_protobuf_object_proto_depIdxs = []int32{
	16, // 0: machinetalk.ServiceAnnouncement.stype:type_name -> machinetalk.ServiceType
	17, // 1: machinetalk.ServiceAnnouncement.api:type_name -> machinetalk.ServiceAPI
	18, // 2: machinetalk.Originator.origin:type_name -> machinetalk.OriginType
	19, // 3: machinetalk.Originator.detail:type_name -> machinetalk.OriginDetail
	0,  // 4: machinetalk.Originator.instance:type_name -> machinetalk.Instance
	20, // 5: machinetalk.AnError.severity:type_name -> machinetalk.Severity
	2,  // 6: machinetalk.AnError.origin:type_name -> machinetalk.Originator
	21, // 7: machinetalk.Pin.type:type_name -> machinetalk.ValueType
	22, // 8: machinetalk.Pin.dir:type_name -> machinetalk.HalPinDirection
	21, // 9: machinetalk.Signal.type:type_name -> machinetalk.ValueType
	21, // 10: machinetalk.Param.type:type_name -> machinetalk.ValueType
	23, // 11: machinetalk.Param.dir:type_name -> machinetalk.HalParamDirection
	24, // 12: machinetalk.Function.type:type_name -> machinetalk.HalFunctType
	4,  // 13: machinetalk.Component.pin:type_name -> machinetalk.Pin
	6,  // 14: machinetalk.Component.param:type_name -> machinetalk.Param
	7,  // 15: machinetalk.Component.funct:type_name -> machinetalk.Function
	25, // 16: machinetalk.Member.mtype:type_name -> machinetalk.ObjectType
	5,  // 17: machinetalk.Member.signal:type_name -> machinetalk.Signal
	4,  // 18: machinetalk.Member.pin:type_name -> machinetalk.Pin
	6,  // 19: machinetalk.Member.param:type_name -> machinetalk.Param
	11, // 20: machinetalk.Group.member:type_name -> machinetalk.Member
	4,  // 21: machinetalk.Inst.pin:type_name -> machinetalk.Pin
	6,  // 22: machinetalk.Inst.param:type_name -> machinetalk.Param
	7,  // 23: machinetalk.Inst.funct:type_name -> machinetalk.Function
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_machinetalk_protobuf_object_proto_init() }
func file_machinetalk_protobuf_object_proto_init() {
	if File_machinetalk_protobuf_object_proto != nil {
		return
	}
	file_machinetalk_protobuf_nanopb_proto_init()
	file_machinetalk_protobuf_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_machinetalk_protobuf_object_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Originator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vtable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machinetalk_protobuf_object_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machinetalk_protobuf_object_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machinetalk_protobuf_object_proto_goTypes,
		DependencyIndexes: file_machinetalk_protobuf_object_proto_depIdxs,
		MessageInfos:      file_machinetalk_protobuf_object_proto_msgTypes,
	}.Build()
	File_machinetalk_protobuf_object_proto = out.File
	file_machinetalk_protobuf_object_proto_rawDesc = nil
	file_machinetalk_protobuf_object_proto_goTypes = nil
	file_machinetalk_protobuf_object_proto_depIdxs = nil
}
