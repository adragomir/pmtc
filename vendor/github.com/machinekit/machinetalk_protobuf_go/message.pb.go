// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: machinetalk/protobuf/message.proto

// see README.msgid
// msgid base: 500

package machinetalk_protobuf_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ContainerType `protobuf:"varint,1,req,name=type,enum=machinetalk.ContainerType" json:"type,omitempty"`
	// protobuf-encoded submessages
	// tags with values in the range 1 through 15 take one byte to encode
	// so place the frequently used compound messages here
	Tsc             *int64         `protobuf:"fixed64,7,opt,name=tsc" json:"tsc,omitempty"` // rtapi_get_time
	Preview         []*Preview     `protobuf:"bytes,8,rep,name=preview" json:"preview,omitempty"`
	Motcmd          *MotionCommand `protobuf:"bytes,9,opt,name=motcmd" json:"motcmd,omitempty"`
	Motstat         *MotionStatus  `protobuf:"bytes,10,opt,name=motstat" json:"motstat,omitempty"`
	LegacyMotcmd    []byte         `protobuf:"bytes,11,opt,name=legacy_motcmd,json=legacyMotcmd" json:"legacy_motcmd,omitempty"`    // emcmot_command_t wrapped in PB
	LegacyMotstat   []byte         `protobuf:"bytes,12,opt,name=legacy_motstat,json=legacyMotstat" json:"legacy_motstat,omitempty"` // emcmot_status_t wrapped in PB
	RtapiMessage    *RTAPI_Message `protobuf:"bytes,13,opt,name=rtapi_message,json=rtapiMessage" json:"rtapi_message,omitempty"`
	TaskReply       *TaskReply     `protobuf:"bytes,14,opt,name=task_reply,json=taskReply" json:"task_reply,omitempty"`
	TicketUpdate    *TicketUpdate  `protobuf:"bytes,15,opt,name=ticket_update,json=ticketUpdate" json:"ticket_update,omitempty"`
	Syslog          []byte         `protobuf:"bytes,18,opt,name=syslog" json:"syslog,omitempty"`                                          // RFC5424 syslog(3) encoding
	LegacyNml       []byte         `protobuf:"bytes,19,opt,name=legacy_nml,json=legacyNml" json:"legacy_nml,omitempty"`                   // legacy NML container
	LegacyMotconfig []byte         `protobuf:"bytes,20,opt,name=legacy_motconfig,json=legacyMotconfig" json:"legacy_motconfig,omitempty"` // emcmot_config_t wrapped in PB
	// timestamps: as per struct timespec
	// obtain with clock_gettime(CLOCK_REALTIME, &spec);
	TvSec  *int32 `protobuf:"varint,21,opt,name=tv_sec,json=tvSec" json:"tv_sec,omitempty"` // can be used with ctime(3)
	TvNsec *int32 `protobuf:"varint,22,opt,name=tv_nsec,json=tvNsec" json:"tv_nsec,omitempty"`
	// this is for messages going over pub/sub streams and wind up in JSON frames
	// duplicating the topic here allows us to drop the topic frame
	Topic         *string `protobuf:"bytes,23,opt,name=topic" json:"topic,omitempty"`
	ReplyRequired *bool   `protobuf:"varint,24,opt,name=reply_required,json=replyRequired" json:"reply_required,omitempty"` // force a response even if OK
	// interpreter status updates, MT_INTERP_STAT
	InterpState *InterpreterStateType `protobuf:"varint,25,opt,name=interp_state,json=interpState,enum=machinetalk.InterpreterStateType" json:"interp_state,omitempty"`
	InterpName  *string               `protobuf:"bytes,26,opt,name=interp_name,json=interpName" json:"interp_name,omitempty"`
	// this is an or of bits in ReplyType:
	Rsvp        *int32         `protobuf:"varint,30,opt,name=rsvp" json:"rsvp,omitempty"` // if/how to answer
	InReplyTo   *ContainerType `protobuf:"varint,33,opt,name=in_reply_to,json=inReplyTo,enum=machinetalk.ContainerType" json:"in_reply_to,omitempty"`
	RcsStatus   *RCS_STATUS    `protobuf:"varint,35,opt,name=rcs_status,json=rcsStatus,enum=machinetalk.RCS_STATUS" json:"rcs_status,omitempty"`
	Status      *StatusType    `protobuf:"varint,40,opt,name=status,enum=machinetalk.StatusType" json:"status,omitempty"`
	Serial      *int32         `protobuf:"varint,45,opt,name=serial" json:"serial,omitempty"`                              // legacy command serials
	ReplySerial *int32         `protobuf:"varint,50,opt,name=reply_serial,json=replySerial" json:"reply_serial,omitempty"` // echoes the legacy command serial
	Ticket      *int32         `protobuf:"varint,55,opt,name=ticket" json:"ticket,omitempty"`                              // command serials
	ReplyTicket *int32         `protobuf:"varint,60,opt,name=reply_ticket,json=replyTicket" json:"reply_ticket,omitempty"` // echoes the legacy command serial
	// Credit based flow control: http://hintjens.com/blog:15
	Sequence *int32 `protobuf:"varint,62,opt,name=sequence" json:"sequence,omitempty"` // running count used by producero
	Credit   *int32 `protobuf:"varint,65,opt,name=credit" json:"credit,omitempty"`     // updated by consumer
	// legacy line number as conveyed on interplist
	// to be replaced by source context
	LineNumber *int32 `protobuf:"varint,66,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	// used with MT_MESSAGEBUS_NO_DESTINATION
	Name    *string  `protobuf:"bytes,67,opt,name=name" json:"name,omitempty"`        // faulty messagebus destination
	Note    []string `protobuf:"bytes,68,rep,name=note" json:"note,omitempty"`        // easy tack-on for debugging
	Retcode *int32   `protobuf:"varint,69,opt,name=retcode" json:"retcode,omitempty"` // all purpose integer return code
	// uuid helps distinguish server instances
	Uuid     []byte `protobuf:"bytes,72,opt,name=uuid" json:"uuid,omitempty"`
	Trace    *bool  `protobuf:"varint,75,opt,name=trace" json:"trace,omitempty"`       // log from intermediaries
	Instance *int32 `protobuf:"varint,77,opt,name=instance" json:"instance,omitempty"` // RTAPI instance if nonzero
	// generalized polymorphic argument list
	Value    []*Value      `protobuf:"bytes,85,rep,name=value" json:"value,omitempty"` //  [(nanopb).max_count = 20];
	Rtapicmd *RTAPICommand `protobuf:"bytes,86,opt,name=rtapicmd" json:"rtapicmd,omitempty"`
	// a reply may carry several service announcements:
	ServiceAnnouncement []*ServiceAnnouncement `protobuf:"bytes,88,rep,name=service_announcement,json=serviceAnnouncement" json:"service_announcement,omitempty"`
	// remote comp description for MT_HALCOMP_CREATE: [comp, pins*]
	Comp     []*Component        `protobuf:"bytes,100,rep,name=comp" json:"comp,omitempty"`
	Pin      []*Pin              `protobuf:"bytes,2,rep,name=pin" json:"pin,omitempty"`       // high frequency - use single byte tag
	Signal   []*Signal           `protobuf:"bytes,3,rep,name=signal" json:"signal,omitempty"` // high frequency - use single byte tag
	Param    []*Param            `protobuf:"bytes,103,rep,name=param" json:"param,omitempty"`
	Thread   []*Thread           `protobuf:"bytes,104,rep,name=thread" json:"thread,omitempty"`
	Ring     []*Ring             `protobuf:"bytes,105,rep,name=ring" json:"ring,omitempty"`
	Group    []*Group            `protobuf:"bytes,106,rep,name=group" json:"group,omitempty"`
	Member   []*Member           `protobuf:"bytes,107,rep,name=member" json:"member,omitempty"`
	Function []*Function         `protobuf:"bytes,108,rep,name=function" json:"function,omitempty"`
	Pparams  *ProtocolParameters `protobuf:"bytes,109,opt,name=pparams" json:"pparams,omitempty"`
	Vtable   []*Vtable           `protobuf:"bytes,110,rep,name=vtable" json:"vtable,omitempty"`
	Inst     []*Inst             `protobuf:"bytes,111,rep,name=inst" json:"inst,omitempty"`
	// the app field is  included as a reply to
	// a MT_LIST_APPLICATIONS and
	// MT_RETRIEVE_APPLICATION message
	App []*Application `protobuf:"bytes,120,rep,name=app" json:"app,omitempty"`
	// the launcher field is reported by
	// a MT_LAUNCHER_FULL_UPDATE
	// or a MT_LAUNCHER_INCREMENTAL_UPDATE message
	Launcher []*Launcher `protobuf:"bytes,130,rep,name=launcher" json:"launcher,omitempty"`
	Index    *int32      `protobuf:"varint,131,opt,name=index" json:"index,omitempty"`
	// infrequent compound messages
	//optional bytes         wou            = 160;  // Arais Wishbone-over-USB
	LogMessage *LogMessage `protobuf:"bytes,87,opt,name=log_message,json=logMessage" json:"log_message,omitempty"`
	// taskplan (interpreter command) messages
	Tpexecute      *TaskPlanExecute      `protobuf:"bytes,200,opt,name=tpexecute" json:"tpexecute,omitempty"`
	Tpblockdelete  *TaskPlanBlockDelete  `protobuf:"bytes,201,opt,name=tpblockdelete" json:"tpblockdelete,omitempty"`
	Tpoptionalstop *TaskPlanOptionalStop `protobuf:"bytes,202,opt,name=tpoptionalstop" json:"tpoptionalstop,omitempty"`
	Tpopen         *TaskPlanOpen         `protobuf:"bytes,203,opt,name=tpopen" json:"tpopen,omitempty"`
	// interpreter reply
	TaskplanReply *TaskPlanReply `protobuf:"bytes,210,opt,name=taskplan_reply,json=taskplanReply" json:"taskplan_reply,omitempty"`
	// canon messages
	TrajSetG5X                *Emc_Traj_Set_G5X                 `protobuf:"bytes,300,opt,name=traj_set_g5x,json=trajSetG5x" json:"traj_set_g5x,omitempty"`
	TrajSetG92                *Emc_Traj_Set_G92                 `protobuf:"bytes,310,opt,name=traj_set_g92,json=trajSetG92" json:"traj_set_g92,omitempty"`
	TrajSetRotation           *Emc_Traj_Set_Rotation            `protobuf:"bytes,320,opt,name=traj_set_rotation,json=trajSetRotation" json:"traj_set_rotation,omitempty"`
	TrajLinearMove            *Emc_Traj_Linear_Move             `protobuf:"bytes,330,opt,name=traj_linear_move,json=trajLinearMove" json:"traj_linear_move,omitempty"`
	TrajProbe                 *Emc_Traj_Probe                   `protobuf:"bytes,340,opt,name=traj_probe,json=trajProbe" json:"traj_probe,omitempty"`
	TrajCircularMove          *Emc_Traj_Circular_Move           `protobuf:"bytes,350,opt,name=traj_circular_move,json=trajCircularMove" json:"traj_circular_move,omitempty"`
	TrajRigidTap              *Emc_Traj_Rigid_Tap               `protobuf:"bytes,360,opt,name=traj_rigid_tap,json=trajRigidTap" json:"traj_rigid_tap,omitempty"`
	TrajSetTermCond           *Emc_Traj_Set_Term_Cond           `protobuf:"bytes,370,opt,name=traj_set_term_cond,json=trajSetTermCond" json:"traj_set_term_cond,omitempty"`
	TrajSetSpindlesync        *Emc_Traj_Set_Spindlesync         `protobuf:"bytes,380,opt,name=traj_set_spindlesync,json=trajSetSpindlesync" json:"traj_set_spindlesync,omitempty"`
	TrajDelay                 *Emc_Traj_Delay                   `protobuf:"bytes,390,opt,name=traj_delay,json=trajDelay" json:"traj_delay,omitempty"`
	SpindleOn                 *Emc_Spindle_On                   `protobuf:"bytes,400,opt,name=spindle_on,json=spindleOn" json:"spindle_on,omitempty"`
	SpindleSpeed              *Emc_Spindle_Speed                `protobuf:"bytes,410,opt,name=spindle_speed,json=spindleSpeed" json:"spindle_speed,omitempty"`
	SpindleOrient             *Emc_Spindle_Orient               `protobuf:"bytes,420,opt,name=spindle_orient,json=spindleOrient" json:"spindle_orient,omitempty"`
	SpindleWaitOrientComplete *Emc_Spindle_Wait_Orient_Complete `protobuf:"bytes,430,opt,name=spindle_wait_orient_complete,json=spindleWaitOrientComplete" json:"spindle_wait_orient_complete,omitempty"`
	ToolSetOffet              *Emc_Tool_Set_Offset              `protobuf:"bytes,440,opt,name=tool_set_offet,json=toolSetOffet" json:"tool_set_offet,omitempty"`
	TrajSetOffset             *Emc_Traj_Set_Offset              `protobuf:"bytes,450,opt,name=traj_set_offset,json=trajSetOffset" json:"traj_set_offset,omitempty"`
	ToolPrepare               *Emc_Tool_Prepare                 `protobuf:"bytes,460,opt,name=tool_prepare,json=toolPrepare" json:"tool_prepare,omitempty"`
	ToolSetNumber             *Emc_Tool_Set_Number              `protobuf:"bytes,470,opt,name=tool_set_number,json=toolSetNumber" json:"tool_set_number,omitempty"`
	TrajSetFoEnable           *Emc_Traj_Set_Fo_Enable           `protobuf:"bytes,480,opt,name=traj_set_fo_enable,json=trajSetFoEnable" json:"traj_set_fo_enable,omitempty"`
	TrajSetSoEnable           *Emc_Traj_Set_So_Enable           `protobuf:"bytes,490,opt,name=traj_set_so_enable,json=trajSetSoEnable" json:"traj_set_so_enable,omitempty"`
	TrajSetFhEnable           *Emc_Traj_Set_Fh_Enable           `protobuf:"bytes,500,opt,name=traj_set_fh_enable,json=trajSetFhEnable" json:"traj_set_fh_enable,omitempty"`
	MotionAdaptive            *Emc_Motion_Adaptive              `protobuf:"bytes,510,opt,name=motion_adaptive,json=motionAdaptive" json:"motion_adaptive,omitempty"`
	OperatorDisplay           *Emc_Operator_Display             `protobuf:"bytes,520,opt,name=operator_display,json=operatorDisplay" json:"operator_display,omitempty"`
	OperatorText              *Emc_Operator_Text                `protobuf:"bytes,530,opt,name=operator_text,json=operatorText" json:"operator_text,omitempty"`
	OperatorError             *Emc_Operator_Error               `protobuf:"bytes,540,opt,name=operator_error,json=operatorError" json:"operator_error,omitempty"`
	MotionSetDout             *Emc_Motion_Set_Dout              `protobuf:"bytes,550,opt,name=motion_set_dout,json=motionSetDout" json:"motion_set_dout,omitempty"`
	MotionSetAout             *Emc_Motion_Set_Aout              `protobuf:"bytes,560,opt,name=motion_set_aout,json=motionSetAout" json:"motion_set_aout,omitempty"`
	AuxInputWait              *Emc_Aux_Input_Wait               `protobuf:"bytes,570,opt,name=aux_input_wait,json=auxInputWait" json:"aux_input_wait,omitempty"`
	ExecPluginCall            *Emc_Exec_Plugin_Ca1L             `protobuf:"bytes,580,opt,name=exec_plugin_call,json=execPluginCall" json:"exec_plugin_call,omitempty"`
	IoPluginCall              *Emc_Io_Plugin_Call               `protobuf:"bytes,590,opt,name=io_plugin_call,json=ioPluginCall" json:"io_plugin_call,omitempty"`
	EmcStatusConfig           *EmcStatusConfig                  `protobuf:"bytes,600,opt,name=emc_status_config,json=emcStatusConfig" json:"emc_status_config,omitempty"`
	EmcStatusMotion           *EmcStatusMotion                  `protobuf:"bytes,601,opt,name=emc_status_motion,json=emcStatusMotion" json:"emc_status_motion,omitempty"`
	EmcStatusIo               *EmcStatusIo                      `protobuf:"bytes,602,opt,name=emc_status_io,json=emcStatusIo" json:"emc_status_io,omitempty"`
	EmcStatusTask             *EmcStatusTask                    `protobuf:"bytes,603,opt,name=emc_status_task,json=emcStatusTask" json:"emc_status_task,omitempty"`
	EmcStatusInterp           *EmcStatusInterp                  `protobuf:"bytes,604,opt,name=emc_status_interp,json=emcStatusInterp" json:"emc_status_interp,omitempty"`
	EmcStatusUi               *EmcStatusUI                      `protobuf:"bytes,605,opt,name=emc_status_ui,json=emcStatusUi" json:"emc_status_ui,omitempty"`
	EmcCommandParams          *EmcCommandParameters             `protobuf:"bytes,610,opt,name=emc_command_params,json=emcCommandParams" json:"emc_command_params,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machinetalk_protobuf_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_machinetalk_protobuf_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_machinetalk_protobuf_message_proto_rawDescGZIP(), []int{0}
}

func (x *Container) GetType() ContainerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ContainerType_MT_RTMESSAGE
}

func (x *Container) GetTsc() int64 {
	if x != nil && x.Tsc != nil {
		return *x.Tsc
	}
	return 0
}

func (x *Container) GetPreview() []*Preview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Container) GetMotcmd() *MotionCommand {
	if x != nil {
		return x.Motcmd
	}
	return nil
}

func (x *Container) GetMotstat() *MotionStatus {
	if x != nil {
		return x.Motstat
	}
	return nil
}

func (x *Container) GetLegacyMotcmd() []byte {
	if x != nil {
		return x.LegacyMotcmd
	}
	return nil
}

func (x *Container) GetLegacyMotstat() []byte {
	if x != nil {
		return x.LegacyMotstat
	}
	return nil
}

func (x *Container) GetRtapiMessage() *RTAPI_Message {
	if x != nil {
		return x.RtapiMessage
	}
	return nil
}

func (x *Container) GetTaskReply() *TaskReply {
	if x != nil {
		return x.TaskReply
	}
	return nil
}

func (x *Container) GetTicketUpdate() *TicketUpdate {
	if x != nil {
		return x.TicketUpdate
	}
	return nil
}

func (x *Container) GetSyslog() []byte {
	if x != nil {
		return x.Syslog
	}
	return nil
}

func (x *Container) GetLegacyNml() []byte {
	if x != nil {
		return x.LegacyNml
	}
	return nil
}

func (x *Container) GetLegacyMotconfig() []byte {
	if x != nil {
		return x.LegacyMotconfig
	}
	return nil
}

func (x *Container) GetTvSec() int32 {
	if x != nil && x.TvSec != nil {
		return *x.TvSec
	}
	return 0
}

func (x *Container) GetTvNsec() int32 {
	if x != nil && x.TvNsec != nil {
		return *x.TvNsec
	}
	return 0
}

func (x *Container) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *Container) GetReplyRequired() bool {
	if x != nil && x.ReplyRequired != nil {
		return *x.ReplyRequired
	}
	return false
}

func (x *Container) GetInterpState() InterpreterStateType {
	if x != nil && x.InterpState != nil {
		return *x.InterpState
	}
	return InterpreterStateType_INTERP_IDLE
}

func (x *Container) GetInterpName() string {
	if x != nil && x.InterpName != nil {
		return *x.InterpName
	}
	return ""
}

func (x *Container) GetRsvp() int32 {
	if x != nil && x.Rsvp != nil {
		return *x.Rsvp
	}
	return 0
}

func (x *Container) GetInReplyTo() ContainerType {
	if x != nil && x.InReplyTo != nil {
		return *x.InReplyTo
	}
	return ContainerType_MT_RTMESSAGE
}

func (x *Container) GetRcsStatus() RCS_STATUS {
	if x != nil && x.RcsStatus != nil {
		return *x.RcsStatus
	}
	return RCS_STATUS_UNINITIALIZED_STATUS
}

func (x *Container) GetStatus() StatusType {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusType_ENQUEUED
}

func (x *Container) GetSerial() int32 {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return 0
}

func (x *Container) GetReplySerial() int32 {
	if x != nil && x.ReplySerial != nil {
		return *x.ReplySerial
	}
	return 0
}

func (x *Container) GetTicket() int32 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *Container) GetReplyTicket() int32 {
	if x != nil && x.ReplyTicket != nil {
		return *x.ReplyTicket
	}
	return 0
}

func (x *Container) GetSequence() int32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *Container) GetCredit() int32 {
	if x != nil && x.Credit != nil {
		return *x.Credit
	}
	return 0
}

func (x *Container) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *Container) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Container) GetNote() []string {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Container) GetRetcode() int32 {
	if x != nil && x.Retcode != nil {
		return *x.Retcode
	}
	return 0
}

func (x *Container) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Container) GetTrace() bool {
	if x != nil && x.Trace != nil {
		return *x.Trace
	}
	return false
}

func (x *Container) GetInstance() int32 {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return 0
}

func (x *Container) GetValue() []*Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Container) GetRtapicmd() *RTAPICommand {
	if x != nil {
		return x.Rtapicmd
	}
	return nil
}

func (x *Container) GetServiceAnnouncement() []*ServiceAnnouncement {
	if x != nil {
		return x.ServiceAnnouncement
	}
	return nil
}

func (x *Container) GetComp() []*Component {
	if x != nil {
		return x.Comp
	}
	return nil
}

func (x *Container) GetPin() []*Pin {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *Container) GetSignal() []*Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *Container) GetParam() []*Param {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Container) GetThread() []*Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *Container) GetRing() []*Ring {
	if x != nil {
		return x.Ring
	}
	return nil
}

func (x *Container) GetGroup() []*Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Container) GetMember() []*Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Container) GetFunction() []*Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *Container) GetPparams() *ProtocolParameters {
	if x != nil {
		return x.Pparams
	}
	return nil
}

func (x *Container) GetVtable() []*Vtable {
	if x != nil {
		return x.Vtable
	}
	return nil
}

func (x *Container) GetInst() []*Inst {
	if x != nil {
		return x.Inst
	}
	return nil
}

func (x *Container) GetApp() []*Application {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Container) GetLauncher() []*Launcher {
	if x != nil {
		return x.Launcher
	}
	return nil
}

func (x *Container) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Container) GetLogMessage() *LogMessage {
	if x != nil {
		return x.LogMessage
	}
	return nil
}

func (x *Container) GetTpexecute() *TaskPlanExecute {
	if x != nil {
		return x.Tpexecute
	}
	return nil
}

func (x *Container) GetTpblockdelete() *TaskPlanBlockDelete {
	if x != nil {
		return x.Tpblockdelete
	}
	return nil
}

func (x *Container) GetTpoptionalstop() *TaskPlanOptionalStop {
	if x != nil {
		return x.Tpoptionalstop
	}
	return nil
}

func (x *Container) GetTpopen() *TaskPlanOpen {
	if x != nil {
		return x.Tpopen
	}
	return nil
}

func (x *Container) GetTaskplanReply() *TaskPlanReply {
	if x != nil {
		return x.TaskplanReply
	}
	return nil
}

func (x *Container) GetTrajSetG5X() *Emc_Traj_Set_G5X {
	if x != nil {
		return x.TrajSetG5X
	}
	return nil
}

func (x *Container) GetTrajSetG92() *Emc_Traj_Set_G92 {
	if x != nil {
		return x.TrajSetG92
	}
	return nil
}

func (x *Container) GetTrajSetRotation() *Emc_Traj_Set_Rotation {
	if x != nil {
		return x.TrajSetRotation
	}
	return nil
}

func (x *Container) GetTrajLinearMove() *Emc_Traj_Linear_Move {
	if x != nil {
		return x.TrajLinearMove
	}
	return nil
}

func (x *Container) GetTrajProbe() *Emc_Traj_Probe {
	if x != nil {
		return x.TrajProbe
	}
	return nil
}

func (x *Container) GetTrajCircularMove() *Emc_Traj_Circular_Move {
	if x != nil {
		return x.TrajCircularMove
	}
	return nil
}

func (x *Container) GetTrajRigidTap() *Emc_Traj_Rigid_Tap {
	if x != nil {
		return x.TrajRigidTap
	}
	return nil
}

func (x *Container) GetTrajSetTermCond() *Emc_Traj_Set_Term_Cond {
	if x != nil {
		return x.TrajSetTermCond
	}
	return nil
}

func (x *Container) GetTrajSetSpindlesync() *Emc_Traj_Set_Spindlesync {
	if x != nil {
		return x.TrajSetSpindlesync
	}
	return nil
}

func (x *Container) GetTrajDelay() *Emc_Traj_Delay {
	if x != nil {
		return x.TrajDelay
	}
	return nil
}

func (x *Container) GetSpindleOn() *Emc_Spindle_On {
	if x != nil {
		return x.SpindleOn
	}
	return nil
}

func (x *Container) GetSpindleSpeed() *Emc_Spindle_Speed {
	if x != nil {
		return x.SpindleSpeed
	}
	return nil
}

func (x *Container) GetSpindleOrient() *Emc_Spindle_Orient {
	if x != nil {
		return x.SpindleOrient
	}
	return nil
}

func (x *Container) GetSpindleWaitOrientComplete() *Emc_Spindle_Wait_Orient_Complete {
	if x != nil {
		return x.SpindleWaitOrientComplete
	}
	return nil
}

func (x *Container) GetToolSetOffet() *Emc_Tool_Set_Offset {
	if x != nil {
		return x.ToolSetOffet
	}
	return nil
}

func (x *Container) GetTrajSetOffset() *Emc_Traj_Set_Offset {
	if x != nil {
		return x.TrajSetOffset
	}
	return nil
}

func (x *Container) GetToolPrepare() *Emc_Tool_Prepare {
	if x != nil {
		return x.ToolPrepare
	}
	return nil
}

func (x *Container) GetToolSetNumber() *Emc_Tool_Set_Number {
	if x != nil {
		return x.ToolSetNumber
	}
	return nil
}

func (x *Container) GetTrajSetFoEnable() *Emc_Traj_Set_Fo_Enable {
	if x != nil {
		return x.TrajSetFoEnable
	}
	return nil
}

func (x *Container) GetTrajSetSoEnable() *Emc_Traj_Set_So_Enable {
	if x != nil {
		return x.TrajSetSoEnable
	}
	return nil
}

func (x *Container) GetTrajSetFhEnable() *Emc_Traj_Set_Fh_Enable {
	if x != nil {
		return x.TrajSetFhEnable
	}
	return nil
}

func (x *Container) GetMotionAdaptive() *Emc_Motion_Adaptive {
	if x != nil {
		return x.MotionAdaptive
	}
	return nil
}

func (x *Container) GetOperatorDisplay() *Emc_Operator_Display {
	if x != nil {
		return x.OperatorDisplay
	}
	return nil
}

func (x *Container) GetOperatorText() *Emc_Operator_Text {
	if x != nil {
		return x.OperatorText
	}
	return nil
}

func (x *Container) GetOperatorError() *Emc_Operator_Error {
	if x != nil {
		return x.OperatorError
	}
	return nil
}

func (x *Container) GetMotionSetDout() *Emc_Motion_Set_Dout {
	if x != nil {
		return x.MotionSetDout
	}
	return nil
}

func (x *Container) GetMotionSetAout() *Emc_Motion_Set_Aout {
	if x != nil {
		return x.MotionSetAout
	}
	return nil
}

func (x *Container) GetAuxInputWait() *Emc_Aux_Input_Wait {
	if x != nil {
		return x.AuxInputWait
	}
	return nil
}

func (x *Container) GetExecPluginCall() *Emc_Exec_Plugin_Ca1L {
	if x != nil {
		return x.ExecPluginCall
	}
	return nil
}

func (x *Container) GetIoPluginCall() *Emc_Io_Plugin_Call {
	if x != nil {
		return x.IoPluginCall
	}
	return nil
}

func (x *Container) GetEmcStatusConfig() *EmcStatusConfig {
	if x != nil {
		return x.EmcStatusConfig
	}
	return nil
}

func (x *Container) GetEmcStatusMotion() *EmcStatusMotion {
	if x != nil {
		return x.EmcStatusMotion
	}
	return nil
}

func (x *Container) GetEmcStatusIo() *EmcStatusIo {
	if x != nil {
		return x.EmcStatusIo
	}
	return nil
}

func (x *Container) GetEmcStatusTask() *EmcStatusTask {
	if x != nil {
		return x.EmcStatusTask
	}
	return nil
}

func (x *Container) GetEmcStatusInterp() *EmcStatusInterp {
	if x != nil {
		return x.EmcStatusInterp
	}
	return nil
}

func (x *Container) GetEmcStatusUi() *EmcStatusUI {
	if x != nil {
		return x.EmcStatusUi
	}
	return nil
}

func (x *Container) GetEmcCommandParams() *EmcCommandParameters {
	if x != nil {
		return x.EmcCommandParams
	}
	return nil
}

var File_machinetalk_protobuf_message_proto protoreflect.FileDescriptor

var file_machinetalk_protobuf_message_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6d, 0x6f, 0x74, 0x63, 0x6d, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x74, 0x61, 0x70, 0x69, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x72, 0x74, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xea, 0x2b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x74, 0x73, 0x63, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x74, 0x63, 0x6d, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x06, 0x6d, 0x6f, 0x74, 0x63, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x6f,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6d, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x2a, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x63, 0x6d, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0c, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x74, 0x63, 0x6d, 0x64, 0x12, 0x2c, 0x0a, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x4d, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x74, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52,
	0x54, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x74,
	0x61, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x24, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x6e, 0x6d, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x92, 0x3f, 0x02,
	0x18, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4e, 0x6d, 0x6c, 0x12, 0x30, 0x0a,
	0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0f,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x76, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x76, 0x53, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x76, 0x5f, 0x6e, 0x73, 0x65,
	0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x76, 0x4e, 0x73, 0x65, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x76, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x76, 0x70, 0x12, 0x3a,
	0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x63,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x43, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x09, 0x72, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x3f,
	0x02, 0x18, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x44, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x55, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x74, 0x61, 0x70, 0x69, 0x63, 0x6d,
	0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x54, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x08, 0x72, 0x74, 0x61, 0x70, 0x69,
	0x63, 0x6d, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x58, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x6d, 0x70, 0x12, 0x29, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x69,
	0x6e, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x32, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x06,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x69,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x04,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x6a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18,
	0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x07, 0x70, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x6e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x56, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18,
	0x03, 0x52, 0x06, 0x76, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x73,
	0x74, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18,
	0x03, 0x52, 0x04, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x78,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05,
	0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x70, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x09, 0x74,
	0x70, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x70, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0d, 0x74, 0x70, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x74, 0x70, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x70, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x70, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0e, 0x74, 0x70, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x06, 0x74,
	0x70, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x06,
	0x74, 0x70, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x05, 0x92, 0x3f, 0x02,
	0x18, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x35,
	0x78, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f,
	0x53, 0x65, 0x74, 0x5f, 0x47, 0x35, 0x78, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x53, 0x65, 0x74,
	0x47, 0x35, 0x78, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x67, 0x39, 0x32, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61,
	0x6a, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x47, 0x39, 0x32, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x53,
	0x65, 0x74, 0x47, 0x39, 0x32, 0x12, 0x4f, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6a, 0x53, 0x65, 0x74, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6a, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a,
	0x5f, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6a, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x12, 0x52, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63,
	0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x4d,
	0x6f, 0x76, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6a, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x72, 0x69,
	0x67, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x70, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63,
	0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x52, 0x69, 0x67, 0x69, 0x64, 0x5f, 0x54, 0x61, 0x70, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6a, 0x52, 0x69, 0x67, 0x69, 0x64, 0x54, 0x61, 0x70, 0x12, 0x51, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61,
	0x6a, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x54, 0x65, 0x72, 0x6d, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6a, 0x53, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x64,
	0x12, 0x58, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x69,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d,
	0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x53, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6a, 0x53, 0x65, 0x74, 0x53,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6a, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d,
	0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6a, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x53,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x4f, 0x6e, 0x52, 0x09, 0x73, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x4f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x53,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0c, 0x73, 0x70,
	0x69, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x70,
	0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xa4, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x53, 0x70, 0x69,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x5f, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x19, 0x73, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x74, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f,
	0x54, 0x6f, 0x6f, 0x6c, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x74, 0x12, 0x49, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x53,
	0x65, 0x74, 0x5f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6a, 0x53,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d,
	0x63, 0x5f, 0x54, 0x6f, 0x6f, 0x6c, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x0b,
	0x74, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xd6,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x6f, 0x6f, 0x6c, 0x5f, 0x53, 0x65, 0x74,
	0x5f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xe0, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x46,
	0x6f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6a, 0x53, 0x65,
	0x74, 0x46, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xea, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a, 0x5f, 0x53, 0x65,
	0x74, 0x5f, 0x53, 0x6f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6a, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x54, 0x72, 0x61, 0x6a,
	0x5f, 0x53, 0x65, 0x74, 0x5f, 0x46, 0x68, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6a, 0x53, 0x65, 0x74, 0x46, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x88, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x92, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x47, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x9c, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x74, 0x18, 0xa6, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x74,
	0x5f, 0x44, 0x6f, 0x75, 0x74, 0x52, 0x0d, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x44, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x6f, 0x75, 0x74, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63,
	0x5f, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x41, 0x6f, 0x75, 0x74,
	0x52, 0x0d, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x6f, 0x75, 0x74, 0x12,
	0x46, 0x0a, 0x0e, 0x61, 0x75, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x18, 0xba, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x41, 0x75, 0x78, 0x5f, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x52, 0x0c, 0x61, 0x75, 0x78, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x57, 0x61, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xc4, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x45, 0x6d, 0x63, 0x5f, 0x45, 0x78, 0x65, 0x63, 0x5f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x43, 0x61, 0x31, 0x6c, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x6f, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xce, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63,
	0x5f, 0x49, 0x6f, 0x5f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x0c, 0x69, 0x6f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x50, 0x0a,
	0x11, 0x65, 0x6d, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0f,
	0x65, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x11, 0x65, 0x6d, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03,
	0x52, 0x0f, 0x65, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x6d, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x6f, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6f, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0b, 0x65, 0x6d, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6f, 0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x6d, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x45, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x05, 0x92,
	0x3f, 0x02, 0x18, 0x03, 0x52, 0x0d, 0x65, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x50, 0x0a, 0x11, 0x65, 0x6d, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x42, 0x05, 0x92,
	0x3f, 0x02, 0x18, 0x03, 0x52, 0x0f, 0x65, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x6d, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x75, 0x69, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x49, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x18, 0x03, 0x52, 0x0b,
	0x65, 0x6d, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x69, 0x12, 0x57, 0x0a, 0x12, 0x65,
	0x6d, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6d, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x05, 0x92, 0x3f, 0x02,
	0x18, 0x03, 0x52, 0x10, 0x65, 0x6d, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x3a, 0x06, 0x92, 0x3f, 0x03, 0x48, 0xf4, 0x03, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x6c,
	0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
}

var (
	file_machinetalk_protobuf_message_proto_rawDescOnce sync.Once
	file_machinetalk_protobuf_message_proto_rawDescData = file_machinetalk_protobuf_message_proto_rawDesc
)

func file_machinetalk_protobuf_message_proto_rawDescGZIP() []byte {
	file_machinetalk_protobuf_message_proto_rawDescOnce.Do(func() {
		file_machinetalk_protobuf_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_machinetalk_protobuf_message_proto_rawDescData)
	})
	return file_machinetalk_protobuf_message_proto_rawDescData
}

var file_machinetalk_protobuf_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_machinetalk_protobuf_message_proto_goTypes = []interface{}{
	(*Container)(nil),                        // 0: machinetalk.Container
	(ContainerType)(0),                       // 1: machinetalk.ContainerType
	(*Preview)(nil),                          // 2: machinetalk.Preview
	(*MotionCommand)(nil),                    // 3: machinetalk.MotionCommand
	(*MotionStatus)(nil),                     // 4: machinetalk.MotionStatus
	(*RTAPI_Message)(nil),                    // 5: machinetalk.RTAPI_Message
	(*TaskReply)(nil),                        // 6: machinetalk.TaskReply
	(*TicketUpdate)(nil),                     // 7: machinetalk.TicketUpdate
	(InterpreterStateType)(0),                // 8: machinetalk.InterpreterStateType
	(RCS_STATUS)(0),                          // 9: machinetalk.RCS_STATUS
	(StatusType)(0),                          // 10: machinetalk.StatusType
	(*Value)(nil),                            // 11: machinetalk.Value
	(*RTAPICommand)(nil),                     // 12: machinetalk.RTAPICommand
	(*ServiceAnnouncement)(nil),              // 13: machinetalk.ServiceAnnouncement
	(*Component)(nil),                        // 14: machinetalk.Component
	(*Pin)(nil),                              // 15: machinetalk.Pin
	(*Signal)(nil),                           // 16: machinetalk.Signal
	(*Param)(nil),                            // 17: machinetalk.Param
	(*Thread)(nil),                           // 18: machinetalk.Thread
	(*Ring)(nil),                             // 19: machinetalk.Ring
	(*Group)(nil),                            // 20: machinetalk.Group
	(*Member)(nil),                           // 21: machinetalk.Member
	(*Function)(nil),                         // 22: machinetalk.Function
	(*ProtocolParameters)(nil),               // 23: machinetalk.ProtocolParameters
	(*Vtable)(nil),                           // 24: machinetalk.Vtable
	(*Inst)(nil),                             // 25: machinetalk.Inst
	(*Application)(nil),                      // 26: machinetalk.Application
	(*Launcher)(nil),                         // 27: machinetalk.Launcher
	(*LogMessage)(nil),                       // 28: machinetalk.LogMessage
	(*TaskPlanExecute)(nil),                  // 29: machinetalk.TaskPlanExecute
	(*TaskPlanBlockDelete)(nil),              // 30: machinetalk.TaskPlanBlockDelete
	(*TaskPlanOptionalStop)(nil),             // 31: machinetalk.TaskPlanOptionalStop
	(*TaskPlanOpen)(nil),                     // 32: machinetalk.TaskPlanOpen
	(*TaskPlanReply)(nil),                    // 33: machinetalk.TaskPlanReply
	(*Emc_Traj_Set_G5X)(nil),                 // 34: machinetalk.Emc_Traj_Set_G5x
	(*Emc_Traj_Set_G92)(nil),                 // 35: machinetalk.Emc_Traj_Set_G92
	(*Emc_Traj_Set_Rotation)(nil),            // 36: machinetalk.Emc_Traj_Set_Rotation
	(*Emc_Traj_Linear_Move)(nil),             // 37: machinetalk.Emc_Traj_Linear_Move
	(*Emc_Traj_Probe)(nil),                   // 38: machinetalk.Emc_Traj_Probe
	(*Emc_Traj_Circular_Move)(nil),           // 39: machinetalk.Emc_Traj_Circular_Move
	(*Emc_Traj_Rigid_Tap)(nil),               // 40: machinetalk.Emc_Traj_Rigid_Tap
	(*Emc_Traj_Set_Term_Cond)(nil),           // 41: machinetalk.Emc_Traj_Set_Term_Cond
	(*Emc_Traj_Set_Spindlesync)(nil),         // 42: machinetalk.Emc_Traj_Set_Spindlesync
	(*Emc_Traj_Delay)(nil),                   // 43: machinetalk.Emc_Traj_Delay
	(*Emc_Spindle_On)(nil),                   // 44: machinetalk.Emc_Spindle_On
	(*Emc_Spindle_Speed)(nil),                // 45: machinetalk.Emc_Spindle_Speed
	(*Emc_Spindle_Orient)(nil),               // 46: machinetalk.Emc_Spindle_Orient
	(*Emc_Spindle_Wait_Orient_Complete)(nil), // 47: machinetalk.Emc_Spindle_Wait_Orient_Complete
	(*Emc_Tool_Set_Offset)(nil),              // 48: machinetalk.Emc_Tool_Set_Offset
	(*Emc_Traj_Set_Offset)(nil),              // 49: machinetalk.Emc_Traj_Set_Offset
	(*Emc_Tool_Prepare)(nil),                 // 50: machinetalk.Emc_Tool_Prepare
	(*Emc_Tool_Set_Number)(nil),              // 51: machinetalk.Emc_Tool_Set_Number
	(*Emc_Traj_Set_Fo_Enable)(nil),           // 52: machinetalk.Emc_Traj_Set_Fo_Enable
	(*Emc_Traj_Set_So_Enable)(nil),           // 53: machinetalk.Emc_Traj_Set_So_Enable
	(*Emc_Traj_Set_Fh_Enable)(nil),           // 54: machinetalk.Emc_Traj_Set_Fh_Enable
	(*Emc_Motion_Adaptive)(nil),              // 55: machinetalk.Emc_Motion_Adaptive
	(*Emc_Operator_Display)(nil),             // 56: machinetalk.Emc_Operator_Display
	(*Emc_Operator_Text)(nil),                // 57: machinetalk.Emc_Operator_Text
	(*Emc_Operator_Error)(nil),               // 58: machinetalk.Emc_Operator_Error
	(*Emc_Motion_Set_Dout)(nil),              // 59: machinetalk.Emc_Motion_Set_Dout
	(*Emc_Motion_Set_Aout)(nil),              // 60: machinetalk.Emc_Motion_Set_Aout
	(*Emc_Aux_Input_Wait)(nil),               // 61: machinetalk.Emc_Aux_Input_Wait
	(*Emc_Exec_Plugin_Ca1L)(nil),             // 62: machinetalk.Emc_Exec_Plugin_Ca1l
	(*Emc_Io_Plugin_Call)(nil),               // 63: machinetalk.Emc_Io_Plugin_Call
	(*EmcStatusConfig)(nil),                  // 64: machinetalk.EmcStatusConfig
	(*EmcStatusMotion)(nil),                  // 65: machinetalk.EmcStatusMotion
	(*EmcStatusIo)(nil),                      // 66: machinetalk.EmcStatusIo
	(*EmcStatusTask)(nil),                    // 67: machinetalk.EmcStatusTask
	(*EmcStatusInterp)(nil),                  // 68: machinetalk.EmcStatusInterp
	(*EmcStatusUI)(nil),                      // 69: machinetalk.EmcStatusUI
	(*EmcCommandParameters)(nil),             // 70: machinetalk.EmcCommandParameters
}
var file_machinetalk_protobuf_message_proto_depIdxs = []int32{
	1,  // 0: machinetalk.Container.type:type_name -> machinetalk.ContainerType
	2,  // 1: machinetalk.Container.preview:type_name -> machinetalk.Preview
	3,  // 2: machinetalk.Container.motcmd:type_name -> machinetalk.MotionCommand
	4,  // 3: machinetalk.Container.motstat:type_name -> machinetalk.MotionStatus
	5,  // 4: machinetalk.Container.rtapi_message:type_name -> machinetalk.RTAPI_Message
	6,  // 5: machinetalk.Container.task_reply:type_name -> machinetalk.TaskReply
	7,  // 6: machinetalk.Container.ticket_update:type_name -> machinetalk.TicketUpdate
	8,  // 7: machinetalk.Container.interp_state:type_name -> machinetalk.InterpreterStateType
	1,  // 8: machinetalk.Container.in_reply_to:type_name -> machinetalk.ContainerType
	9,  // 9: machinetalk.Container.rcs_status:type_name -> machinetalk.RCS_STATUS
	10, // 10: machinetalk.Container.status:type_name -> machinetalk.StatusType
	11, // 11: machinetalk.Container.value:type_name -> machinetalk.Value
	12, // 12: machinetalk.Container.rtapicmd:type_name -> machinetalk.RTAPICommand
	13, // 13: machinetalk.Container.service_announcement:type_name -> machinetalk.ServiceAnnouncement
	14, // 14: machinetalk.Container.comp:type_name -> machinetalk.Component
	15, // 15: machinetalk.Container.pin:type_name -> machinetalk.Pin
	16, // 16: machinetalk.Container.signal:type_name -> machinetalk.Signal
	17, // 17: machinetalk.Container.param:type_name -> machinetalk.Param
	18, // 18: machinetalk.Container.thread:type_name -> machinetalk.Thread
	19, // 19: machinetalk.Container.ring:type_name -> machinetalk.Ring
	20, // 20: machinetalk.Container.group:type_name -> machinetalk.Group
	21, // 21: machinetalk.Container.member:type_name -> machinetalk.Member
	22, // 22: machinetalk.Container.function:type_name -> machinetalk.Function
	23, // 23: machinetalk.Container.pparams:type_name -> machinetalk.ProtocolParameters
	24, // 24: machinetalk.Container.vtable:type_name -> machinetalk.Vtable
	25, // 25: machinetalk.Container.inst:type_name -> machinetalk.Inst
	26, // 26: machinetalk.Container.app:type_name -> machinetalk.Application
	27, // 27: machinetalk.Container.launcher:type_name -> machinetalk.Launcher
	28, // 28: machinetalk.Container.log_message:type_name -> machinetalk.LogMessage
	29, // 29: machinetalk.Container.tpexecute:type_name -> machinetalk.TaskPlanExecute
	30, // 30: machinetalk.Container.tpblockdelete:type_name -> machinetalk.TaskPlanBlockDelete
	31, // 31: machinetalk.Container.tpoptionalstop:type_name -> machinetalk.TaskPlanOptionalStop
	32, // 32: machinetalk.Container.tpopen:type_name -> machinetalk.TaskPlanOpen
	33, // 33: machinetalk.Container.taskplan_reply:type_name -> machinetalk.TaskPlanReply
	34, // 34: machinetalk.Container.traj_set_g5x:type_name -> machinetalk.Emc_Traj_Set_G5x
	35, // 35: machinetalk.Container.traj_set_g92:type_name -> machinetalk.Emc_Traj_Set_G92
	36, // 36: machinetalk.Container.traj_set_rotation:type_name -> machinetalk.Emc_Traj_Set_Rotation
	37, // 37: machinetalk.Container.traj_linear_move:type_name -> machinetalk.Emc_Traj_Linear_Move
	38, // 38: machinetalk.Container.traj_probe:type_name -> machinetalk.Emc_Traj_Probe
	39, // 39: machinetalk.Container.traj_circular_move:type_name -> machinetalk.Emc_Traj_Circular_Move
	40, // 40: machinetalk.Container.traj_rigid_tap:type_name -> machinetalk.Emc_Traj_Rigid_Tap
	41, // 41: machinetalk.Container.traj_set_term_cond:type_name -> machinetalk.Emc_Traj_Set_Term_Cond
	42, // 42: machinetalk.Container.traj_set_spindlesync:type_name -> machinetalk.Emc_Traj_Set_Spindlesync
	43, // 43: machinetalk.Container.traj_delay:type_name -> machinetalk.Emc_Traj_Delay
	44, // 44: machinetalk.Container.spindle_on:type_name -> machinetalk.Emc_Spindle_On
	45, // 45: machinetalk.Container.spindle_speed:type_name -> machinetalk.Emc_Spindle_Speed
	46, // 46: machinetalk.Container.spindle_orient:type_name -> machinetalk.Emc_Spindle_Orient
	47, // 47: machinetalk.Container.spindle_wait_orient_complete:type_name -> machinetalk.Emc_Spindle_Wait_Orient_Complete
	48, // 48: machinetalk.Container.tool_set_offet:type_name -> machinetalk.Emc_Tool_Set_Offset
	49, // 49: machinetalk.Container.traj_set_offset:type_name -> machinetalk.Emc_Traj_Set_Offset
	50, // 50: machinetalk.Container.tool_prepare:type_name -> machinetalk.Emc_Tool_Prepare
	51, // 51: machinetalk.Container.tool_set_number:type_name -> machinetalk.Emc_Tool_Set_Number
	52, // 52: machinetalk.Container.traj_set_fo_enable:type_name -> machinetalk.Emc_Traj_Set_Fo_Enable
	53, // 53: machinetalk.Container.traj_set_so_enable:type_name -> machinetalk.Emc_Traj_Set_So_Enable
	54, // 54: machinetalk.Container.traj_set_fh_enable:type_name -> machinetalk.Emc_Traj_Set_Fh_Enable
	55, // 55: machinetalk.Container.motion_adaptive:type_name -> machinetalk.Emc_Motion_Adaptive
	56, // 56: machinetalk.Container.operator_display:type_name -> machinetalk.Emc_Operator_Display
	57, // 57: machinetalk.Container.operator_text:type_name -> machinetalk.Emc_Operator_Text
	58, // 58: machinetalk.Container.operator_error:type_name -> machinetalk.Emc_Operator_Error
	59, // 59: machinetalk.Container.motion_set_dout:type_name -> machinetalk.Emc_Motion_Set_Dout
	60, // 60: machinetalk.Container.motion_set_aout:type_name -> machinetalk.Emc_Motion_Set_Aout
	61, // 61: machinetalk.Container.aux_input_wait:type_name -> machinetalk.Emc_Aux_Input_Wait
	62, // 62: machinetalk.Container.exec_plugin_call:type_name -> machinetalk.Emc_Exec_Plugin_Ca1l
	63, // 63: machinetalk.Container.io_plugin_call:type_name -> machinetalk.Emc_Io_Plugin_Call
	64, // 64: machinetalk.Container.emc_status_config:type_name -> machinetalk.EmcStatusConfig
	65, // 65: machinetalk.Container.emc_status_motion:type_name -> machinetalk.EmcStatusMotion
	66, // 66: machinetalk.Container.emc_status_io:type_name -> machinetalk.EmcStatusIo
	67, // 67: machinetalk.Container.emc_status_task:type_name -> machinetalk.EmcStatusTask
	68, // 68: machinetalk.Container.emc_status_interp:type_name -> machinetalk.EmcStatusInterp
	69, // 69: machinetalk.Container.emc_status_ui:type_name -> machinetalk.EmcStatusUI
	70, // 70: machinetalk.Container.emc_command_params:type_name -> machinetalk.EmcCommandParameters
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_machinetalk_protobuf_message_proto_init() }
func file_machinetalk_protobuf_message_proto_init() {
	if File_machinetalk_protobuf_message_proto != nil {
		return
	}
	file_machinetalk_protobuf_nanopb_proto_init()
	file_machinetalk_protobuf_types_proto_init()
	file_machinetalk_protobuf_object_proto_init()
	file_machinetalk_protobuf_log_proto_init()
	file_machinetalk_protobuf_motcmds_proto_init()
	file_machinetalk_protobuf_task_proto_init()
	file_machinetalk_protobuf_canon_proto_init()
	file_machinetalk_protobuf_value_proto_init()
	file_machinetalk_protobuf_rtapicommand_proto_init()
	file_machinetalk_protobuf_rtapi_message_proto_init()
	file_machinetalk_protobuf_config_proto_init()
	file_machinetalk_protobuf_preview_proto_init()
	file_machinetalk_protobuf_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_machinetalk_protobuf_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machinetalk_protobuf_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_machinetalk_protobuf_message_proto_goTypes,
		DependencyIndexes: file_machinetalk_protobuf_message_proto_depIdxs,
		MessageInfos:      file_machinetalk_protobuf_message_proto_msgTypes,
	}.Build()
	File_machinetalk_protobuf_message_proto = out.File
	file_machinetalk_protobuf_message_proto_rawDesc = nil
	file_machinetalk_protobuf_message_proto_goTypes = nil
	file_machinetalk_protobuf_message_proto_depIdxs = nil
}
