// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var (
	commandReStr   = `([EFGHIJKLMNPRSTXYZ][-+]?[0-9]*\.?[0-9]*)`
	commandLineStr = regexp.MustCompile(`^([EFGHIJKLMNPRSTXYZ][-+]?[0-9]*\.?[0-9]*)+$`)
	commandRe      = regexp.MustCompile(`([EFGHIJKLMNPRSTXYZ])([-+]?[0-9]*\.?[0-9]*)`)
	splitter       = regexp.MustCompile(`\r?\n`)
	ignoreRe       = regexp.MustCompile(`^[\t ]*%[\t ]*$`)
	tabsSpacesRe   = regexp.MustCompile(`[\t ]+`)
	comment1Re     = regexp.MustCompile(`[(][^)]*[)]`)
	comment2Re     = regexp.MustCompile(`;.*$`)
)

func cleanup(line string) string {
	tmp := tabsSpacesRe.ReplaceAllString(line, "")
	tmp = comment1Re.ReplaceAllString(tmp, "")
	tmp = comment2Re.ReplaceAllString(tmp, "")
	return tmp
}

func parseQuick(l string) ([]Expr, error) {
	if commandLineStr.MatchString(l) {
		out := make([]Expr, 0)
		for _, piece := range commandRe.FindAllStringSubmatch(l, -1) {
			val, _ := strconv.ParseFloat(piece[2], 32)
			tmpConst := ConstExpr{
				Val:    val,
				RawVal: piece[2],
			}
			if piece[1] == "G" {
				tmpConst.RawVal = strings.TrimLeft(tmpConst.RawVal, "0")
			}
			tmp := WordExpr{Word: piece[1], Val: tmpConst}
			out = append(out, tmp)
		}
		return out, nil
	} else {
		return nil, errors.New("no quick")
	}
}

type LineAst struct {
	LineNo int
	Ast    []Expr
}

func ParseAll(in string) ([]LineAst, error) {
	out := make([]LineAst, 0)
	for lineNo, l := range splitter.Split(in, -1) {
		if ignoreRe.MatchString(l) {
			continue
		}
		cleaned := cleanup(l)
		parser := newParser("nil.ngc", []byte(cleaned))
		if cleaned == "" {
			continue
		}
		if ast, err := parseQuick(cleaned); err == nil {
			out = append(out, LineAst{LineNo: lineNo, Ast: ast})
		} else {
			rawAst2, err2 := parser.parse(g)
			if err2 != nil {
				return nil, errors.New(fmt.Sprintf("%s", err2))
			}
			ast2 := rawAst2.([]interface{})
			casted := make([]Expr, len(ast2))
			for i, val := range ast2 {
				casted[i] = val.(Expr)
			}
			gIndices0 := make([]int, 0)
			for i, val := range casted {
				word, isWord := val.(WordExpr)
				if isWord {
					if word.Word == "G" {
						gIndices0 = append(gIndices0, i)
					}
				}
			}
			gIndices1 := make([][]int, 0)
			if len(gIndices0) > 1 {
				for i := 0; i < len(gIndices0)-1; i++ {
					gIndices1 = append(gIndices1, []int{gIndices0[i], gIndices0[i+1]})
				}
				gIndices1 = append(gIndices1, []int{gIndices0[len(gIndices0)-1], len(casted)})
			}

			if len(gIndices1) > 0 {
				outss := make([]LineAst, 0)
				for _, indices := range gIndices1 {
					start := indices[0]
					end := indices[1]
					if start < end {
						outss = append(outss, LineAst{LineNo: lineNo, Ast: casted[start:end]})
					} else {
						outss = append(outss, LineAst{LineNo: lineNo, Ast: casted[start:]})
					}
				}
				out = append(out, outss...)
			} else {
				out = append(out, LineAst{LineNo: lineNo, Ast: casted})
			}
		}
	}
	return out, nil
}

func isl(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

func termer(first interface{}, rest interface{}) (Expr, error) {
	l := first.(Expr)
	for _, v := range isl(rest) {
		restExpr := isl(v)
		r := restExpr[1].(Expr)

		tmp := BinaryExpr{
			Op: CreateOp(restExpr[0].(string)),
			L:  l,
			R:  r,
		}
		l = tmp
	}
	return l, nil
}

type NumParameter int
type VarParameter string
type Var string

type Expr interface {
	isExpr()
}

type ConstExpr struct {
	Val    float64
	RawVal string
}

func (_ ConstExpr) isExpr() {}
func (e ConstExpr) String() string {
	return fmt.Sprintf("%.3f - '%s'", e.Val, e.RawVal)
}

type ParamType int

const (
	VarType ParamType = iota
	NumType
)

type VarExpr struct {
	Name string
}

func (_ VarExpr) isExpr() {}

type ParamExpr struct {
	Type ParamType
	Val  interface{}
}

func (_ ParamExpr) isExpr() {}
func (e ParamExpr) Value() {
}
func (e ParamExpr) String() string {
	if e.Type == VarType {
		return fmt.Sprintf("#%s", e.Val.(string))
	} else {
		return fmt.Sprintf("#%d", e.Val.(int))
	}
}

type Op int

const (
	PowOp = iota
	MulOp
	DivOp
	ModOp
	PlusOp
	MinusOp
	EqOp
	NeOp
	GtOp
	GeOp
	LtOp
	LeOp
	AndOp
	OrOp
	XorOp
	NullOp
)

func (o Op) String() string {
	return opToName[o]
}

var opToName = map[Op]string{
	PowOp:   "**",
	MulOp:   "*",
	DivOp:   "/",
	ModOp:   "MOD",
	PlusOp:  "+",
	MinusOp: "-",
	EqOp:    "EQ",
	NeOp:    "NE",
	GtOp:    "GT",
	GeOp:    "GE",
	LtOp:    "LT",
	LeOp:    "LE",
	AndOp:   "AND",
	OrOp:    "OR",
	XorOp:   "XOR",
}
var nameToOp = map[string]Op{
	"**":  PowOp,
	"*":   MulOp,
	"/":   DivOp,
	"MOD": ModOp,
	"+":   PlusOp,
	"-":   MinusOp,
	"EQ":  EqOp,
	"NE":  NeOp,
	"GT":  GtOp,
	"GE":  GeOp,
	"LT":  LtOp,
	"LE":  LeOp,
	"AND": AndOp,
	"OR":  OrOp,
	"XOR": XorOp,
}

func CreateOp(in string) Op {
	return nameToOp[in]
}

type BinaryExpr struct {
	Op Op
	L  Expr
	R  Expr
}

func (_ BinaryExpr) isExpr() {}
func (e BinaryExpr) String() string {
	return fmt.Sprintf("%s(%s, %s)", e.Op, e.L, e.R)
}

type FuncOp struct {
	Fct  string
	Arg1 Expr
	Arg2 Expr
}

func (_ FuncOp) isExpr() {}
func (e FuncOp) String() string {
	return fmt.Sprintf("%s(%s)", e.Fct, e.Arg1)
}

type AssignOp struct {
	Param ParamExpr
	Val   Expr
}

func (_ AssignOp) isExpr() {}
func (e AssignOp) String() string {
	return fmt.Sprintf("%s = %s", e.Param, e.Val)
}

type WordExpr struct {
	Word    string
	WordVal string
	Val     Expr
}

func (_ WordExpr) isExpr() {}
func (e WordExpr) String() string {
	return fmt.Sprintf("%s[%s]", e.Word, e.Val)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Line",
			pos:  position{line: 291, col: 1, offset: 5493},
			expr: &actionExpr{
				pos: position{line: 291, col: 9, offset: 5501},
				run: (*parser).callonLine1,
				expr: &seqExpr{
					pos: position{line: 291, col: 9, offset: 5501},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 291, col: 9, offset: 5501},
							label: "x",
							expr: &zeroOrMoreExpr{
								pos: position{line: 291, col: 11, offset: 5503},
								expr: &choiceExpr{
									pos: position{line: 291, col: 12, offset: 5504},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 291, col: 12, offset: 5504},
											name: "Affectation",
										},
										&ruleRefExpr{
											pos:  position{line: 291, col: 26, offset: 5518},
											name: "Word",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 449, col: 8, offset: 9610},
							expr: &anyMatcher{
								line: 449, col: 9, offset: 9611,
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 331, col: 1, offset: 6481},
			expr: &actionExpr{
				pos: position{line: 331, col: 9, offset: 6489},
				run: (*parser).callonExpr1,
				expr: &seqExpr{
					pos: position{line: 331, col: 9, offset: 6489},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 331, col: 9, offset: 6489},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 15, offset: 6495},
								name: "TermBoolean",
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 27, offset: 6507},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 331, col: 32, offset: 6512},
								expr: &seqExpr{
									pos: position{line: 331, col: 34, offset: 6514},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 361, col: 14, offset: 7220},
											run: (*parser).callonExpr8,
											expr: &choiceExpr{
												pos: position{line: 361, col: 16, offset: 7222},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 361, col: 16, offset: 7222},
														val:        "AND",
														ignoreCase: false,
														want:       "\"AND\"",
													},
													&litMatcher{
														pos:        position{line: 361, col: 24, offset: 7230},
														val:        "OR",
														ignoreCase: false,
														want:       "\"OR\"",
													},
													&litMatcher{
														pos:        position{line: 361, col: 31, offset: 7237},
														val:        "XOR",
														ignoreCase: false,
														want:       "\"XOR\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 331, col: 44, offset: 6524},
											name: "TermBoolean",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TermBoolean",
			pos:  position{line: 335, col: 1, offset: 6575},
			expr: &actionExpr{
				pos: position{line: 335, col: 16, offset: 6590},
				run: (*parser).callonTermBoolean1,
				expr: &seqExpr{
					pos: position{line: 335, col: 16, offset: 6590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 335, col: 16, offset: 6590},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 22, offset: 6596},
								name: "TermCompare",
							},
						},
						&labeledExpr{
							pos:   position{line: 335, col: 34, offset: 6608},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 335, col: 39, offset: 6613},
								expr: &seqExpr{
									pos: position{line: 335, col: 41, offset: 6615},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 365, col: 14, offset: 7294},
											run: (*parser).callonTermBoolean8,
											expr: &choiceExpr{
												pos: position{line: 365, col: 16, offset: 7296},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 365, col: 16, offset: 7296},
														val:        "EQ",
														ignoreCase: false,
														want:       "\"EQ\"",
													},
													&litMatcher{
														pos:        position{line: 365, col: 23, offset: 7303},
														val:        "NE",
														ignoreCase: false,
														want:       "\"NE\"",
													},
													&litMatcher{
														pos:        position{line: 365, col: 30, offset: 7310},
														val:        "GT",
														ignoreCase: false,
														want:       "\"GT\"",
													},
													&litMatcher{
														pos:        position{line: 365, col: 37, offset: 7317},
														val:        "GE",
														ignoreCase: false,
														want:       "\"GE\"",
													},
													&litMatcher{
														pos:        position{line: 365, col: 44, offset: 7324},
														val:        "LT",
														ignoreCase: false,
														want:       "\"LT\"",
													},
													&litMatcher{
														pos:        position{line: 365, col: 51, offset: 7331},
														val:        "LE",
														ignoreCase: false,
														want:       "\"LE\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 335, col: 51, offset: 6625},
											name: "TermCompare",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TermCompare",
			pos:  position{line: 339, col: 1, offset: 6676},
			expr: &actionExpr{
				pos: position{line: 339, col: 16, offset: 6691},
				run: (*parser).callonTermCompare1,
				expr: &seqExpr{
					pos: position{line: 339, col: 16, offset: 6691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 339, col: 16, offset: 6691},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 22, offset: 6697},
								name: "TermArithAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 35, offset: 6710},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 339, col: 40, offset: 6715},
								expr: &seqExpr{
									pos: position{line: 339, col: 42, offset: 6717},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 369, col: 15, offset: 7388},
											run: (*parser).callonTermCompare8,
											expr: &charClassMatcher{
												pos:             position{line: 369, col: 17, offset: 7390},
												val:             "[+-]",
												chars:           []rune{'+', '-'},
												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
												ignoreCase:      false,
												inverted:        false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 339, col: 53, offset: 6728},
											name: "TermArithAdd",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TermArithAdd",
			pos:  position{line: 343, col: 1, offset: 6780},
			expr: &actionExpr{
				pos: position{line: 343, col: 17, offset: 6796},
				run: (*parser).callonTermArithAdd1,
				expr: &seqExpr{
					pos: position{line: 343, col: 17, offset: 6796},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 343, col: 17, offset: 6796},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 23, offset: 6802},
								name: "TermArithMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 36, offset: 6815},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 343, col: 41, offset: 6820},
								expr: &seqExpr{
									pos: position{line: 343, col: 43, offset: 6822},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 373, col: 15, offset: 7452},
											run: (*parser).callonTermArithAdd8,
											expr: &choiceExpr{
												pos: position{line: 373, col: 17, offset: 7454},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:             position{line: 373, col: 17, offset: 7454},
														val:             "[*/]",
														chars:           []rune{'*', '/'},
														basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
														ignoreCase:      false,
														inverted:        false,
													},
													&litMatcher{
														pos:        position{line: 373, col: 29, offset: 7466},
														val:        "MOD",
														ignoreCase: false,
														want:       "\"MOD\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 343, col: 54, offset: 6833},
											name: "TermArithMul",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TermArithMul",
			pos:  position{line: 347, col: 1, offset: 6885},
			expr: &actionExpr{
				pos: position{line: 347, col: 17, offset: 6901},
				run: (*parser).callonTermArithMul1,
				expr: &seqExpr{
					pos: position{line: 347, col: 17, offset: 6901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 347, col: 17, offset: 6901},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 23, offset: 6907},
								name: "TermArithPow",
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 36, offset: 6920},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 347, col: 41, offset: 6925},
								expr: &seqExpr{
									pos: position{line: 347, col: 43, offset: 6927},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 377, col: 15, offset: 7524},
											run: (*parser).callonTermArithMul8,
											expr: &litMatcher{
												pos:        position{line: 377, col: 15, offset: 7524},
												val:        "**",
												ignoreCase: false,
												want:       "\"**\"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 347, col: 54, offset: 6938},
											name: "TermArithPow",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TermArithPow",
			pos:  position{line: 351, col: 1, offset: 6990},
			expr: &choiceExpr{
				pos: position{line: 351, col: 17, offset: 7006},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 17, offset: 7006},
						run: (*parser).callonTermArithPow2,
						expr: &seqExpr{
							pos: position{line: 351, col: 17, offset: 7006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 351, col: 17, offset: 7006},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 21, offset: 7010},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 26, offset: 7015},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 31, offset: 7020},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 7051},
						run: (*parser).callonTermArithPow8,
						expr: &labeledExpr{
							pos:   position{line: 353, col: 5, offset: 7051},
							label: "parameter",
							expr: &actionExpr{
								pos: position{line: 321, col: 14, offset: 6204},
								run: (*parser).callonTermArithPow10,
								expr: &seqExpr{
									pos: position{line: 321, col: 14, offset: 6204},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 321, col: 14, offset: 6204},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&labeledExpr{
											pos:   position{line: 321, col: 18, offset: 6208},
											label: "param",
											expr: &choiceExpr{
												pos: position{line: 321, col: 25, offset: 6215},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 297, col: 11, offset: 5606},
														run: (*parser).callonTermArithPow15,
														expr: &oneOrMoreExpr{
															pos: position{line: 297, col: 12, offset: 5607},
															expr: &charClassMatcher{
																pos:             position{line: 297, col: 12, offset: 5607},
																val:             "[0-9]",
																ranges:          []rune{'0', '9'},
																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																ignoreCase:      false,
																inverted:        false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 318, col: 12, offset: 6121},
														run: (*parser).callonTermArithPow18,
														expr: &seqExpr{
															pos: position{line: 318, col: 12, offset: 6121},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 318, col: 12, offset: 6121},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 318, col: 16, offset: 6125},
																	label: "ident",
																	expr: &actionExpr{
																		pos: position{line: 315, col: 10, offset: 6043},
																		run: (*parser).callonTermArithPow22,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 315, col: 10, offset: 6043},
																			expr: &charClassMatcher{
																				pos:             position{line: 315, col: 17, offset: 6050},
																				val:             "[_0-9a-zA-Z]",
																				chars:           []rune{'_'},
																				ranges:          []rune{'0', '9', 'a', 'z', 'A', 'Z'},
																				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
																				ignoreCase:      false,
																				inverted:        false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 318, col: 28, offset: 6137},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 7103},
						run: (*parser).callonTermArithPow26,
						expr: &labeledExpr{
							pos:   position{line: 355, col: 5, offset: 7103},
							label: "decimal",
							expr: &actionExpr{
								pos: position{line: 310, col: 12, offset: 5888},
								run: (*parser).callonTermArithPow28,
								expr: &seqExpr{
									pos: position{line: 310, col: 12, offset: 5888},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 310, col: 12, offset: 5888},
											expr: &charClassMatcher{
												pos:             position{line: 310, col: 13, offset: 5889},
												val:             "[+-]",
												chars:           []rune{'+', '-'},
												basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
												ignoreCase:      false,
												inverted:        false,
											},
										},
										&actionExpr{
											pos: position{line: 307, col: 19, offset: 5808},
											run: (*parser).callonTermArithPow32,
											expr: &choiceExpr{
												pos: position{line: 307, col: 20, offset: 5809},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 304, col: 22, offset: 5735},
														run: (*parser).callonTermArithPow34,
														expr: &seqExpr{
															pos: position{line: 304, col: 22, offset: 5735},
															exprs: []interface{}{
																&actionExpr{
																	pos: position{line: 297, col: 11, offset: 5606},
																	run: (*parser).callonTermArithPow36,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 297, col: 12, offset: 5607},
																		expr: &charClassMatcher{
																			pos:             position{line: 297, col: 12, offset: 5607},
																			val:             "[0-9]",
																			ranges:          []rune{'0', '9'},
																			basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																			ignoreCase:      false,
																			inverted:        false,
																		},
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 304, col: 29, offset: 5742},
																	expr: &actionExpr{
																		pos: position{line: 301, col: 16, offset: 5667},
																		run: (*parser).callonTermArithPow40,
																		expr: &seqExpr{
																			pos: position{line: 301, col: 16, offset: 5667},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 301, col: 16, offset: 5667},
																					val:        ".",
																					ignoreCase: false,
																					want:       "\".\"",
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 301, col: 20, offset: 5671},
																					expr: &actionExpr{
																						pos: position{line: 297, col: 11, offset: 5606},
																						run: (*parser).callonTermArithPow44,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 297, col: 12, offset: 5607},
																							expr: &charClassMatcher{
																								pos:             position{line: 297, col: 12, offset: 5607},
																								val:             "[0-9]",
																								ranges:          []rune{'0', '9'},
																								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																								ignoreCase:      false,
																								inverted:        false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 301, col: 16, offset: 5667},
														run: (*parser).callonTermArithPow47,
														expr: &seqExpr{
															pos: position{line: 301, col: 16, offset: 5667},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 301, col: 16, offset: 5667},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&zeroOrOneExpr{
																	pos: position{line: 301, col: 20, offset: 5671},
																	expr: &actionExpr{
																		pos: position{line: 297, col: 11, offset: 5606},
																		run: (*parser).callonTermArithPow51,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 297, col: 12, offset: 5607},
																			expr: &charClassMatcher{
																				pos:             position{line: 297, col: 12, offset: 5607},
																				val:             "[0-9]",
																				ranges:          []rune{'0', '9'},
																				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																				ignoreCase:      false,
																				inverted:        false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 7159},
						run: (*parser).callonTermArithPow54,
						expr: &labeledExpr{
							pos:   position{line: 357, col: 5, offset: 7159},
							label: "funcCall",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 14, offset: 7168},
								name: "FuncCallOp",
							},
						},
					},
				},
			},
		},
		{
			name: "FuncCallOp",
			pos:  position{line: 382, col: 1, offset: 7566},
			expr: &choiceExpr{
				pos: position{line: 382, col: 17, offset: 7582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 382, col: 17, offset: 7582},
						name: "AtanCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 28, offset: 7593},
						name: "AbsCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 38, offset: 7603},
						name: "AcosCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 49, offset: 7614},
						name: "AsinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 60, offset: 7625},
						name: "CosCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 70, offset: 7635},
						name: "ExpCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 80, offset: 7645},
						name: "FixCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 90, offset: 7655},
						name: "FupCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 100, offset: 7665},
						name: "RoundCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 112, offset: 7677},
						name: "LnCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 121, offset: 7686},
						name: "SinCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 131, offset: 7696},
						name: "SqrtCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 142, offset: 7707},
						name: "TanCall",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 152, offset: 7717},
						name: "ExistsCall",
					},
				},
			},
		},
		{
			name: "AtanCall",
			pos:  position{line: 384, col: 1, offset: 7732},
			expr: &actionExpr{
				pos: position{line: 384, col: 13, offset: 7744},
				run: (*parser).callonAtanCall1,
				expr: &seqExpr{
					pos: position{line: 384, col: 13, offset: 7744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 384, col: 13, offset: 7744},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 384, col: 17, offset: 7748},
								val:        "ATAN",
								ignoreCase: false,
								want:       "\"ATAN\"",
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 24, offset: 7755},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 28, offset: 7759},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 33, offset: 7764},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 38, offset: 7769},
							val:        "]/[",
							ignoreCase: false,
							want:       "\"]/[\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 44, offset: 7775},
							label: "arg2",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 49, offset: 7780},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 54, offset: 7785},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AbsCall",
			pos:  position{line: 388, col: 1, offset: 7874},
			expr: &actionExpr{
				pos: position{line: 388, col: 12, offset: 7885},
				run: (*parser).callonAbsCall1,
				expr: &seqExpr{
					pos: position{line: 388, col: 12, offset: 7885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 388, col: 12, offset: 7885},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 388, col: 16, offset: 7889},
								val:        "ABS",
								ignoreCase: false,
								want:       "\"ABS\"",
							},
						},
						&litMatcher{
							pos:        position{line: 388, col: 22, offset: 7895},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 26, offset: 7899},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 31, offset: 7904},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 388, col: 36, offset: 7909},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AcosCall",
			pos:  position{line: 392, col: 1, offset: 7987},
			expr: &actionExpr{
				pos: position{line: 392, col: 13, offset: 7999},
				run: (*parser).callonAcosCall1,
				expr: &seqExpr{
					pos: position{line: 392, col: 13, offset: 7999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 13, offset: 7999},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 392, col: 17, offset: 8003},
								val:        "ACOS",
								ignoreCase: false,
								want:       "\"ACOS\"",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 24, offset: 8010},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 28, offset: 8014},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 33, offset: 8019},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 38, offset: 8024},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "AsinCall",
			pos:  position{line: 396, col: 1, offset: 8101},
			expr: &actionExpr{
				pos: position{line: 396, col: 13, offset: 8113},
				run: (*parser).callonAsinCall1,
				expr: &seqExpr{
					pos: position{line: 396, col: 13, offset: 8113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 396, col: 13, offset: 8113},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 396, col: 17, offset: 8117},
								val:        "ASIN",
								ignoreCase: false,
								want:       "\"ASIN\"",
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 24, offset: 8124},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 28, offset: 8128},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 33, offset: 8133},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 396, col: 38, offset: 8138},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "CosCall",
			pos:  position{line: 400, col: 1, offset: 8215},
			expr: &actionExpr{
				pos: position{line: 400, col: 12, offset: 8226},
				run: (*parser).callonCosCall1,
				expr: &seqExpr{
					pos: position{line: 400, col: 12, offset: 8226},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 400, col: 12, offset: 8226},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 400, col: 16, offset: 8230},
								val:        "COS",
								ignoreCase: false,
								want:       "\"COS\"",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 22, offset: 8236},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 26, offset: 8240},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 31, offset: 8245},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 36, offset: 8250},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ExpCall",
			pos:  position{line: 404, col: 1, offset: 8327},
			expr: &actionExpr{
				pos: position{line: 404, col: 12, offset: 8338},
				run: (*parser).callonExpCall1,
				expr: &seqExpr{
					pos: position{line: 404, col: 12, offset: 8338},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 404, col: 12, offset: 8338},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 404, col: 16, offset: 8342},
								val:        "EXP",
								ignoreCase: false,
								want:       "\"EXP\"",
							},
						},
						&litMatcher{
							pos:        position{line: 404, col: 22, offset: 8348},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 26, offset: 8352},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 31, offset: 8357},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 404, col: 36, offset: 8362},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FixCall",
			pos:  position{line: 408, col: 1, offset: 8439},
			expr: &actionExpr{
				pos: position{line: 408, col: 12, offset: 8450},
				run: (*parser).callonFixCall1,
				expr: &seqExpr{
					pos: position{line: 408, col: 12, offset: 8450},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 12, offset: 8450},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 408, col: 16, offset: 8454},
								val:        "FIX",
								ignoreCase: false,
								want:       "\"FIX\"",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 22, offset: 8460},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 26, offset: 8464},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 31, offset: 8469},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 36, offset: 8474},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FupCall",
			pos:  position{line: 412, col: 1, offset: 8551},
			expr: &actionExpr{
				pos: position{line: 412, col: 12, offset: 8562},
				run: (*parser).callonFupCall1,
				expr: &seqExpr{
					pos: position{line: 412, col: 12, offset: 8562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 412, col: 12, offset: 8562},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 412, col: 16, offset: 8566},
								val:        "FUP",
								ignoreCase: false,
								want:       "\"FUP\"",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 22, offset: 8572},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 26, offset: 8576},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 31, offset: 8581},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 36, offset: 8586},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "RoundCall",
			pos:  position{line: 416, col: 1, offset: 8663},
			expr: &actionExpr{
				pos: position{line: 416, col: 14, offset: 8676},
				run: (*parser).callonRoundCall1,
				expr: &seqExpr{
					pos: position{line: 416, col: 14, offset: 8676},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 416, col: 14, offset: 8676},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 416, col: 18, offset: 8680},
								val:        "ROUND",
								ignoreCase: false,
								want:       "\"ROUND\"",
							},
						},
						&litMatcher{
							pos:        position{line: 416, col: 26, offset: 8688},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 416, col: 30, offset: 8692},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 35, offset: 8697},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 416, col: 40, offset: 8702},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LnCall",
			pos:  position{line: 420, col: 1, offset: 8779},
			expr: &actionExpr{
				pos: position{line: 420, col: 11, offset: 8789},
				run: (*parser).callonLnCall1,
				expr: &seqExpr{
					pos: position{line: 420, col: 11, offset: 8789},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 420, col: 11, offset: 8789},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 420, col: 15, offset: 8793},
								val:        "LN",
								ignoreCase: false,
								want:       "\"LN\"",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 20, offset: 8798},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 24, offset: 8802},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 29, offset: 8807},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 34, offset: 8812},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SinCall",
			pos:  position{line: 424, col: 1, offset: 8889},
			expr: &actionExpr{
				pos: position{line: 424, col: 12, offset: 8900},
				run: (*parser).callonSinCall1,
				expr: &seqExpr{
					pos: position{line: 424, col: 12, offset: 8900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 424, col: 12, offset: 8900},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 424, col: 16, offset: 8904},
								val:        "SIN",
								ignoreCase: false,
								want:       "\"SIN\"",
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 22, offset: 8910},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 26, offset: 8914},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 31, offset: 8919},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 36, offset: 8924},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SqrtCall",
			pos:  position{line: 428, col: 1, offset: 9001},
			expr: &actionExpr{
				pos: position{line: 428, col: 13, offset: 9013},
				run: (*parser).callonSqrtCall1,
				expr: &seqExpr{
					pos: position{line: 428, col: 13, offset: 9013},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 13, offset: 9013},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 428, col: 17, offset: 9017},
								val:        "SQRT",
								ignoreCase: false,
								want:       "\"SQRT\"",
							},
						},
						&litMatcher{
							pos:        position{line: 428, col: 24, offset: 9024},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 428, col: 28, offset: 9028},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 33, offset: 9033},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 428, col: 38, offset: 9038},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "TanCall",
			pos:  position{line: 432, col: 1, offset: 9115},
			expr: &actionExpr{
				pos: position{line: 432, col: 12, offset: 9126},
				run: (*parser).callonTanCall1,
				expr: &seqExpr{
					pos: position{line: 432, col: 12, offset: 9126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 432, col: 12, offset: 9126},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 432, col: 16, offset: 9130},
								val:        "TAN",
								ignoreCase: false,
								want:       "\"TAN\"",
							},
						},
						&litMatcher{
							pos:        position{line: 432, col: 22, offset: 9136},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 26, offset: 9140},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 31, offset: 9145},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 432, col: 36, offset: 9150},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ExistsCall",
			pos:  position{line: 436, col: 1, offset: 9227},
			expr: &actionExpr{
				pos: position{line: 436, col: 15, offset: 9241},
				run: (*parser).callonExistsCall1,
				expr: &seqExpr{
					pos: position{line: 436, col: 15, offset: 9241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 436, col: 15, offset: 9241},
							label: "fct",
							expr: &litMatcher{
								pos:        position{line: 436, col: 19, offset: 9245},
								val:        "EXISTS",
								ignoreCase: false,
								want:       "\"EXISTS\"",
							},
						},
						&litMatcher{
							pos:        position{line: 436, col: 28, offset: 9254},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 32, offset: 9258},
							label: "arg1",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 37, offset: 9263},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 436, col: 42, offset: 9268},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Affectation",
			pos:  position{line: 440, col: 1, offset: 9345},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 9360},
				run: (*parser).callonAffectation1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 9360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 9360},
							label: "parameter",
							expr: &actionExpr{
								pos: position{line: 321, col: 14, offset: 6204},
								run: (*parser).callonAffectation4,
								expr: &seqExpr{
									pos: position{line: 321, col: 14, offset: 6204},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 321, col: 14, offset: 6204},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&labeledExpr{
											pos:   position{line: 321, col: 18, offset: 6208},
											label: "param",
											expr: &choiceExpr{
												pos: position{line: 321, col: 25, offset: 6215},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 297, col: 11, offset: 5606},
														run: (*parser).callonAffectation9,
														expr: &oneOrMoreExpr{
															pos: position{line: 297, col: 12, offset: 5607},
															expr: &charClassMatcher{
																pos:             position{line: 297, col: 12, offset: 5607},
																val:             "[0-9]",
																ranges:          []rune{'0', '9'},
																basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
																ignoreCase:      false,
																inverted:        false,
															},
														},
													},
													&actionExpr{
														pos: position{line: 318, col: 12, offset: 6121},
														run: (*parser).callonAffectation12,
														expr: &seqExpr{
															pos: position{line: 318, col: 12, offset: 6121},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 318, col: 12, offset: 6121},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 318, col: 16, offset: 6125},
																	label: "ident",
																	expr: &actionExpr{
																		pos: position{line: 315, col: 10, offset: 6043},
																		run: (*parser).callonAffectation16,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 315, col: 10, offset: 6043},
																			expr: &charClassMatcher{
																				pos:             position{line: 315, col: 17, offset: 6050},
																				val:             "[_0-9a-zA-Z]",
																				chars:           []rune{'_'},
																				ranges:          []rune{'0', '9', 'a', 'z', 'A', 'Z'},
																				basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false},
																				ignoreCase:      false,
																				inverted:        false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 318, col: 28, offset: 6137},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 19, offset: 5584},
							expr: &charClassMatcher{
								pos:             position{line: 295, col: 19, offset: 5584},
								val:             "[ \\n\\t\\r]",
								chars:           []rune{' ', '\n', '\t', '\r'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&litMatcher{
							pos:        position{line: 440, col: 38, offset: 9382},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 295, col: 19, offset: 5584},
							expr: &charClassMatcher{
								pos:             position{line: 295, col: 19, offset: 5584},
								val:             "[ \\n\\t\\r]",
								chars:           []rune{' ', '\n', '\t', '\r'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 44, offset: 9388},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 49, offset: 9393},
								name: "TermArithPow",
							},
						},
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 444, col: 1, offset: 9482},
			expr: &actionExpr{
				pos: position{line: 444, col: 9, offset: 9490},
				run: (*parser).callonWord1,
				expr: &seqExpr{
					pos: position{line: 444, col: 9, offset: 9490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 444, col: 9, offset: 9490},
							label: "word",
							expr: &charClassMatcher{
								pos:             position{line: 444, col: 14, offset: 9495},
								val:             "[EFGHIJKLMNPRSTXYZ]",
								chars:           []rune{'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'X', 'Y', 'Z'},
								basicLatinChars: [128]bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false},
								ignoreCase:      false,
								inverted:        false,
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 34, offset: 9515},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 39, offset: 9520},
								name: "Expr",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onLine1(x interface{}) (interface{}, error) {
	return x.([]interface{}), nil
}

func (p *parser) callonLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLine1(stack["x"])
}

func (c *current) onExpr8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpr8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr8()
}

func (c *current) onExpr1(first, rest interface{}) (interface{}, error) {
	return termer(first, rest)
}

func (p *parser) callonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr1(stack["first"], stack["rest"])
}

func (c *current) onTermBoolean8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermBoolean8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermBoolean8()
}

func (c *current) onTermBoolean1(first, rest interface{}) (interface{}, error) {
	return termer(first, rest)
}

func (p *parser) callonTermBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermBoolean1(stack["first"], stack["rest"])
}

func (c *current) onTermCompare8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermCompare8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermCompare8()
}

func (c *current) onTermCompare1(first, rest interface{}) (interface{}, error) {
	return termer(first, rest)
}

func (p *parser) callonTermCompare1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermCompare1(stack["first"], stack["rest"])
}

func (c *current) onTermArithAdd8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithAdd8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithAdd8()
}

func (c *current) onTermArithAdd1(first, rest interface{}) (interface{}, error) {
	return termer(first, rest)
}

func (p *parser) callonTermArithAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithAdd1(stack["first"], stack["rest"])
}

func (c *current) onTermArithMul8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithMul8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithMul8()
}

func (c *current) onTermArithMul1(first, rest interface{}) (interface{}, error) {
	return termer(first, rest)
}

func (p *parser) callonTermArithMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithMul1(stack["first"], stack["rest"])
}

func (c *current) onTermArithPow2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonTermArithPow2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow2(stack["expr"])
}

func (c *current) onTermArithPow15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow15()
}

func (c *current) onTermArithPow22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow22()
}

func (c *current) onTermArithPow18(ident interface{}) (interface{}, error) {
	return VarExpr{Name: ident.(string)}, nil
}

func (p *parser) callonTermArithPow18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow18(stack["ident"])
}

func (c *current) onTermArithPow10(param interface{}) (interface{}, error) {
	switch param.(type) {
	case VarExpr:
		return ParamExpr{Type: VarType, Val: param.(VarExpr).Name}, nil
	default:
		num, _ := strconv.Atoi(param.(string))
		return ParamExpr{Type: NumType, Val: num}, nil
	}
}

func (p *parser) callonTermArithPow10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow10(stack["param"])
}

func (c *current) onTermArithPow8(parameter interface{}) (interface{}, error) {
	return parameter, nil
}

func (p *parser) callonTermArithPow8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow8(stack["parameter"])
}

func (c *current) onTermArithPow36() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow36()
}

func (c *current) onTermArithPow44() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow44()
}

func (c *current) onTermArithPow40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow40()
}

func (c *current) onTermArithPow34() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow34()
}

func (c *current) onTermArithPow51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow51()
}

func (c *current) onTermArithPow47() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow47()
}

func (c *current) onTermArithPow32() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTermArithPow32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow32()
}

func (c *current) onTermArithPow28() (interface{}, error) {
	tmp, _ := strconv.ParseFloat(string(c.text), 32)
	return ConstExpr{Val: tmp, RawVal: string(c.text)}, nil
}

func (p *parser) callonTermArithPow28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow28()
}

func (c *current) onTermArithPow26(decimal interface{}) (interface{}, error) {
	return decimal.(ConstExpr), nil
}

func (p *parser) callonTermArithPow26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow26(stack["decimal"])
}

func (c *current) onTermArithPow54(funcCall interface{}) (interface{}, error) {
	return funcCall, nil
}

func (p *parser) callonTermArithPow54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermArithPow54(stack["funcCall"])
}

func (c *current) onAtanCall1(fct, arg1, arg2 interface{}) (interface{}, error) {
	return FuncOp{Fct: fct.(string), Arg1: arg1.(Expr), Arg2: arg2.(Expr)}, nil
}

func (p *parser) callonAtanCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtanCall1(stack["fct"], stack["arg1"], stack["arg2"])
}

func (c *current) onAbsCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonAbsCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAbsCall1(stack["fct"], stack["arg1"])
}

func (c *current) onAcosCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonAcosCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAcosCall1(stack["fct"], stack["arg1"])
}

func (c *current) onAsinCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonAsinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsinCall1(stack["fct"], stack["arg1"])
}

func (c *current) onCosCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonCosCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCosCall1(stack["fct"], stack["arg1"])
}

func (c *current) onExpCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonExpCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpCall1(stack["fct"], stack["arg1"])
}

func (c *current) onFixCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonFixCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixCall1(stack["fct"], stack["arg1"])
}

func (c *current) onFupCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonFupCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFupCall1(stack["fct"], stack["arg1"])
}

func (c *current) onRoundCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonRoundCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoundCall1(stack["fct"], stack["arg1"])
}

func (c *current) onLnCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonLnCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLnCall1(stack["fct"], stack["arg1"])
}

func (c *current) onSinCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonSinCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinCall1(stack["fct"], stack["arg1"])
}

func (c *current) onSqrtCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonSqrtCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqrtCall1(stack["fct"], stack["arg1"])
}

func (c *current) onTanCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonTanCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTanCall1(stack["fct"], stack["arg1"])
}

func (c *current) onExistsCall1(fct, arg1 interface{}) (interface{}, error) {
	return FuncOp{Fct: string(fct.([]byte)), Arg1: arg1.(Expr)}, nil
}

func (p *parser) callonExistsCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExistsCall1(stack["fct"], stack["arg1"])
}

func (c *current) onAffectation9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAffectation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAffectation9()
}

func (c *current) onAffectation16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAffectation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAffectation16()
}

func (c *current) onAffectation12(ident interface{}) (interface{}, error) {
	return VarExpr{Name: ident.(string)}, nil
}

func (p *parser) callonAffectation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAffectation12(stack["ident"])
}

func (c *current) onAffectation4(param interface{}) (interface{}, error) {
	switch param.(type) {
	case VarExpr:
		return ParamExpr{Type: VarType, Val: param.(VarExpr).Name}, nil
	default:
		num, _ := strconv.Atoi(param.(string))
		return ParamExpr{Type: NumType, Val: num}, nil
	}
}

func (p *parser) callonAffectation4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAffectation4(stack["param"])
}

func (c *current) onAffectation1(parameter, expr interface{}) (interface{}, error) {
	return AssignOp{Param: parameter.(ParamExpr), Val: expr.(Expr)}, nil
}

func (p *parser) callonAffectation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAffectation1(stack["parameter"], stack["expr"])
}

func (c *current) onWord1(word, expr interface{}) (interface{}, error) {
	return WordExpr{Word: string(word.([]byte)), Val: expr.(Expr)}, nil
}

func (p *parser) callonWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord1(stack["word"], stack["expr"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	if cur < 128 {
		if chr.basicLatinChars[cur] != chr.inverted {
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
